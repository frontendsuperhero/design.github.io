@charset "UTF-8";

/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/

body,
div,
dl,
dt,
dd,
ul,
li,
h1,
h2,
h3,
h4,
h5,
h6,
pre,
code,
form,
fieldset,
input,
textarea,
p,
blockquote,
th,
td {
  margin: 0;
  padding: 0;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

fieldset,
img,
abbr {
  border: 0;
}

address,
caption,
cite,
code,
dfn,
em,
strong,
th,
var {
  font-style: normal;
  font-weight: normal;
}

ul li {
  list-style: none;
}

caption,
th {
  text-align: left;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: 100%;
  font-weight: normal;
}

sup {
  vertical-align: text-top;
}

sub {
  vertical-align: text-bottom;
}

input,
textarea,
select {
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
}

legend {
  color: #000;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section,
main {
  display: block;
}

img {
  max-width: 100%;
  height: auto;
}

.wrapper {
  max-width: 940px;
  margin: 0 auto;
  padding-left: 60px;
  padding-right: 60px;
}

@font-face {
  font-family: 'OpenSans-Regular';
  src: url('../../fonts/OpenSans/OpenSans-Regular.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'PTSans-Bold';
  src: url('../../fonts/PTSans/PTSans-Bold.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

body {
  font-family: 'OpenSans-Regular';
  padding: 0;
  margin: 0;
}

a,
button {
  cursor: pointer;
}

a:focus,
button:focus {
  outline: none;
}

a {
  text-decoration: none;
  color: inherit;
}

input {
  cursor: text;
}

input:focus {
  outline: none;
}

.page__title-h1,
.page__title-h2 {
  font-family: "PTSans-Bold";
  color: #0abb0e;
  text-transform: uppercase;
  line-height: 40px;
  letter-spacing: 1px;
}

.page__title-h1 {
  font-size: 45px;
}

.page__title-h2 {
  font-size: 25px;
  color: #0abb0e;
}

.page__title-h2_white {
  color: white;
}

.page__btn {
  cursor: pointer;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  -webkit-box-align: center;
          align-items: center;
  text-decoration: none;
  border-radius: 5px;
  height: 68px;
  font-size: 20px;
  letter-spacing: 1px;
  line-height: 30px;
  font-family: 'PTSans-Bold';
  text-transform: uppercase;
  border: none;
  color: #ffffff;
  background-color: #7e3cf9;
  border: 1px solid #7e3cf9;
}

.page__btn:hover {
  color: #262626;
  background-color: #ffffff;
  -webkit-transition: all ease-out 0.5s;
  transition: all ease-out 0.5s;
}

.page__btn_2 {
  cursor: pointer;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  -webkit-box-align: center;
          align-items: center;
  text-decoration: none;
  width: 240px;
  border-radius: 5px;
  height: 68px;
  font-size: 20px;
  letter-spacing: 1px;
  line-height: 30px;
  font-family: 'PTSans-Bold';
  text-transform: uppercase;
  border: none;
  color: #ffffff;
  background-color: #7e3cf9;
  border: 1px solid #7e3cf9;
}

.page__btn_2:hover {
  color: #262626;
  background-color: #ffffff;
  -webkit-transition: all ease-out 0.5s;
  transition: all ease-out 0.5s;
}

.page__btn_3 {
  cursor: pointer;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  -webkit-box-align: center;
          align-items: center;
  text-decoration: none;
  width: 240px;
  border-radius: 5px;
  height: 68px;
  font-size: 20px;
  letter-spacing: 1px;
  line-height: 30px;
  font-family: 'PTSans-Bold';
  text-transform: uppercase;
  border: none;
  color: #ffffff;
  background-color: #7e3cf9;
  border: 1px solid #7e3cf9;
}

.page__btn_3:hover {
  color: #262626;
  background-color: #ffffff;
  -webkit-transition: all ease-out 0.5s;
  transition: all ease-out 0.5s;
}

.page__text {
  font-size: 16px;
  line-height: 30px;
  letter-spacing: 1px;
}

.header {
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  margin-left: -10px;
  margin-right: -10px;
  color: #ffffff;
  -webkit-box-align: center;
          align-items: center;
}

.header-logo {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(50% - 20px);
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center;
}

.header-logo__icon {
  background-image: url(../assets/icons/sprite.png);
  background-position: 0px 0px;
  width: 43px;
  height: 41px;
}

.header-logo__text {
  font-family: "PTSans-Bold";
  margin-left: 10px;
  font-size: 25px;
}

.header-social {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(50% - 20px);
}

.header-social .social {
  -webkit-box-pack: end;
          justify-content: flex-end;
}

.header-social .social__icon {
  -webkit-filter: invert(1);
          filter: invert(1);
}

.header-block {
  position: fixed;
  width: 100%;
  z-index: 2;
}

.banner {
  position: relative;
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
  -webkit-box-pack: center;
          justify-content: center;
  background-image: url("../assets/img/bg.jpg");
  background-repeat: no-repeat;
  background-size: cover;
  text-align: center;
}

.banner-block {
  position: relative;
  color: #fff;
  padding-top: 15px;
}

.banner-block-info {
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  font-size: 20px;
  margin-top: 25px;
  font-family: "PTSans-Bold";
}

.banner-block-info div {
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center;
  margin: 0 10px;
}

.banner-block-info__icon-celender,
.banner-block-info__icon-mark-map {
  width: 15px;
  height: 15px;
}

.banner-block-info__icon-celender {
  background-image: url(../assets/icons/sprite.png);
  background-position: 0px -51px;
  width: 17px;
  height: 19px;
}

.banner-block-info__icon-mark-map {
  background-image: url(../assets/icons/sprite.png);
  background-position: -113px -52px;
  width: 12px;
  height: 16px;
}

.banner-block-text {
  margin: 25px auto 35px;
  width: calc(83.33333333333334% - 20px);
  -webkit-animation-duration: 1s;
  animation-duration: 1s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
  -webkit-animation-name: fadeIn;
  animation-name: fadeIn;
}

@-webkit-keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

.banner-block-btn {
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  margin-bottom: 50px;
}

.banner-block-btn .page__btn {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(25% - 20px);
}

.banner-block-counter {
  width: calc(58.333333333333336% - 20px);
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  margin: 0 auto -70px;
  background-color: #ff8a01;
  padding: 25px 50px;
}

.banner-block-counter__item {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(25% - 20px);
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
  border: 2px solid #ffffff;
  border-radius: 10%;
  padding: 25px 0;
}

.banner-block-counter__item_number {
  font-size: 22px;
  font-family: "PTSans-Bold";
}

.banner-block-counter__item_text {
  font-size: 16px;
}

.banner_opacity {
  width: 100%;
  height: 100%;
  position: absolute;
  background-color: rgba(0, 0, 0, 0.5);
}

.about-event-blok {
  display: -webkit-box;
  display: flex;
  padding-bottom: 80px;
}

.about-event__wrapper {
  display: -webkit-box;
  display: flex;
}

.about-event__left {
  padding-top: 160px;
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(50% - 20px);
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
}

.about-event__title {
  font-size: 25px;
  color: #0abb0e;
  text-transform: uppercase;
  font-family: "PTSans-Bold";
  padding-bottom: 30px;
  width: calc(50% - 20px);
}

.about-event__text_2 {
  padding-bottom: 40px;
  font-size: 16px;
  color: #666666;
  width: 460px;
}

.about-event__text_3 {
  font-size: 16px;
  color: #666666;
  padding-bottom: 40px;
  width: 401px;
}

.about-event__right {
  width: 50%;
  height: 375px;
  background-color: #f5f5f5;
  margin-top: 150px;
  width: 400px;
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(50% - 20px);
}

.about-event__icon-map {
  background-image: url(../assets/icons/sprite.png);
  background-position: -113px -52px;
  width: 12px;
  height: 16px;
  position: relative;
  top: 20px;
  left: 20px;
}

.about-event__icon-celender {
  background-image: url(../assets/icons/sprite.png);
  background-position: 0px -51px;
  width: 17px;
  height: 19px;
  position: relative;
  top: 20px;
  left: 20px;
}

.about-event__icon-microphone {
  background-image: url(../assets/icons/sprite.png);
  background-position: -27px -51px;
  width: 14px;
  height: 19px;
  position: relative;
  top: 20px;
  left: 20px;
}

.about-event__icon-manplus {
  background-image: url(../assets/icons/sprite.png);
  background-position: -53px 0px;
  width: 24px;
  height: 19px;
  position: relative;
  top: 20px;
  left: 20px;
}

.about-event__blok_1,
.about-event__blok_2,
.about-event__blok_3,
.about-event__blok_4 {
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
}

.about-event__text_4 {
  font-weight: bold;
  font-size: 20px;
  padding-left: 50px;
  font-family: "PTSans-Bold";
}

.about-event__text_5 {
  padding-left: 50px;
  color: #888888;
}

.presentation {
  background-color: #f5f5f5;
  max-height: 543px;
  margin-top: 80px;
  padding-top: 80px;
  overflow: hidden;
  text-align: center;
}

.presentation .page__text {
  width: calc(66.66666666666667% - 20px);
  margin: 0 auto;
  padding: 40px 30px;
  color: #777;
}

.presentation .page__btn {
  width: calc(25% - 20px);
  margin: 0 auto 50px;
}

.presentation .page__img {
  margin-left: 30px;
}

.event {
  padding: 75px 0;
  text-align: center;
}

.event .page__title-h2 {
  margin-bottom: 25px;
}

.event .social__icon {
  -webkit-filter: invert(0.7);
          filter: invert(0.7);
}

.items-block {
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  margin-left: -10px;
  margin-right: -10px;
}

.items-block .item {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(25% - 20px);
}

.items-block .item__img {
  border-radius: 100%;
  overflow: hidden;
  max-height: 220px;
}

.items-block .item__img img {
  cursor: pointer;
  -webkit-transform: scale(1);
      -ms-transform: scale(1);
          transform: scale(1);
  -webkit-transition: -webkit-transform 0.5s;
  transition: -webkit-transform 0.5s;
  transition: transform 0.5s;
  transition: transform 0.5s, -webkit-transform 0.5s;
}

.items-block .item__img img:hover {
  -webkit-transform: scale(1.2);
      -ms-transform: scale(1.2);
          transform: scale(1.2);
}

.items-block .item__name {
  font-size: 20px;
  font-family: "PTSans-Bold";
  letter-spacing: 1px;
  line-height: 30px;
  margin-top: 5px;
  color: #444;
}

.items-block .item__specname {
  font-size: 15px;
  letter-spacing: 1px;
  line-height: 30px;
  color: #888;
  font-weight: 400;
  margin-bottom: 8px;
}

.social {
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
}

.social__icon {
  margin: 0 8px;
  border-radius: 2px;
}

.social__icon:last-child {
  margin-right: 0;
}

.social__icon_fb,
.social__icon_tw,
.social__icon_inst,
.social__icon_vimeo,
.social__icon_google {
  -webkit-filter: invert(1);
          filter: invert(1);
}

.social__icon_fb:hover,
.social__icon_tw:hover,
.social__icon_inst:hover,
.social__icon_vimeo:hover,
.social__icon_google:hover {
  -webkit-filter: invert(0);
          filter: invert(0);
}

.social__icon_fb {
  background-image: url(../assets/icons/sprite.png);
  background-position: -51px -51px;
  width: 16px;
  height: 16px;
}

.social__icon_fb:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -87px 0px;
  width: 16px;
  height: 16px;
}

.social__icon_tw {
  background-image: url(../assets/icons/sprite.png);
  background-position: -52px -80px;
  width: 16px;
  height: 16px;
}

.social__icon_tw:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -78px -80px;
  width: 16px;
  height: 16px;
}

.social__icon_inst {
  background-image: url(../assets/icons/sprite.png);
  background-position: 0px -80px;
  width: 16px;
  height: 16px;
}

.social__icon_inst:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -26px -80px;
  width: 16px;
  height: 16px;
}

.social__icon_vimeo {
  background-image: url(../assets/icons/sprite.png);
  background-position: -113px 0px;
  width: 16px;
  height: 16px;
}

.social__icon_vimeo:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -113px -26px;
  width: 16px;
  height: 16px;
}

.social__icon_google {
  background-image: url(../assets/icons/sprite.png);
  background-position: -87px -26px;
  width: 16px;
  height: 16px;
}

.social__icon_google:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -87px -52px;
  width: 16px;
  height: 16px;
}

.debugGrid {
  height: 100vh;
  position: fixed;
  width: 100%;
}

.debugGrid > div {
  height: inherit;
  max-width: 940px;
  margin: 0 auto;
  padding-left: 60px;
  padding-right: 60px;
}

.debugGrid > div > div {
  height: inherit;
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  margin-left: -10px;
  margin-right: -10px;
}

.debugGrid > div > div > div {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(8.333333333333334% - 20px);
  height: inherit;
  outline: 1px solid #ff0;
  background: rgba(0, 0, 0, 0.4);
}

.debugGrid-btn {
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  position: fixed;
  right: 0;
  bottom: 0;
  width: 50px;
  height: 50px;
  border: 1px solid #ff0;
  border-radius: 50%;
  z-index: 1;
  background: rgba(0, 0, 0, 0.4);
}

.debugGrid-btnhidden {
  display: none;
}

.debugGrid-btn:before,
.debugGrid-btn:after {
  content: '';
  align-self: center;
  background: #000;
}

.debugGrid-btn:before {
  width: 25px;
  height: 2px;
}

.debugGrid-btncreate:after {
  width: 2px;
  height: 25px;
  position: absolute;
}

.debugGrid__z-index-negative {
  z-index: -1;
}

@media screen and (max-width: 992px) {
  .banner-block-counter {
    width: calc(100% - 20px);
  }

  .banner-block-counter {
    padding: 25px;
  }

  .items-block .item {
    width: calc(50% - 20px);
  }

  .items-block .item {
    margin-bottom: 15px;
  }
}

@media screen and (max-width: 768px) {
  .banner-block-btn {
    flex-wrap: wrap;
  }

  .banner-block-btn .page__btn {
    width: calc(58.333333333333336% - 20px);
  }

  .banner-block-btn .page__btn {
    margin-bottom: 15px;
  }

  .items-block .item {
    width: calc(100% - 20px);
  }
}

@media screen and (max-width: 576px) {
  .wrapper {
    padding-left: 5px;
    padding-right: 5px;
  }

  .header {
    margin-left: -5px;
    margin-right: -5px;
  }

  .header-logo {
    margin-left: 5px;
    margin-right: 5px;
  }

  .header-social {
    margin-left: 5px;
    margin-right: 5px;
  }

  .banner-block-text {
    width: calc(100% - 10px);
  }

  .banner-block-btn .page__btn {
    margin-left: 5px;
    margin-right: 5px;
  }

  .banner-block-btn .page__btn {
    width: calc(100% - 10px);
  }

  .banner-block-counter {
    display: none;
  }

  .banner-block-counter__item {
    margin-left: 5px;
    margin-right: 5px;
  }

  .about-event__left {
    margin-left: 5px;
    margin-right: 5px;
  }

  .about-event__right {
    margin-left: 5px;
    margin-right: 5px;
  }

  .presentation .page__text {
    width: calc(100% - 10px);
  }

  .presentation .page__text {
    padding: 20px 0;
  }

  .presentation .page__btn {
    width: calc(100% - 10px);
  }

  .presentation .page__img {
    display: none;
  }

  .items-block {
    margin-left: -5px;
    margin-right: -5px;
  }

  .items-block .item {
    margin-left: 5px;
    margin-right: 5px;
  }

  .debugGrid > div {
    padding-left: 5px;
    padding-right: 5px;
  }

  .debugGrid > div {
    padding-left: 5px;
    padding-right: 5px;
  }

  .debugGrid > div > div {
    margin-left: -5px;
    margin-right: -5px;
  }

  .debugGrid > div > div > div {
    margin-left: 5px;
    margin-right: 5px;
  }

  .debugGrid > div > div > div {
    width: calc(8.333333333333334% - 10px);
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdGlvbi9hbmltYXRpb24ubGVzcyIsInN0eWxlcy5jc3MiLCJzbWFydGdyaWQvc21hcnQtZ3JpZC5sZXNzIiwiYmxvY2tzL2Jhc2UubGVzcyIsImZvbnRzL2ZvbnRzLmxlc3MiLCJibG9ja3MvcGFnZS5sZXNzIiwiYmxvY2tzL2hlYWRlci5sZXNzIiwic3ByaXRlL3Nwcml0ZS5sZXNzIiwiYmxvY2tzL2Jhbm5lci5sZXNzIiwiYmxvY2tzL2Fib3V0LWV2ZW50Lmxlc3MiLCJibG9ja3MvcHJlc2VudGF0aW9uLmxlc3MiLCJibG9ja3MvZXZlbnQubGVzcyIsImJsb2Nrcy9pdGVtcy5sZXNzIiwiYmxvY2tzL3NvY2lhbC5sZXNzIiwiYmxvY2tzL2RlYnVnLmxlc3MiLCJtaXhpbnMvZGVidWdCdG4tbWl4aW4ubGVzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBUzs7QUNFVDs7Ozs7Ozs7Ozs7O0NBWUM7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXdCQzs7QUFFRDs7Ozs7Ozs7Q0NzWGE7O0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBS1gsU0FBQTtFQUNBLFVBQUE7QUR6VlI7O0FDMlZhO0VBQUkseUJBQUE7RUFDVCxpQkFBQTtBRHZWUjs7QUN5Vlk7OztFQUFrQixTQUFBO0FBQUk7O0FBQVU7Ozs7Ozs7OztFQU9oQyxrQkFBQTtFQUNKLG1CQUFBO0FEOVVSOztBQ2dWTztFQUFHLGdCQUFBO0FBQUc7O0FBQU07O0VBRVgsZ0JBQUE7QUR6VVI7O0FBRUE7Ozs7OztFQytVVSxlQUFBO0VBQVMsbUJBQUE7QUR2VW5COztBQUVBO0VBQ0Usd0JBQXdCO0FDeVV0Qjs7QUR0VUo7RUN5VUksMkJBQUE7QUFBUTs7QUFBYzs7O0VBQXlCLG9CQUFBO0VBQU8sa0JBQUE7RUFBTyxvQkFBQTtBQUFLOztBQUFZO0VBQzFFLFdBQUE7QUQ1VFI7O0FBRUE7Ozs7Ozs7Ozs7OztFQVlFLGNDMUhNO0FEMkhSOztBRWxKQTtFQ1JJLGVBQWE7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QUNFLGFBQWE7RUFDZjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixpQkFBaUI7RUFDbkI7O0VBRUE7SUFDRSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLHdCQUF3QjtFQUMxQjs7RUFFQTtJQUNFLGVBQWU7RUFDakI7O0VBRUE7SUFDRSx3QkFBd0I7RUFDMUI7O0VBRUE7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxpQkFBaUI7SUFDakIsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLGlCQUFpQjtJQUNqQixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxpQkFBaUI7SUFDakIsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsaUJBQWlCO0lBQ2pCLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixpQkFBaUI7RUFDbkI7O0VBRUE7SUFDRSxzQ0FBc0M7RUFDeEM7QUFDRiIsImZpbGUiOiJzdHlsZXMuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGNoYXJzZXQgXCJVVEYtOFwiO1xyXG5cclxuLy8gaHR0cHM6Ly9kYW5lZGVuLmdpdGh1Yi5pby9hbmltYXRlLmNzcy9cclxuLmFuaW1hdGVkKEBjb250ZW50KSB7XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMXM7XHJcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDFzO1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOiBib3RoO1xyXG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcclxuICAgIEBjb250ZW50KCk7XHJcbn1cclxuXHJcbi5kZWxheShAcykge1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IEBzO1xyXG4gICAgYW5pbWF0aW9uLWRlbGF5OiBAcztcclxufVxyXG5cclxuLmZhc3QoKSB7XHJcbiAgICAuZGVsYXkoODAwbXMpO1xyXG59XHJcblxyXG4uZmFzdGVyKCkge1xyXG4gICAgLmRlbGF5KDUwMG1zKTtcclxufVxyXG5cclxuLmluZmluaXRlKCkge1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcclxuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xyXG59XHJcblxyXG4uc2xvdygpIHtcclxuICAgIC5kZWxheSgycyk7XHJcbn1cclxuXHJcbi5zbG93ZXIoKSB7XHJcbiAgICAuZGVsYXkoM3MpO1xyXG59XHJcblxyXG4uYm91bmNlKCkge1xyXG4gICAgQGtleWZyYW1lcyBib3VuY2Uge1xyXG5cclxuICAgICAgICBmcm9tLFxyXG4gICAgICAgIDIwJSxcclxuICAgICAgICA1MyUsXHJcbiAgICAgICAgODAlLFxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSxcclxuICAgICAgICA0MyUge1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjc1NSwgMC4wNSwgMC44NTUsIDAuMDYpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NTUsIDAuMDUsIDAuODU1LCAwLjA2KTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA3MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjc1NSwgMC4wNSwgMC44NTUsIDAuMDYpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NTUsIDAuMDUsIDAuODU1LCAwLjA2KTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xNXB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTVweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA5MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTRweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTRweCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGJvdW5jZTtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2U7XHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBib3R0b207XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgYm90dG9tO1xyXG59XHJcblxyXG4uYm91bmNlSW4oKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGJvdW5jZUluIHtcclxuXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICAyMCUsXHJcbiAgICAgICAgNDAlLFxyXG4gICAgICAgIDYwJSxcclxuICAgICAgICA4MCUsXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC4zLCAwLjMsIDAuMyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjMsIDAuMywgMC4zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEuMSwgMS4xLCAxLjEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMS4xLCAxLjEsIDEuMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjksIDAuOSwgMC45KTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuOSwgMC45LCAwLjkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMS4wMywgMS4wMywgMS4wMyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLjAzLCAxLjAzLCAxLjAzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuOTcsIDAuOTcsIDAuOTcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC45NywgMC45NywgMC45Nyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjc1cztcclxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC43NXM7XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBib3VuY2VJbjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VJbjtcclxufVxyXG5cclxuLmJvdW5jZUluRG93bigpIHtcclxuICAgIEBrZXlmcmFtZXMgYm91bmNlSW5Eb3duIHtcclxuXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICA2MCUsXHJcbiAgICAgICAgNzUlLFxyXG4gICAgICAgIDkwJSxcclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwMDBweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMjVweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMjVweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA3NSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDkwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCA1cHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDVweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogYm91bmNlSW5Eb3duO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGJvdW5jZUluRG93bjtcclxufVxyXG5cclxuLmJvdW5jZUluTGVmdCgpIHtcclxuICAgIEBrZXlmcmFtZXMgYm91bmNlSW5MZWZ0IHtcclxuXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICA2MCUsXHJcbiAgICAgICAgNzUlLFxyXG4gICAgICAgIDkwJSxcclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTMwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTMwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMjVweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMjVweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA3NSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDkwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCg1cHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDVweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogYm91bmNlSW5MZWZ0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGJvdW5jZUluTGVmdDtcclxufVxyXG5cclxuLmJvdW5jZUluUmlnaHQoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGJvdW5jZUluUmlnaHQge1xyXG5cclxuICAgICAgICBmcm9tLFxyXG4gICAgICAgIDYwJSxcclxuICAgICAgICA3NSUsXHJcbiAgICAgICAgOTAlLFxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDMwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMzAwMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMjVweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTI1cHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNzUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwcHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgOTAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC01cHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC01cHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGJvdW5jZUluUmlnaHQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogYm91bmNlSW5SaWdodDtcclxufVxyXG5cclxuLmJvdW5jZUluVXAoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGJvdW5jZUluVXAge1xyXG5cclxuICAgICAgICBmcm9tLFxyXG4gICAgICAgIDYwJSxcclxuICAgICAgICA3NSUsXHJcbiAgICAgICAgOTAlLFxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDMwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMzAwMHB4LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMjBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwcHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNzUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwcHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgOTAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC01cHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC01cHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBib3VuY2VJblVwO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGJvdW5jZUluVXA7XHJcbn1cclxuXHJcbi5ib3VuY2VPdXQoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGJvdW5jZU91dCB7XHJcbiAgICAgICAgMjAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC45LCAwLjksIDAuOSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjksIDAuOSwgMC45KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDUwJSxcclxuICAgICAgICA1NSUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLjEsIDEuMSwgMS4xKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEuMSwgMS4xLCAxLjEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjMsIDAuMywgMC4zKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMywgMC4zLCAwLjMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMC43NXM7XHJcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDAuNzVzO1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogYm91bmNlT3V0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGJvdW5jZU91dDtcclxufVxyXG5cclxuLmJvdW5jZU91dERvd24oKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGJvdW5jZU91dERvd24ge1xyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAxMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAxMHB4LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSxcclxuICAgICAgICA0NSUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMHB4LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDIwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMjAwMHB4LCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogYm91bmNlT3V0RG93bjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VPdXREb3duO1xyXG59XHJcblxyXG4uYm91bmNlT3V0TGVmdCgpIHtcclxuICAgIEBrZXlmcmFtZXMgYm91bmNlT3V0TGVmdCB7XHJcbiAgICAgICAgMjAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwcHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBib3VuY2VPdXRMZWZ0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGJvdW5jZU91dExlZnQ7XHJcbn1cclxuXHJcbi5ib3VuY2VPdXRSaWdodCgpIHtcclxuICAgIEBrZXlmcmFtZXMgYm91bmNlT3V0UmlnaHQge1xyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMjBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTIwcHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgyMDAwcHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBib3VuY2VPdXRSaWdodDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VPdXRSaWdodDtcclxufVxyXG5cclxuLmJvdW5jZU91dFVwKCkge1xyXG4gICAgQGtleWZyYW1lcyBib3VuY2VPdXRVcCB7XHJcbiAgICAgICAgMjAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTBweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0MCUsXHJcbiAgICAgICAgNDUlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDIwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDIwcHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwMDBweCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGJvdW5jZU91dFVwO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGJvdW5jZU91dFVwO1xyXG59XHJcblxyXG4uZmFkZUluKCkge1xyXG4gICAgQGtleWZyYW1lcyBmYWRlSW4ge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZUluO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZhZGVJbjtcclxufVxyXG5cclxuLmZhZGVJbkRvd24oKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVJbkRvd24ge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwMCUsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMDAlLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZUluRG93bjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlSW5Eb3duO1xyXG59XHJcblxyXG4uZmFkZUluRG93bkJpZygpIHtcclxuICAgIEBrZXlmcmFtZXMgZmFkZUluRG93bkJpZyB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMjAwMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMjAwMHB4LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlSW5Eb3duQmlnO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZhZGVJbkRvd25CaWc7XHJcbn1cclxuXHJcbi5mYWRlSW5MZWZ0KCkge1xyXG4gICAgQGtleWZyYW1lcyBmYWRlSW5MZWZ0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZUluTGVmdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlSW5MZWZ0O1xyXG59XHJcblxyXG4uZmFkZUluTGVmdEJpZygpIHtcclxuICAgIEBrZXlmcmFtZXMgZmFkZUluTGVmdEJpZyB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlSW5MZWZ0QmlnO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZhZGVJbkxlZnRCaWc7XHJcbn1cclxuXHJcbi5mYWRlSW5SaWdodCgpIHtcclxuICAgIEBrZXlmcmFtZXMgZmFkZUluUmlnaHQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVJblJpZ2h0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZhZGVJblJpZ2h0O1xyXG59XHJcblxyXG4uZmFkZUluUmlnaHRCaWcoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVJblJpZ2h0QmlnIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlSW5SaWdodEJpZztcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlSW5SaWdodEJpZztcclxufVxyXG5cclxuLmZhZGVJblVwKCkge1xyXG4gICAgQGtleWZyYW1lcyBmYWRlSW5VcCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAxMDAlLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAxMDAlLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlSW5VcDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlSW5VcDtcclxufVxyXG5cclxuLmZhZGVJblVwQmlnKCkge1xyXG4gICAgQGtleWZyYW1lcyBmYWRlSW5VcEJpZyB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAyMDAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDIwMDBweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZUluVXBCaWc7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZUluVXBCaWc7XHJcbn1cclxuXHJcbi5mYWRlT3V0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmFkZU91dCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZU91dDtcclxufVxyXG5cclxuLmZhZGVPdXREb3duKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmFkZU91dERvd24ge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTAwJSwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTAwJSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0RG93bjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0RG93bjtcclxufVxyXG5cclxuLmZhZGVPdXREb3duQmlnKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmFkZU91dERvd25CaWcge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMjAwMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAyMDAwcHgsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0RG93bkJpZztcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0RG93bkJpZztcclxufVxyXG5cclxuLmZhZGVPdXRMZWZ0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmFkZU91dExlZnQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZU91dExlZnQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZU91dExlZnQ7XHJcbn1cclxuXHJcbi5mYWRlT3V0TGVmdEJpZygpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVPdXRMZWZ0QmlnIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0yMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0yMDAwcHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZU91dExlZnRCaWc7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZU91dExlZnRCaWc7XHJcbn1cclxuXHJcbi5mYWRlT3V0UmlnaHQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBmYWRlT3V0UmlnaHQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0UmlnaHQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZU91dFJpZ2h0O1xyXG59XHJcblxyXG4uZmFkZU91dFJpZ2h0QmlnKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmFkZU91dFJpZ2h0QmlnIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXRSaWdodEJpZztcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0UmlnaHRCaWc7XHJcbn1cclxuXHJcbi5mYWRlT3V0VXAoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBmYWRlT3V0VXAge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwMCUsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMDAlLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXRVcDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0VXA7XHJcbn1cclxuXHJcbi5mYWRlT3V0VXBCaWcoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBmYWRlT3V0VXBCaWcge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwMDBweCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXRVcEJpZztcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0VXBCaWc7XHJcbn1cclxuXHJcbi5mbGFzaCgpIHtcclxuICAgIEBrZXlmcmFtZXMgZmxhc2gge1xyXG5cclxuICAgICAgICBmcm9tLFxyXG4gICAgICAgIDUwJSxcclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAyNSUsXHJcbiAgICAgICAgNzUlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmxhc2g7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmxhc2g7XHJcbn1cclxuXHJcbi5mbGlwKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmxpcCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgc2NhbGUzZCgxLCAxLCAxKSB0cmFuc2xhdGUzZCgwLCAwLCAwKSByb3RhdGUzZCgwLCAxLCAwLCAtMzYwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgc2NhbGUzZCgxLCAxLCAxKSB0cmFuc2xhdGUzZCgwLCAwLCAwKSByb3RhdGUzZCgwLCAxLCAwLCAtMzYwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgdHJhbnNsYXRlM2QoMCwgMCwgMTUwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIC0xOTBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSBzY2FsZTNkKDEsIDEsIDEpIHRyYW5zbGF0ZTNkKDAsIDAsIDE1MHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtMTkwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgdHJhbnNsYXRlM2QoMCwgMCwgMTUwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIC0xNzBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSBzY2FsZTNkKDEsIDEsIDEpIHRyYW5zbGF0ZTNkKDAsIDAsIDE1MHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtMTcwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgODAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSBzY2FsZTNkKDAuOTUsIDAuOTUsIDAuOTUpIHRyYW5zbGF0ZTNkKDAsIDAsIDApIHJvdGF0ZTNkKDAsIDEsIDAsIDBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSBzY2FsZTNkKDAuOTUsIDAuOTUsIDAuOTUpIHRyYW5zbGF0ZTNkKDAsIDAsIDApIHJvdGF0ZTNkKDAsIDEsIDAsIDBkZWcpO1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgc2NhbGUzZCgxLCAxLCAxKSB0cmFuc2xhdGUzZCgwLCAwLCAwKSByb3RhdGUzZCgwLCAxLCAwLCAwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgc2NhbGUzZCgxLCAxLCAxKSB0cmFuc2xhdGUzZCgwLCAwLCAwKSByb3RhdGUzZCgwLCAxLCAwLCAwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IHZpc2libGU7XHJcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmxpcDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmbGlwO1xyXG59XHJcblxyXG4uZmxpcEluWCgpIHtcclxuICAgIEBrZXlmcmFtZXMgZmxpcEluWCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgOTBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCA5MGRlZyk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgLTIwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgLTIwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAxMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIDEwZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgLTVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAtNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDtcclxuICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZsaXBJblg7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmxpcEluWDtcclxufVxyXG5cclxuLmZsaXBJblkoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBmbGlwSW5ZIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCA5MGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIDkwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtMjBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtMjBkZWcpO1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIDEwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMCwgMSwgMCwgMTBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgODAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtNWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIC01ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogdmlzaWJsZSAhaW1wb3J0YW50O1xyXG4gICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogdmlzaWJsZSAhaW1wb3J0YW50O1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmxpcEluWTtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmbGlwSW5ZO1xyXG59XHJcblxyXG4uZmxpcE91dFgoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGZsaXBPdXRYIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAzMCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC0yMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC0yMGRlZyk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgOTBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCA5MGRlZyk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjc1cztcclxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC43NXM7XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmbGlwT3V0WDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmbGlwT3V0WDtcclxuICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogdmlzaWJsZSAhaW1wb3J0YW50O1xyXG4gICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogdmlzaWJsZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uZmxpcE91dFkoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBmbGlwT3V0WSB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMzAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtMTVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtMTVkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIDkwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMCwgMSwgMCwgOTBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMC43NXM7XHJcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDAuNzVzO1xyXG4gICAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiB2aXNpYmxlICFpbXBvcnRhbnQ7XHJcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiB2aXNpYmxlICFpbXBvcnRhbnQ7XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmbGlwT3V0WTtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmbGlwT3V0WTtcclxufVxyXG5cclxuLmhlYXJ0QmVhdCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGhlYXJ0QmVhdCB7XHJcbiAgICAgICAgMCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAxNCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4zKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMjglIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDIlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDcwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogaGVhcnRCZWF0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGhlYXJ0QmVhdDtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAxLjNzO1xyXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAxLjNzO1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcclxuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xyXG59XHJcblxyXG4uaGVhZFNoYWtlKCkge1xyXG4gICAgQGtleWZyYW1lcyBoZWFkU2hha2Uge1xyXG4gICAgICAgIDAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYuNSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNnB4KSByb3RhdGVZKC05ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC02cHgpIHJvdGF0ZVkoLTlkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMTguNSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCg1cHgpIHJvdGF0ZVkoN2RlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg1cHgpIHJvdGF0ZVkoN2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAzMS41JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0zcHgpIHJvdGF0ZVkoLTVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTNweCkgcm90YXRlWSgtNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0My41JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDJweCkgcm90YXRlWSgzZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDJweCkgcm90YXRlWSgzZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDUwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XHJcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGhlYWRTaGFrZTtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBoZWFkU2hha2U7XHJcbn1cclxuXHJcbi5oaW5nZSgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGhpbmdlIHtcclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDIwJSxcclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgODBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDgwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDAlLFxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCA2MGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgNjBkZWcpO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCA3MDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgNzAwcHgsIDApO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMnM7XHJcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDJzO1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogaGluZ2U7XHJcbiAgICBhbmltYXRpb24tbmFtZTogaGluZ2U7XHJcbn1cclxuXHJcbi5qYWNrSW5UaGVCb3goKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBqYWNrSW5UaGVCb3gge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4xKSByb3RhdGUoMzBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMSkgcm90YXRlKDMwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgYm90dG9tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNTAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMTBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMTBkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNzAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoM2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogamFja0luVGhlQm94O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGphY2tJblRoZUJveDtcclxufVxyXG5cclxuLmplbGxvKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgamVsbG8ge1xyXG5cclxuICAgICAgICBmcm9tLFxyXG4gICAgICAgIDExLjElLFxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMjIuMiUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2tld1goLTEyLjVkZWcpIHNrZXdZKC0xMi41ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCgtMTIuNWRlZykgc2tld1koLTEyLjVkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMzMuMyUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2tld1goNi4yNWRlZykgc2tld1koNi4yNWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goNi4yNWRlZykgc2tld1koNi4yNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0NC40JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBza2V3WCgtMy4xMjVkZWcpIHNrZXdZKC0zLjEyNWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goLTMuMTI1ZGVnKSBza2V3WSgtMy4xMjVkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNTUuNSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2tld1goMS41NjI1ZGVnKSBza2V3WSgxLjU2MjVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKDEuNTYyNWRlZykgc2tld1koMS41NjI1ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDY2LjYlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNrZXdYKC0wLjc4MTI1ZGVnKSBza2V3WSgtMC43ODEyNWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goLTAuNzgxMjVkZWcpIHNrZXdZKC0wLjc4MTI1ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDc3LjclIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNrZXdYKDAuMzkwNjI1ZGVnKSBza2V3WSgwLjM5MDYyNWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goMC4zOTA2MjVkZWcpIHNrZXdZKDAuMzkwNjI1ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDg4LjglIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNrZXdYKC0wLjE5NTMxMjVkZWcpIHNrZXdZKC0wLjE5NTMxMjVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKC0wLjE5NTMxMjVkZWcpIHNrZXdZKC0wLjE5NTMxMjVkZWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBqZWxsbztcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBqZWxsbztcclxuICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xyXG59XHJcblxyXG4ubGlnaHRTcGVlZEluKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgbGlnaHRTcGVlZEluIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApIHNrZXdYKC0zMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCkgc2tld1goLTMwZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBza2V3WCgyMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goMjBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgODAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNrZXdYKC01ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCgtNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogbGlnaHRTcGVlZEluO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGxpZ2h0U3BlZWRJbjtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxufVxyXG5cclxuLmxpZ2h0U3BlZWRPdXQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBsaWdodFNwZWVkT3V0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApIHNrZXdYKDMwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKSBza2V3WCgzMGRlZyk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGxpZ2h0U3BlZWRPdXQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogbGlnaHRTcGVlZE91dDtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbn1cclxuXHJcbi5wdWxzZSgpIHtcclxuICAgIEBrZXlmcmFtZXMgcHVsc2Uge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNTAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMS4wNSwgMS4wNSwgMS4wNSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLjA1LCAxLjA1LCAxLjA1KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogcHVsc2U7XHJcbiAgICBhbmltYXRpb24tbmFtZTogcHVsc2U7XHJcbn1cclxuXHJcbi5yb2xsSW4oKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb2xsSW4ge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIC0xMjBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKSByb3RhdGUzZCgwLCAwLCAxLCAtMTIwZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiByb2xsSW47XHJcbiAgICBhbmltYXRpb24tbmFtZTogcm9sbEluO1xyXG59XHJcblxyXG4ucm9sbE91dCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHJvbGxPdXQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCkgcm90YXRlM2QoMCwgMCwgMSwgMTIwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKSByb3RhdGUzZCgwLCAwLCAxLCAxMjBkZWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiByb2xsT3V0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHJvbGxPdXQ7XHJcbn1cclxuXHJcbi5yb3RhdGVJbigpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHJvdGF0ZUluIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC0yMDBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC0yMDBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZUluO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZUluO1xyXG59XHJcblxyXG4ucm90YXRlSW5Eb3duTGVmdCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHJvdGF0ZUluRG93bkxlZnQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC00NWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgLTQ1ZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogcm90YXRlSW5Eb3duTGVmdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb3RhdGVJbkRvd25MZWZ0O1xyXG59XHJcblxyXG4ucm90YXRlSW5Eb3duUmlnaHQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb3RhdGVJbkRvd25SaWdodCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCA0NWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgNDVkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZUluRG93blJpZ2h0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZUluRG93blJpZ2h0O1xyXG59XHJcblxyXG4ucm90YXRlSW5VcExlZnQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb3RhdGVJblVwTGVmdCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgNDVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDQ1ZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogcm90YXRlSW5VcExlZnQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogcm90YXRlSW5VcExlZnQ7XHJcbn1cclxuXHJcbi5yb3RhdGVJblVwUmlnaHQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb3RhdGVJblVwUmlnaHQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgLTkwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtOTBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZUluVXBSaWdodDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb3RhdGVJblVwUmlnaHQ7XHJcbn1cclxuXHJcbi5yb3RhdGVPdXQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb3RhdGVPdXQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgMjAwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAyMDBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogcm90YXRlT3V0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZU91dDtcclxufVxyXG5cclxuLnJvdGF0ZU91dERvd25MZWZ0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgcm90YXRlT3V0RG93bkxlZnQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCA0NWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgNDVkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiByb3RhdGVPdXREb3duTGVmdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb3RhdGVPdXREb3duTGVmdDtcclxufVxyXG5cclxuLnJvdGF0ZU91dERvd25SaWdodCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHJvdGF0ZU91dERvd25SaWdodCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBib3R0b207XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtNDVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC00NWRlZyk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZU91dERvd25SaWdodDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb3RhdGVPdXREb3duUmlnaHQ7XHJcbn1cclxuXHJcbi5yb3RhdGVPdXRVcExlZnQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb3RhdGVPdXRVcExlZnQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtNDVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC00NWRlZyk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZU91dFVwTGVmdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb3RhdGVPdXRVcExlZnQ7XHJcbn1cclxuXHJcbi5yb3RhdGVPdXRVcFJpZ2h0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgcm90YXRlT3V0VXBSaWdodCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBib3R0b207XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCA5MGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgOTBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiByb3RhdGVPdXRVcFJpZ2h0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZU91dFVwUmlnaHQ7XHJcbn1cclxuXHJcbi5ydWJiZXJCYW5kKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgcnViYmVyQmFuZCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAzMCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLjI1LCAwLjc1LCAxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEuMjUsIDAuNzUsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC43NSwgMS4yNSwgMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjc1LCAxLjI1LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDUwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEuMTUsIDAuODUsIDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMS4xNSwgMC44NSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2NSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjk1LCAxLjA1LCAxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuOTUsIDEuMDUsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNzUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMS4wNSwgMC45NSwgMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLjA1LCAwLjk1LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogcnViYmVyQmFuZDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBydWJiZXJCYW5kO1xyXG59XHJcblxyXG4uc2xpZGVJbkRvd24oKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBzbGlkZUluRG93biB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTAwJSwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwMCUsIDApO1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNsaWRlSW5Eb3duO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHNsaWRlSW5Eb3duO1xyXG59XHJcblxyXG4uc2xpZGVJbkxlZnQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBzbGlkZUluTGVmdCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApO1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNsaWRlSW5MZWZ0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHNsaWRlSW5MZWZ0O1xyXG59XHJcblxyXG4uc2xpZGVJblJpZ2h0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgc2xpZGVJblJpZ2h0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNsaWRlSW5SaWdodDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZUluUmlnaHQ7XHJcbn1cclxuXHJcbi5zbGlkZUluVXAoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBzbGlkZUluVXAge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTAwJSwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTAwJSwgMCk7XHJcbiAgICAgICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogc2xpZGVJblVwO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHNsaWRlSW5VcDtcclxufVxyXG5cclxuLnNsaWRlT3V0RG93bigpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHNsaWRlT3V0RG93biB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTAwJSwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTAwJSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNsaWRlT3V0RG93bjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZU91dERvd247XHJcbn1cclxuXHJcbi5zbGlkZU91dExlZnQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBzbGlkZU91dExlZnQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNsaWRlT3V0TGVmdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZU91dExlZnQ7XHJcbn1cclxuXHJcbi5zbGlkZU91dFJpZ2h0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgc2xpZGVPdXRSaWdodCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNsaWRlT3V0UmlnaHQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogc2xpZGVPdXRSaWdodDtcclxufVxyXG5cclxuLnNsaWRlT3V0VXAoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBzbGlkZU91dFVwIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTAwJSwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwMCUsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBzbGlkZU91dFVwO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHNsaWRlT3V0VXA7XHJcbn1cclxuXHJcbi5zaGFrZSgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHNoYWtlIHtcclxuXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDEwJSxcclxuICAgICAgICAzMCUsXHJcbiAgICAgICAgNTAlLFxyXG4gICAgICAgIDcwJSxcclxuICAgICAgICA5MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDIwJSxcclxuICAgICAgICA0MCUsXHJcbiAgICAgICAgNjAlLFxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogc2hha2U7XHJcbiAgICBhbmltYXRpb24tbmFtZTogc2hha2U7XHJcbn1cclxuXHJcbi5zd2luZygpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHN3aW5nIHtcclxuICAgICAgICAyMCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgMTVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDE1ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtMTBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC0xMGRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgNWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA4MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgLTVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC01ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDBkZWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHRvcCBjZW50ZXI7XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgY2VudGVyO1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogc3dpbmc7XHJcbiAgICBhbmltYXRpb24tbmFtZTogc3dpbmc7XHJcbn1cclxuXHJcbi50YWRhKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgdGFkYSB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAxMCUsXHJcbiAgICAgICAgMjAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC45LCAwLjksIDAuOSkgcm90YXRlM2QoMCwgMCwgMSwgLTNkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC45LCAwLjksIDAuOSkgcm90YXRlM2QoMCwgMCwgMSwgLTNkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMzAlLFxyXG4gICAgICAgIDUwJSxcclxuICAgICAgICA3MCUsXHJcbiAgICAgICAgOTAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMS4xLCAxLjEsIDEuMSkgcm90YXRlM2QoMCwgMCwgMSwgM2RlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLjEsIDEuMSwgMS4xKSByb3RhdGUzZCgwLCAwLCAxLCAzZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSxcclxuICAgICAgICA2MCUsXHJcbiAgICAgICAgODAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMS4xLCAxLjEsIDEuMSkgcm90YXRlM2QoMCwgMCwgMSwgLTNkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMS4xLCAxLjEsIDEuMSkgcm90YXRlM2QoMCwgMCwgMSwgLTNkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB0YWRhO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHRhZGE7XHJcbn1cclxuXHJcbi53aWdnbGUoKSB7XHJcblxyXG4gICAgQC1tb3ota2V5ZnJhbWVzIHdpZ2dsZSB7XHJcbiAgICAgICAgMCUge1xyXG4gICAgICAgICAgICAtbW96LXRyYW5zZm9ybTogc2tld1goOWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAxMCUge1xyXG4gICAgICAgICAgICAtbW96LXRyYW5zZm9ybTogc2tld1goLThkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMjAlIHtcclxuICAgICAgICAgICAgLW1vei10cmFuc2Zvcm06IHNrZXdYKDdkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMzAlIHtcclxuICAgICAgICAgICAgLW1vei10cmFuc2Zvcm06IHNrZXdYKC02ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIC1tb3otdHJhbnNmb3JtOiBza2V3WCg1ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDUwJSB7XHJcbiAgICAgICAgICAgIC1tb3otdHJhbnNmb3JtOiBza2V3WCgtNGRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICAtbW96LXRyYW5zZm9ybTogc2tld1goM2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA3MCUge1xyXG4gICAgICAgICAgICAtbW96LXRyYW5zZm9ybTogc2tld1goLTJkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgODAlIHtcclxuICAgICAgICAgICAgLW1vei10cmFuc2Zvcm06IHNrZXdYKDFkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgOTAlIHtcclxuICAgICAgICAgICAgLW1vei10cmFuc2Zvcm06IHNrZXdYKDBkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMTAwJSB7XHJcbiAgICAgICAgICAgIC1tb3otdHJhbnNmb3JtOiBza2V3WCgwZGVnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQC1vLWtleWZyYW1lcyB3aWdnbGUge1xyXG4gICAgICAgIDAlIHtcclxuICAgICAgICAgICAgLW8tdHJhbnNmb3JtOiBza2V3WCg5ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDEwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goLThkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMjAlIHtcclxuICAgICAgICAgICAgLW8tdHJhbnNmb3JtOiBza2V3WCg3ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDMwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goLTZkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDAlIHtcclxuICAgICAgICAgICAgLW8tdHJhbnNmb3JtOiBza2V3WCg1ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDUwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goLTRkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgLW8tdHJhbnNmb3JtOiBza2V3WCgzZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDcwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goLTJkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgODAlIHtcclxuICAgICAgICAgICAgLW8tdHJhbnNmb3JtOiBza2V3WCgxZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDkwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goMGRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAxMDAlIHtcclxuICAgICAgICAgICAgLW8tdHJhbnNmb3JtOiBza2V3WCgwZGVnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQGtleWZyYW1lcyB3aWdnbGUge1xyXG4gICAgICAgIDAlIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCg5ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDEwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goLThkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMjAlIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCg3ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDMwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goLTZkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDAlIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCg1ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDUwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goLTRkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCgzZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDcwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goLTJkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgODAlIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCgxZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDkwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goMGRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAxMDAlIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCgwZGVnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogd2lnZ2xlO1xyXG4gICAgLW1vei1hbmltYXRpb24tbmFtZTogd2lnZ2xlO1xyXG4gICAgLW8tYW5pbWF0aW9uLW5hbWU6IHdpZ2dsZTtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB3aWdnbGU7XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgLW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgLW8tYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbn1cclxuXHJcbi53b2JibGUoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyB3b2JibGUge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAxNSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTI1JSwgMCwgMCkgcm90YXRlM2QoMCwgMCwgMSwgLTVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0yNSUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIC01ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDMwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgyMCUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIDNkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwJSwgMCwgMCkgcm90YXRlM2QoMCwgMCwgMSwgM2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0NSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTE1JSwgMCwgMCkgcm90YXRlM2QoMCwgMCwgMSwgLTNkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xNSUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIC0zZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMCUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIDJkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwJSwgMCwgMCkgcm90YXRlM2QoMCwgMCwgMSwgMmRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA3NSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTUlLCAwLCAwKSByb3RhdGUzZCgwLCAwLCAxLCAtMWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTUlLCAwLCAwKSByb3RhdGUzZCgwLCAwLCAxLCAtMWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogd29iYmxlO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHdvYmJsZTtcclxufVxyXG5cclxuLnpvb21JbigpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHpvb21JbiB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuMywgMC4zLCAwLjMpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC4zLCAwLjMsIDAuMyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB6b29tSW47XHJcbiAgICBhbmltYXRpb24tbmFtZTogem9vbUluO1xyXG59XHJcblxyXG4uem9vbUluRG93bigpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHpvb21JbkRvd24ge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjEsIDAuMSwgMC4xKSB0cmFuc2xhdGUzZCgwLCAtMTAwMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMSwgMC4xLCAwLjEpIHRyYW5zbGF0ZTNkKDAsIC0xMDAwcHgsIDApO1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjU1LCAwLjA1NSwgMC42NzUsIDAuMTkpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC41NSwgMC4wNTUsIDAuNjc1LCAwLjE5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKDAsIDYwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoMCwgNjBweCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB6b29tSW5Eb3duO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHpvb21JbkRvd247XHJcbn1cclxuXHJcbi56b29tSW5MZWZ0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgem9vbUluTGVmdCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuMSwgMC4xLCAwLjEpIHRyYW5zbGF0ZTNkKC0xMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC4xLCAwLjEsIDAuMSkgdHJhbnNsYXRlM2QoLTEwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjU1LCAwLjA1NSwgMC42NzUsIDAuMTkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoMTBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCgxMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyLCAxKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHpvb21JbkxlZnQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogem9vbUluTGVmdDtcclxufVxyXG5cclxuLnpvb21JblJpZ2h0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgem9vbUluUmlnaHQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjEsIDAuMSwgMC4xKSB0cmFuc2xhdGUzZCgxMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC4xLCAwLjEsIDAuMSkgdHJhbnNsYXRlM2QoMTAwMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC41NSwgMC4wNTUsIDAuNjc1LCAwLjE5KTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCgtMTBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCgtMTBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB6b29tSW5SaWdodDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB6b29tSW5SaWdodDtcclxufVxyXG5cclxuLnpvb21JblVwKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgem9vbUluVXAge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjEsIDAuMSwgMC4xKSB0cmFuc2xhdGUzZCgwLCAxMDAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC4xLCAwLjEsIDAuMSkgdHJhbnNsYXRlM2QoMCwgMTAwMHB4LCAwKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC41NSwgMC4wNTUsIDAuNjc1LCAwLjE5KTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCgwLCAtNjBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCgwLCAtNjBweCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB6b29tSW5VcDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB6b29tSW5VcDtcclxufVxyXG5cclxuLnpvb21PdXQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyB6b29tT3V0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDUwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuMywgMC4zLCAwLjMpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC4zLCAwLjMsIDAuMyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHpvb21PdXQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogem9vbU91dDtcclxufVxyXG5cclxuLnpvb21PdXREb3duKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgem9vbU91dERvd24ge1xyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKDAsIC02MHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKDAsIC02MHB4LCAwKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC41NSwgMC4wNTUsIDAuNjc1LCAwLjE5KTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuMSwgMC4xLCAwLjEpIHRyYW5zbGF0ZTNkKDAsIDIwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjEsIDAuMSwgMC4xKSB0cmFuc2xhdGUzZCgwLCAyMDAwcHgsIDApO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB6b29tT3V0RG93bjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB6b29tT3V0RG93bjtcclxufVxyXG5cclxuLnpvb21PdXRMZWZ0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgem9vbU91dExlZnQge1xyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKDQycHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoNDJweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjEpIHRyYW5zbGF0ZTNkKC0yMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMSkgdHJhbnNsYXRlM2QoLTIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBjZW50ZXI7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB6b29tT3V0TGVmdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB6b29tT3V0TGVmdDtcclxufVxyXG5cclxuLnpvb21PdXRSaWdodCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHpvb21PdXRSaWdodCB7XHJcbiAgICAgICAgNDAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoLTQycHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoLTQycHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4xKSB0cmFuc2xhdGUzZCgyMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMSkgdHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBjZW50ZXI7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogem9vbU91dFJpZ2h0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHpvb21PdXRSaWdodDtcclxufVxyXG5cclxuLnpvb21PdXRVcCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHpvb21PdXRVcCB7XHJcbiAgICAgICAgNDAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoMCwgNjBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCgwLCA2MHB4LCAwKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC41NSwgMC4wNTUsIDAuNjc1LCAwLjE5KTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuMSwgMC4xLCAwLjEpIHRyYW5zbGF0ZTNkKDAsIC0yMDAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC4xLCAwLjEsIDAuMSkgdHJhbnNsYXRlM2QoMCwgLTIwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGJvdHRvbTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyLCAxKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHpvb21PdXRVcDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB6b29tT3V0VXA7XHJcbn0iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8qXG5MRVNTIHZhcmlhYmxlcyBhcmUgaW5mb3JtYXRpb24gYWJvdXQgaWNvbidzIGNvbXBpbGVkIHN0YXRlLCBzdG9yZWQgdW5kZXIgaXRzIG9yaWdpbmFsIGZpbGUgbmFtZVxuXG4uaWNvbi1ob21lIHtcbiAgd2lkdGg6IEBpY29uLWhvbWUtd2lkdGg7XG59XG5cblRoZSBsYXJnZSBhcnJheS1saWtlIHZhcmlhYmxlcyBjb250YWluIGFsbCBpbmZvcm1hdGlvbiBhYm91dCBhIHNpbmdsZSBpY29uXG5AaWNvbi1ob21lOiB4IHkgb2Zmc2V0X3ggb2Zmc2V0X3kgd2lkdGggaGVpZ2h0IHRvdGFsX3dpZHRoIHRvdGFsX2hlaWdodCBpbWFnZV9wYXRoIG5hbWU7XG5cbkF0IHRoZSBib3R0b20gb2YgdGhpcyBzZWN0aW9uLCB3ZSBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzcHJpdGVzaGVldCBpdHNlbGZcbkBzcHJpdGVzaGVldDogd2lkdGggaGVpZ2h0IGltYWdlIEBzcHJpdGVzaGVldC1zcHJpdGVzO1xuKi9cblxuLypcblRoZSBwcm92aWRlZCBjbGFzc2VzIGFyZSBpbnRlbmRlZCB0byBiZSB1c2VkIHdpdGggdGhlIGFycmF5LWxpa2UgdmFyaWFibGVzXG5cbi5pY29uLWhvbWUge1xuICAuc3ByaXRlLXdpZHRoKEBpY29uLWhvbWUpO1xufVxuLmljb24tZW1haWwge1xuICAuc3ByaXRlKEBpY29uLWVtYWlsKTtcbn1cblxuRXhhbXBsZSB1c2FnZSBpbiBIVE1MOlxuXG5gZGlzcGxheTogYmxvY2tgIHNwcml0ZTpcbjxkaXYgY2xhc3M9XCJpY29uLWhvbWVcIj48L2Rpdj5cblxuVG8gY2hhbmdlIGBkaXNwbGF5YCAoZS5nLiBgZGlzcGxheTogaW5saW5lLWJsb2NrO2ApLCB3ZSBzdWdnZXN0IHVzaW5nIGEgY29tbW9uIENTUyBjbGFzczpcblxuLy8gQ1NTXG4uaWNvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLy8gSFRNTFxuPGkgY2xhc3M9XCJpY29uIGljb24taG9tZVwiPjwvaT5cbiovXG5cbi8qXG5UaGUgYC5zcHJpdGVzYCBtaXhpbiBnZW5lcmF0ZXMgaWRlbnRpY2FsIG91dHB1dCB0byB0aGUgQ1NTIHRlbXBsYXRlXG4gIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBpbnNpZGUgb2YgTEVTU1xuXG5UaGlzIG11c3QgYmUgcnVuIHdoZW4geW91IGhhdmUgYXQgbGVhc3QgMiBzcHJpdGVzLlxuICBJZiBydW4gd2l0aCBhIHNpbmdsZSBzcHJpdGUsIHRoZW4gdGhlcmUgd2lsbCBiZSByZWZlcmVuY2UgZXJyb3JzLlxuXG4uc3ByaXRlcyhAc3ByaXRlc2hlZXQtc3ByaXRlcyk7XG4qL1xuXG5ib2R5LFxuZGl2LFxuZGwsXG5kdCxcbmRkLFxudWwsXG5saSxcbmgxLFxuaDIsXG5oMyxcbmg0LFxuaDUsXG5oNixcbnByZSxcbmNvZGUsXG5mb3JtLFxuZmllbGRzZXQsXG5pbnB1dCxcbnRleHRhcmVhLFxucCxcbmJsb2NrcXVvdGUsXG50aCxcbnRkIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG5maWVsZHNldCxcbmltZyxcbmFiYnIge1xuICBib3JkZXI6IDA7XG59XG5cbmFkZHJlc3MsXG5jYXB0aW9uLFxuY2l0ZSxcbmNvZGUsXG5kZm4sXG5lbSxcbnN0cm9uZyxcbnRoLFxudmFyIHtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xufVxuXG51bCBsaSB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbmNhcHRpb24sXG50aCB7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG59XG5cbmgxLFxuaDIsXG5oMyxcbmg0LFxuaDUsXG5oNiB7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cblxuc3VwIHtcbiAgdmVydGljYWwtYWxpZ246IHRleHQtdG9wO1xufVxuXG5zdWIge1xuICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207XG59XG5cbmlucHV0LFxudGV4dGFyZWEsXG5zZWxlY3Qge1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgZm9udC1zaXplOiBpbmhlcml0O1xuICBmb250LXdlaWdodDogaW5oZXJpdDtcbn1cblxubGVnZW5kIHtcbiAgY29sb3I6ICMwMDA7XG59XG5cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubWVudSxcbm5hdixcbnNlY3Rpb24sXG5tYWluIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbmltZyB7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvO1xufVxuXG4ud3JhcHBlciB7XG4gIG1heC13aWR0aDogOTQwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nLWxlZnQ6IDYwcHg7XG4gIHBhZGRpbmctcmlnaHQ6IDYwcHg7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW5TYW5zLVJlZ3VsYXInO1xuICBzcmM6IHVybCgnLi4vLi4vZm9udHMvT3BlblNhbnMvT3BlblNhbnMtUmVndWxhci50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbn1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnUFRTYW5zLUJvbGQnO1xuICBzcmM6IHVybCgnLi4vLi4vZm9udHMvUFRTYW5zL1BUU2Fucy1Cb2xkLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xufVxuXG5ib2R5IHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuU2Fucy1SZWd1bGFyJztcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xufVxuXG5hLFxuYnV0dG9uIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG5hOmZvY3VzLFxuYnV0dG9uOmZvY3VzIHtcbiAgb3V0bGluZTogbm9uZTtcbn1cblxuYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgY29sb3I6IGluaGVyaXQ7XG59XG5cbmlucHV0IHtcbiAgY3Vyc29yOiB0ZXh0O1xufVxuXG5pbnB1dDpmb2N1cyB7XG4gIG91dGxpbmU6IG5vbmU7XG59XG5cbi5wYWdlX190aXRsZS1oMSxcbi5wYWdlX190aXRsZS1oMiB7XG4gIGZvbnQtZmFtaWx5OiBcIlBUU2Fucy1Cb2xkXCI7XG4gIGNvbG9yOiAjMGFiYjBlO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogNDBweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbn1cblxuLnBhZ2VfX3RpdGxlLWgxIHtcbiAgZm9udC1zaXplOiA0NXB4O1xufVxuXG4ucGFnZV9fdGl0bGUtaDIge1xuICBmb250LXNpemU6IDI1cHg7XG4gIGNvbG9yOiAjMGFiYjBlO1xufVxuXG4ucGFnZV9fdGl0bGUtaDJfd2hpdGUge1xuICBjb2xvcjogd2hpdGU7XG59XG5cbi5wYWdlX19idG4ge1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgaGVpZ2h0OiA2OHB4O1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICBmb250LWZhbWlseTogJ1BUU2Fucy1Cb2xkJztcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgYm9yZGVyOiBub25lO1xuICBjb2xvcjogI2ZmZmZmZjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzdlM2NmOTtcbiAgYm9yZGVyOiAxcHggc29saWQgIzdlM2NmOTtcbn1cblxuLnBhZ2VfX2J0bjpob3ZlciB7XG4gIGNvbG9yOiAjMjYyNjI2O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICB0cmFuc2l0aW9uOiBhbGwgZWFzZS1vdXQgMC41cztcbn1cblxuLnBhZ2VfX2J0bl8yIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB3aWR0aDogMjQwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgaGVpZ2h0OiA2OHB4O1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICBmb250LWZhbWlseTogJ1BUU2Fucy1Cb2xkJztcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgYm9yZGVyOiBub25lO1xuICBjb2xvcjogI2ZmZmZmZjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzdlM2NmOTtcbiAgYm9yZGVyOiAxcHggc29saWQgIzdlM2NmOTtcbn1cblxuLnBhZ2VfX2J0bl8yOmhvdmVyIHtcbiAgY29sb3I6ICMyNjI2MjY7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gIHRyYW5zaXRpb246IGFsbCBlYXNlLW91dCAwLjVzO1xufVxuXG4ucGFnZV9fYnRuXzMge1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIHdpZHRoOiAyNDBweDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBoZWlnaHQ6IDY4cHg7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gIGZvbnQtZmFtaWx5OiAnUFRTYW5zLUJvbGQnO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBib3JkZXI6IG5vbmU7XG4gIGNvbG9yOiAjZmZmZmZmO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2UzY2Y5O1xuICBib3JkZXI6IDFweCBzb2xpZCAjN2UzY2Y5O1xufVxuXG4ucGFnZV9fYnRuXzM6aG92ZXIge1xuICBjb2xvcjogIzI2MjYyNjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgdHJhbnNpdGlvbjogYWxsIGVhc2Utb3V0IDAuNXM7XG59XG5cbi5wYWdlX190ZXh0IHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMzBweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbn1cblxuLmhlYWRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcbiAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xuICBtYXJnaW4tcmlnaHQ6IC0xMHB4O1xuICBjb2xvcjogI2ZmZmZmZjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLmhlYWRlci1sb2dvIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICB3aWR0aDogY2FsYyg1MCUgLSAyMHB4KTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLmhlYWRlci1sb2dvX19pY29uIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMHB4IDBweDtcbiAgd2lkdGg6IDQzcHg7XG4gIGhlaWdodDogNDFweDtcbn1cblxuLmhlYWRlci1sb2dvX190ZXh0IHtcbiAgZm9udC1mYW1pbHk6IFwiUFRTYW5zLUJvbGRcIjtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gIGZvbnQtc2l6ZTogMjVweDtcbn1cblxuLmhlYWRlci1zb2NpYWwge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIHdpZHRoOiBjYWxjKDUwJSAtIDIwcHgpO1xufVxuXG4uaGVhZGVyLXNvY2lhbCAuc29jaWFsIHtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbn1cblxuLmhlYWRlci1zb2NpYWwgLnNvY2lhbF9faWNvbiB7XG4gIGZpbHRlcjogaW52ZXJ0KDEpO1xufVxuXG4uaGVhZGVyLWJsb2NrIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB3aWR0aDogMTAwJTtcbiAgei1pbmRleDogMjtcbn1cblxuLmJhbm5lciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2Fzc2V0cy9pbWcvYmcuanBnXCIpO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5iYW5uZXItYmxvY2sge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGNvbG9yOiAjZmZmO1xuICBwYWRkaW5nLXRvcDogMTVweDtcbn1cblxuLmJhbm5lci1ibG9jay1pbmZvIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbWFyZ2luLXRvcDogMjVweDtcbiAgZm9udC1mYW1pbHk6IFwiUFRTYW5zLUJvbGRcIjtcbn1cblxuLmJhbm5lci1ibG9jay1pbmZvIGRpdiB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbjogMCAxMHB4O1xufVxuXG4uYmFubmVyLWJsb2NrLWluZm9fX2ljb24tY2VsZW5kZXIsXG4uYmFubmVyLWJsb2NrLWluZm9fX2ljb24tbWFyay1tYXAge1xuICB3aWR0aDogMTVweDtcbiAgaGVpZ2h0OiAxNXB4O1xufVxuXG4uYmFubmVyLWJsb2NrLWluZm9fX2ljb24tY2VsZW5kZXIge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwcHggLTUxcHg7XG4gIHdpZHRoOiAxN3B4O1xuICBoZWlnaHQ6IDE5cHg7XG59XG5cbi5iYW5uZXItYmxvY2staW5mb19faWNvbi1tYXJrLW1hcCB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0xMTNweCAtNTJweDtcbiAgd2lkdGg6IDEycHg7XG4gIGhlaWdodDogMTZweDtcbn1cblxuLmJhbm5lci1ibG9jay10ZXh0IHtcbiAgbWFyZ2luOiAyNXB4IGF1dG8gMzVweDtcbiAgd2lkdGg6IGNhbGMoODMuMzMzMzMzMzMzMzMzMzQlIC0gMjBweCk7XG4gIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAxcztcbiAgYW5pbWF0aW9uLWR1cmF0aW9uOiAxcztcbiAgLXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOiBib3RoO1xuICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoO1xuICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogMXM7XG4gIGFuaW1hdGlvbi1kZWxheTogMXM7XG4gIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVJbjtcbiAgYW5pbWF0aW9uLW5hbWU6IGZhZGVJbjtcbn1cblxuQGtleWZyYW1lcyBmYWRlSW4ge1xuICBmcm9tIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5cbiAgdG8ge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuLmJhbm5lci1ibG9jay1idG4ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogNTBweDtcbn1cblxuLmJhbm5lci1ibG9jay1idG4gLnBhZ2VfX2J0biB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgd2lkdGg6IGNhbGMoMjUlIC0gMjBweCk7XG59XG5cbi5iYW5uZXItYmxvY2stY291bnRlciB7XG4gIHdpZHRoOiBjYWxjKDU4LjMzMzMzMzMzMzMzMzMzNiUgLSAyMHB4KTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBtYXJnaW46IDAgYXV0byAtNzBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmOGEwMTtcbiAgcGFkZGluZzogMjVweCA1MHB4O1xufVxuXG4uYmFubmVyLWJsb2NrLWNvdW50ZXJfX2l0ZW0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIHdpZHRoOiBjYWxjKDI1JSAtIDIwcHgpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJvcmRlcjogMnB4IHNvbGlkICNmZmZmZmY7XG4gIGJvcmRlci1yYWRpdXM6IDEwJTtcbiAgcGFkZGluZzogMjVweCAwO1xufVxuXG4uYmFubmVyLWJsb2NrLWNvdW50ZXJfX2l0ZW1fbnVtYmVyIHtcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LWZhbWlseTogXCJQVFNhbnMtQm9sZFwiO1xufVxuXG4uYmFubmVyLWJsb2NrLWNvdW50ZXJfX2l0ZW1fdGV4dCB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbn1cblxuLmJhbm5lcl9vcGFjaXR5IHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XG59XG5cbi5hYm91dC1ldmVudC1ibG9rIHtcbiAgZGlzcGxheTogZmxleDtcbiAgcGFkZGluZy1ib3R0b206IDgwcHg7XG59XG5cbi5hYm91dC1ldmVudF9fd3JhcHBlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5hYm91dC1ldmVudF9fbGVmdCB7XG4gIHBhZGRpbmctdG9wOiAxNjBweDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICB3aWR0aDogY2FsYyg1MCUgLSAyMHB4KTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLmFib3V0LWV2ZW50X190aXRsZSB7XG4gIGZvbnQtc2l6ZTogMjVweDtcbiAgY29sb3I6ICMwYWJiMGU7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtZmFtaWx5OiBcIlBUU2Fucy1Cb2xkXCI7XG4gIHBhZGRpbmctYm90dG9tOiAzMHB4O1xuICB3aWR0aDogY2FsYyg1MCUgLSAyMHB4KTtcbn1cblxuLmFib3V0LWV2ZW50X190ZXh0XzIge1xuICBwYWRkaW5nLWJvdHRvbTogNDBweDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBjb2xvcjogIzY2NjY2NjtcbiAgd2lkdGg6IDQ2MHB4O1xufVxuXG4uYWJvdXQtZXZlbnRfX3RleHRfMyB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgY29sb3I6ICM2NjY2NjY7XG4gIHBhZGRpbmctYm90dG9tOiA0MHB4O1xuICB3aWR0aDogNDAxcHg7XG59XG5cbi5hYm91dC1ldmVudF9fcmlnaHQge1xuICB3aWR0aDogNTAlO1xuICBoZWlnaHQ6IDM3NXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xuICBtYXJnaW4tdG9wOiAxNTBweDtcbiAgd2lkdGg6IDQwMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIHdpZHRoOiBjYWxjKDUwJSAtIDIwcHgpO1xufVxuXG4uYWJvdXQtZXZlbnRfX2ljb24tbWFwIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTExM3B4IC01MnB4O1xuICB3aWR0aDogMTJweDtcbiAgaGVpZ2h0OiAxNnB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMjBweDtcbiAgbGVmdDogMjBweDtcbn1cblxuLmFib3V0LWV2ZW50X19pY29uLWNlbGVuZGVyIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMHB4IC01MXB4O1xuICB3aWR0aDogMTdweDtcbiAgaGVpZ2h0OiAxOXB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMjBweDtcbiAgbGVmdDogMjBweDtcbn1cblxuLmFib3V0LWV2ZW50X19pY29uLW1pY3JvcGhvbmUge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMjdweCAtNTFweDtcbiAgd2lkdGg6IDE0cHg7XG4gIGhlaWdodDogMTlweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0b3A6IDIwcHg7XG4gIGxlZnQ6IDIwcHg7XG59XG5cbi5hYm91dC1ldmVudF9faWNvbi1tYW5wbHVzIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTUzcHggMHB4O1xuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAxOXB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMjBweDtcbiAgbGVmdDogMjBweDtcbn1cblxuLmFib3V0LWV2ZW50X19ibG9rXzEsXG4uYWJvdXQtZXZlbnRfX2Jsb2tfMixcbi5hYm91dC1ldmVudF9fYmxva18zLFxuLmFib3V0LWV2ZW50X19ibG9rXzQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4uYWJvdXQtZXZlbnRfX3RleHRfNCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXNpemU6IDIwcHg7XG4gIHBhZGRpbmctbGVmdDogNTBweDtcbiAgZm9udC1mYW1pbHk6IFwiUFRTYW5zLUJvbGRcIjtcbn1cblxuLmFib3V0LWV2ZW50X190ZXh0XzUge1xuICBwYWRkaW5nLWxlZnQ6IDUwcHg7XG4gIGNvbG9yOiAjODg4ODg4O1xufVxuXG4ucHJlc2VudGF0aW9uIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcbiAgbWF4LWhlaWdodDogNTQzcHg7XG4gIG1hcmdpbi10b3A6IDgwcHg7XG4gIHBhZGRpbmctdG9wOiA4MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5wcmVzZW50YXRpb24gLnBhZ2VfX3RleHQge1xuICB3aWR0aDogY2FsYyg2Ni42NjY2NjY2NjY2NjY2NyUgLSAyMHB4KTtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBhZGRpbmc6IDQwcHggMzBweDtcbiAgY29sb3I6ICM3Nzc7XG59XG5cbi5wcmVzZW50YXRpb24gLnBhZ2VfX2J0biB7XG4gIHdpZHRoOiBjYWxjKDI1JSAtIDIwcHgpO1xuICBtYXJnaW46IDAgYXV0byA1MHB4O1xufVxuXG4ucHJlc2VudGF0aW9uIC5wYWdlX19pbWcge1xuICBtYXJnaW4tbGVmdDogMzBweDtcbn1cblxuLmV2ZW50IHtcbiAgcGFkZGluZzogNzVweCAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5ldmVudCAucGFnZV9fdGl0bGUtaDIge1xuICBtYXJnaW4tYm90dG9tOiAyNXB4O1xufVxuXG4uZXZlbnQgLnNvY2lhbF9faWNvbiB7XG4gIGZpbHRlcjogaW52ZXJ0KDAuNyk7XG59XG5cbi5pdGVtcy1ibG9jayB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcbiAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xuICBtYXJnaW4tcmlnaHQ6IC0xMHB4O1xufVxuXG4uaXRlbXMtYmxvY2sgLml0ZW0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIHdpZHRoOiBjYWxjKDI1JSAtIDIwcHgpO1xufVxuXG4uaXRlbXMtYmxvY2sgLml0ZW1fX2ltZyB7XG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1heC1oZWlnaHQ6IDIyMHB4O1xufVxuXG4uaXRlbXMtYmxvY2sgLml0ZW1fX2ltZyBpbWcge1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjVzO1xufVxuXG4uaXRlbXMtYmxvY2sgLml0ZW1fX2ltZyBpbWc6aG92ZXIge1xuICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7XG59XG5cbi5pdGVtcy1ibG9jayAuaXRlbV9fbmFtZSB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgZm9udC1mYW1pbHk6IFwiUFRTYW5zLUJvbGRcIjtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gIG1hcmdpbi10b3A6IDVweDtcbiAgY29sb3I6ICM0NDQ7XG59XG5cbi5pdGVtcy1ibG9jayAuaXRlbV9fc3BlY25hbWUge1xuICBmb250LXNpemU6IDE1cHg7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICBjb2xvcjogIzg4ODtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xufVxuXG4uc29jaWFsIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi5zb2NpYWxfX2ljb24ge1xuICBtYXJnaW46IDAgOHB4O1xuICBib3JkZXItcmFkaXVzOiAycHg7XG59XG5cbi5zb2NpYWxfX2ljb246bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1yaWdodDogMDtcbn1cblxuLnNvY2lhbF9faWNvbl9mYixcbi5zb2NpYWxfX2ljb25fdHcsXG4uc29jaWFsX19pY29uX2luc3QsXG4uc29jaWFsX19pY29uX3ZpbWVvLFxuLnNvY2lhbF9faWNvbl9nb29nbGUge1xuICBmaWx0ZXI6IGludmVydCgxKTtcbn1cblxuLnNvY2lhbF9faWNvbl9mYjpob3Zlcixcbi5zb2NpYWxfX2ljb25fdHc6aG92ZXIsXG4uc29jaWFsX19pY29uX2luc3Q6aG92ZXIsXG4uc29jaWFsX19pY29uX3ZpbWVvOmhvdmVyLFxuLnNvY2lhbF9faWNvbl9nb29nbGU6aG92ZXIge1xuICBmaWx0ZXI6IGludmVydCgwKTtcbn1cblxuLnNvY2lhbF9faWNvbl9mYiB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IC01MXB4IC01MXB4O1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xufVxuXG4uc29jaWFsX19pY29uX2ZiOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTg3cHggMHB4O1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xufVxuXG4uc29jaWFsX19pY29uX3R3IHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTUycHggLTgwcHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5zb2NpYWxfX2ljb25fdHc6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtNzhweCAtODBweDtcbiAgd2lkdGg6IDE2cHg7XG4gIGhlaWdodDogMTZweDtcbn1cblxuLnNvY2lhbF9faWNvbl9pbnN0IHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMHB4IC04MHB4O1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xufVxuXG4uc29jaWFsX19pY29uX2luc3Q6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMjZweCAtODBweDtcbiAgd2lkdGg6IDE2cHg7XG4gIGhlaWdodDogMTZweDtcbn1cblxuLnNvY2lhbF9faWNvbl92aW1lbyB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0xMTNweCAwcHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5zb2NpYWxfX2ljb25fdmltZW86aG92ZXIge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTEzcHggLTI2cHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5zb2NpYWxfX2ljb25fZ29vZ2xlIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTg3cHggLTI2cHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5zb2NpYWxfX2ljb25fZ29vZ2xlOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTg3cHggLTUycHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5kZWJ1Z0dyaWQge1xuICBoZWlnaHQ6IDEwMHZoO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uZGVidWdHcmlkID4gZGl2IHtcbiAgaGVpZ2h0OiBpbmhlcml0O1xuICBtYXgtd2lkdGg6IDk0MHB4O1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZy1sZWZ0OiA2MHB4O1xuICBwYWRkaW5nLXJpZ2h0OiA2MHB4O1xufVxuXG4uZGVidWdHcmlkID4gZGl2ID4gZGl2IHtcbiAgaGVpZ2h0OiBpbmhlcml0O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIG1hcmdpbi1sZWZ0OiAtMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAtMTBweDtcbn1cblxuLmRlYnVnR3JpZCA+IGRpdiA+IGRpdiA+IGRpdiB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgd2lkdGg6IGNhbGMoOC4zMzMzMzMzMzMzMzMzMzQlIC0gMjBweCk7XG4gIGhlaWdodDogaW5oZXJpdDtcbiAgb3V0bGluZTogMXB4IHNvbGlkICNmZjA7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcbn1cblxuLmRlYnVnR3JpZC1idG4ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgcG9zaXRpb246IGZpeGVkO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICB3aWR0aDogNTBweDtcbiAgaGVpZ2h0OiA1MHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZmYwO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIHotaW5kZXg6IDE7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcbn1cblxuLmRlYnVnR3JpZC1idG5oaWRkZW4ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4uZGVidWdHcmlkLWJ0bjpiZWZvcmUsXG4uZGVidWdHcmlkLWJ0bjphZnRlciB7XG4gIGNvbnRlbnQ6ICcnO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGJhY2tncm91bmQ6ICMwMDA7XG59XG5cbi5kZWJ1Z0dyaWQtYnRuOmJlZm9yZSB7XG4gIHdpZHRoOiAyNXB4O1xuICBoZWlnaHQ6IDJweDtcbn1cblxuLmRlYnVnR3JpZC1idG5jcmVhdGU6YWZ0ZXIge1xuICB3aWR0aDogMnB4O1xuICBoZWlnaHQ6IDI1cHg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cblxuLmRlYnVnR3JpZF9fei1pbmRleC1uZWdhdGl2ZSB7XG4gIHotaW5kZXg6IC0xO1xufVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5OTJweCkge1xuICAuYmFubmVyLWJsb2NrLWNvdW50ZXIge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyMHB4KTtcbiAgfVxuXG4gIC5iYW5uZXItYmxvY2stY291bnRlciB7XG4gICAgcGFkZGluZzogMjVweDtcbiAgfVxuXG4gIC5pdGVtcy1ibG9jayAuaXRlbSB7XG4gICAgd2lkdGg6IGNhbGMoNTAlIC0gMjBweCk7XG4gIH1cblxuICAuaXRlbXMtYmxvY2sgLml0ZW0ge1xuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gIH1cbn1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLmJhbm5lci1ibG9jay1idG4ge1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgfVxuXG4gIC5iYW5uZXItYmxvY2stYnRuIC5wYWdlX19idG4ge1xuICAgIHdpZHRoOiBjYWxjKDU4LjMzMzMzMzMzMzMzMzMzNiUgLSAyMHB4KTtcbiAgfVxuXG4gIC5iYW5uZXItYmxvY2stYnRuIC5wYWdlX19idG4ge1xuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gIH1cblxuICAuaXRlbXMtYmxvY2sgLml0ZW0ge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyMHB4KTtcbiAgfVxufVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NzZweCkge1xuICAud3JhcHBlciB7XG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xuICB9XG5cbiAgLmhlYWRlciB7XG4gICAgbWFyZ2luLWxlZnQ6IC01cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiAtNXB4O1xuICB9XG5cbiAgLmhlYWRlci1sb2dvIHtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICB9XG5cbiAgLmhlYWRlci1zb2NpYWwge1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gIH1cblxuICAuYmFubmVyLWJsb2NrLXRleHQge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxMHB4KTtcbiAgfVxuXG4gIC5iYW5uZXItYmxvY2stYnRuIC5wYWdlX19idG4ge1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gIH1cblxuICAuYmFubmVyLWJsb2NrLWJ0biAucGFnZV9fYnRuIHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTBweCk7XG4gIH1cblxuICAuYmFubmVyLWJsb2NrLWNvdW50ZXIge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cblxuICAuYmFubmVyLWJsb2NrLWNvdW50ZXJfX2l0ZW0ge1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gIH1cblxuICAuYWJvdXQtZXZlbnRfX2xlZnQge1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gIH1cblxuICAuYWJvdXQtZXZlbnRfX3JpZ2h0IHtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICB9XG5cbiAgLnByZXNlbnRhdGlvbiAucGFnZV9fdGV4dCB7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDEwcHgpO1xuICB9XG5cbiAgLnByZXNlbnRhdGlvbiAucGFnZV9fdGV4dCB7XG4gICAgcGFkZGluZzogMjBweCAwO1xuICB9XG5cbiAgLnByZXNlbnRhdGlvbiAucGFnZV9fYnRuIHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTBweCk7XG4gIH1cblxuICAucHJlc2VudGF0aW9uIC5wYWdlX19pbWcge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cblxuICAuaXRlbXMtYmxvY2sge1xuICAgIG1hcmdpbi1sZWZ0OiAtNXB4O1xuICAgIG1hcmdpbi1yaWdodDogLTVweDtcbiAgfVxuXG4gIC5pdGVtcy1ibG9jayAuaXRlbSB7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgfVxuXG4gIC5kZWJ1Z0dyaWQgPiBkaXYge1xuICAgIHBhZGRpbmctbGVmdDogNXB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcbiAgfVxuXG4gIC5kZWJ1Z0dyaWQgPiBkaXYge1xuICAgIHBhZGRpbmctbGVmdDogNXB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcbiAgfVxuXG4gIC5kZWJ1Z0dyaWQgPiBkaXYgPiBkaXYge1xuICAgIG1hcmdpbi1sZWZ0OiAtNXB4O1xuICAgIG1hcmdpbi1yaWdodDogLTVweDtcbiAgfVxuXG4gIC5kZWJ1Z0dyaWQgPiBkaXYgPiBkaXYgPiBkaXYge1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gIH1cblxuICAuZGVidWdHcmlkID4gZGl2ID4gZGl2ID4gZGl2IHtcbiAgICB3aWR0aDogY2FsYyg4LjMzMzMzMzMzMzMzMzMzNCUgLSAxMHB4KTtcbiAgfVxufSIsIkBjb2x1bW5zOiAxMjtcbkBhdG9tOiAoMTAwJSAvIEBjb2x1bW5zKTtcblxuQGJyZWFrX21kOiAxMDI0cHg7XG5AYnJlYWtfc206IDk5MnB4O1xuQGJyZWFrX3NzbTogNzY4cHg7XG5AYnJlYWtfeHM6IDU3NnB4O1xuQGJyZWFrX3h4czogMzYwcHg7XG5cbkBvZmZzZXQ6IDIwcHg7XG5Ab2Zmc2V0X21kOiBAb2Zmc2V0O1xuQG9mZnNldF9zbTogQG9mZnNldDtcbkBvZmZzZXRfc3NtOiBAb2Zmc2V0O1xuQG9mZnNldF94czogMTBweDtcbkBvZmZzZXRfeHhzOiBAb2Zmc2V0X3hzO1xuXG5Ab2Zmc2V0X29uZV9zaWRlOiAoQG9mZnNldCAvIDIpO1xuQG9mZnNldF9tZF9vbmVfc2lkZTogKEBvZmZzZXRfbWQgLyAyKTtcbkBvZmZzZXRfc21fb25lX3NpZGU6IChAb2Zmc2V0X3NtIC8gMik7XG5Ab2Zmc2V0X3NzbV9vbmVfc2lkZTogKEBvZmZzZXRfc3NtIC8gMik7XG5Ab2Zmc2V0X3hzX29uZV9zaWRlOiAoQG9mZnNldF94cyAvIDIpO1xuQG9mZnNldF94eHNfb25lX3NpZGU6IChAb2Zmc2V0X3h4cyAvIDIpO1xuXG5AZmllbGRzOiA2MHB4O1xuQGZpZWxkc194czogNXB4O1xuXG4ud3JhcHBlci1mdWxsKCl7XG4gICAgcGFkZGluZy1sZWZ0OiBAZmllbGRzO1xuICAgIHBhZGRpbmctcmlnaHQ6IEBmaWVsZHM7XG5cbiAgICAueHMtYmxvY2soe1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IEBmaWVsZHNfeHM7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IEBmaWVsZHNfeHM7XG4gICAgfSk7XG59XG5cbi5yb3ctb2Zmc2V0cygpe1xuICAgIG1hcmdpbi1sZWZ0OiAoQG9mZnNldF9vbmVfc2lkZSAqIC0xKTtcbiAgICBtYXJnaW4tcmlnaHQ6IChAb2Zmc2V0X29uZV9zaWRlICogLTEpO1xuXG4gICAgLnhzLWJsb2NrKHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IChAb2Zmc2V0X3hzX29uZV9zaWRlICogLTEpO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IChAb2Zmc2V0X3hzX29uZV9zaWRlICogLTEpO1xuICAgIH0pO1xufVxuXG4uY29sLW9mZnNldHMoQHR5cGUpe1xuICAgIEB7dHlwZX0tbGVmdDogQG9mZnNldF9vbmVfc2lkZTtcbiAgICBAe3R5cGV9LXJpZ2h0OiBAb2Zmc2V0X29uZV9zaWRlO1xuXG4gICAgLnhzLWJsb2NrKHtcbiAgICAgICAgQHt0eXBlfS1sZWZ0OiBAb2Zmc2V0X3hzX29uZV9zaWRlO1xuICAgICAgICBAe3R5cGV9LXJpZ2h0OiBAb2Zmc2V0X3hzX29uZV9zaWRlO1xuICAgIH0pO1xufVxuXG4ud3JhcHBlcigpe1xuICAgIG1heC13aWR0aDogOTQwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gICAgLndyYXBwZXItZnVsbCgpO1xufVxuXG4ucm93LWZsZXgoKXtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAucm93LW9mZnNldHMoKTtcbn1cblxuLnJvdy1mbG9hdCgpe1xuICAgIC5yb3ctb2Zmc2V0cygpO1xuICAgIC5jbGVhcmZpeCgpO1xufVxuXG4ucm93LWliKCl7XG4gICAgLnJvdy1vZmZzZXRzKCk7XG59XG5cbi5jb2woKXtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICAuY29sLW9mZnNldHMobWFyZ2luKTtcbn1cblxuLmNvbC1mbG9hdCgpe1xuICAgIGZsb2F0OiBsZWZ0O1xufVxuXG4uY29sLWliKCl7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG59XG5cbi5jb2wtcGFkZGluZygpe1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICAuY29sLW9mZnNldHMocGFkZGluZyk7XG59XG5cbi5zaXplKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICB3aWR0aDogflwiY2FsYyhAe3ZhbH0gLSBAe29mZnNldH0pXCI7XG59XG5cbi5zaXplLW1kKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAubWQod2lkdGgsIH5cImNhbGMoQHt2YWx9IC0gQHtvZmZzZXRfbWR9KVwiKTtcbn1cblxuLnNpemUtc20oQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC5zbSh3aWR0aCwgflwiY2FsYyhAe3ZhbH0gLSBAe29mZnNldF9zbX0pXCIpO1xufVxuXG4uc2l6ZS1zc20oQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC5zc20od2lkdGgsIH5cImNhbGMoQHt2YWx9IC0gQHtvZmZzZXRfc3NtfSlcIik7XG59XG5cbi5zaXplLXhzKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAueHMod2lkdGgsIH5cImNhbGMoQHt2YWx9IC0gQHtvZmZzZXRfeHN9KVwiKTtcbn1cblxuLnNpemUteHhzKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAueHhzKHdpZHRoLCB+XCJjYWxjKEB7dmFsfSAtIEB7b2Zmc2V0X3h4c30pXCIpO1xufVxuXG4uc2hpZnQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIG1hcmdpbi1sZWZ0OiB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X29uZV9zaWRlfSlcIjtcbiAgICBtYXJnaW4tcmlnaHQ6IH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfb25lX3NpZGV9KVwiO1xufVxuXG4uc2hpZnQtbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgbWFyZ2luLWxlZnQ6IH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfb25lX3NpZGV9KVwiO1xufVxuXG4uc2hpZnQtcmlnaHQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIG1hcmdpbi1yaWdodDogflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9vbmVfc2lkZX0pXCI7XG59XG5cbi5zaGlmdC1wYWRkaW5nKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICBwYWRkaW5nLWxlZnQ6IH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfb25lX3NpZGV9KVwiO1xuICAgIHBhZGRpbmctcmlnaHQ6IH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfb25lX3NpZGV9KVwiO1xufVxuXG4uc2hpZnQtcGFkZGluZy1sZWZ0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICBwYWRkaW5nLWxlZnQ6IH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfb25lX3NpZGV9KVwiO1xufVxuXG4uc2hpZnQtcGFkZGluZy1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgcGFkZGluZy1yaWdodDogflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9vbmVfc2lkZX0pXCI7XG59XG5cbi5zaGlmdC1tZChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLm1kKG1hcmdpbi1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X21kX29uZV9zaWRlfSlcIik7XG4gICAgLm1kKG1hcmdpbi1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9tZF9vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQtbWQtbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLm1kKG1hcmdpbi1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X21kX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1tZC1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLm1kKG1hcmdpbi1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9tZF9vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQtbWQtcGFkZGluZyhAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLm1kKHBhZGRpbmctbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9tZF9vbmVfc2lkZX0pXCIpO1xuICAgIC5tZChwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X21kX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1tZC1wYWRkaW5nLWxlZnQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC5tZChwYWRkaW5nLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfbWRfb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LW1kLXBhZGRpbmctcmlnaHQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC5tZChwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X21kX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zbShAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNtKG1hcmdpbi1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NtX29uZV9zaWRlfSlcIik7XG4gICAgLnNtKG1hcmdpbi1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zbV9vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQtc20tbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNtKG1hcmdpbi1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zbS1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNtKG1hcmdpbi1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zbV9vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQtc20tcGFkZGluZyhAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNtKHBhZGRpbmctbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zbV9vbmVfc2lkZX0pXCIpO1xuICAgIC5zbShwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zbS1wYWRkaW5nLWxlZnQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC5zbShwYWRkaW5nLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc21fb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXNtLXBhZGRpbmctcmlnaHQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC5zbShwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zc20oQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC5zc20obWFyZ2luLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc3NtX29uZV9zaWRlfSlcIik7XG4gICAgLnNzbShtYXJnaW4tcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zc20tbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNzbShtYXJnaW4tbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zc21fb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXNzbS1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNzbShtYXJnaW4tcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zc20tcGFkZGluZyhAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNzbShwYWRkaW5nLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc3NtX29uZV9zaWRlfSlcIik7XG4gICAgLnNzbShwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NzbV9vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQtc3NtLXBhZGRpbmctbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNzbShwYWRkaW5nLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zc20tcGFkZGluZy1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNzbShwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NzbV9vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHMoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54cyhtYXJnaW4tbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94c19vbmVfc2lkZX0pXCIpO1xuICAgIC54cyhtYXJnaW4tcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHNfb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXhzLWxlZnQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54cyhtYXJnaW4tbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94c19vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHMtcmlnaHQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54cyhtYXJnaW4tcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHNfb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXhzLXBhZGRpbmcoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54cyhwYWRkaW5nLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHNfb25lX3NpZGV9KVwiKTtcbiAgICAueHMocGFkZGluZy1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94c19vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHMtcGFkZGluZy1sZWZ0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAueHMocGFkZGluZy1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3hzX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC14cy1wYWRkaW5nLXJpZ2h0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAueHMocGFkZGluZy1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94c19vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHhzKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAueHhzKG1hcmdpbi1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3h4c19vbmVfc2lkZX0pXCIpO1xuICAgIC54eHMobWFyZ2luLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3h4c19vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHhzLWxlZnQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54eHMobWFyZ2luLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHhzX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC14eHMtcmlnaHQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54eHMobWFyZ2luLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3h4c19vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHhzLXBhZGRpbmcoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54eHMocGFkZGluZy1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3h4c19vbmVfc2lkZX0pXCIpO1xuICAgIC54eHMocGFkZGluZy1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94eHNfb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXh4cy1wYWRkaW5nLWxlZnQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54eHMocGFkZGluZy1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3h4c19vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHhzLXBhZGRpbmctcmlnaHQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54eHMocGFkZGluZy1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94eHNfb25lX3NpZGV9KVwiKTtcbn1cblxuLm1kKEBuYW1lLCBAdmFsdWUpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IEBicmVha19tZCl7XG4gICAgICAgIEB7bmFtZX06IEB2YWx1ZTtcbiAgICB9XG59XG5cbi5tZC1ibG9jayhAY29udGVudCl7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogQGJyZWFrX21kKXtcbiAgICAgICAgQGNvbnRlbnQoKTtcbiAgICB9XG59XG5cbi5zbShAbmFtZSwgQHZhbHVlKXtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBAYnJlYWtfc20pe1xuICAgICAgICBAe25hbWV9OiBAdmFsdWU7XG4gICAgfVxufVxuXG4uc20tYmxvY2soQGNvbnRlbnQpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IEBicmVha19zbSl7XG4gICAgICAgIEBjb250ZW50KCk7XG4gICAgfVxufVxuXG4uc3NtKEBuYW1lLCBAdmFsdWUpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IEBicmVha19zc20pe1xuICAgICAgICBAe25hbWV9OiBAdmFsdWU7XG4gICAgfVxufVxuXG4uc3NtLWJsb2NrKEBjb250ZW50KXtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBAYnJlYWtfc3NtKXtcbiAgICAgICAgQGNvbnRlbnQoKTtcbiAgICB9XG59XG5cbi54cyhAbmFtZSwgQHZhbHVlKXtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBAYnJlYWtfeHMpe1xuICAgICAgICBAe25hbWV9OiBAdmFsdWU7XG4gICAgfVxufVxuXG4ueHMtYmxvY2soQGNvbnRlbnQpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IEBicmVha194cyl7XG4gICAgICAgIEBjb250ZW50KCk7XG4gICAgfVxufVxuXG4ueHhzKEBuYW1lLCBAdmFsdWUpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IEBicmVha194eHMpe1xuICAgICAgICBAe25hbWV9OiBAdmFsdWU7XG4gICAgfVxufVxuXG4ueHhzLWJsb2NrKEBjb250ZW50KXtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBAYnJlYWtfeHhzKXtcbiAgICAgICAgQGNvbnRlbnQoKTtcbiAgICB9XG59XG5cbi5mcm9tKEBtaW5fd2lkdGgsIEBjb250ZW50KXtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiBAbWluX3dpZHRoKXtcbiAgICAgICAgQGNvbnRlbnQoKTtcbiAgICB9XG59XG5cbi50byhAbWF4X3dpZHRoLCBAY29udGVudCl7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogQG1heF93aWR0aCl7XG4gICAgICAgIEBjb250ZW50KCk7XG4gICAgfVxufVxuXG4uZnJvbS10byhAbWluX3dpZHRoLCBAbWF4X3dpZHRoLCBAY29udGVudCl7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogQG1pbl93aWR0aCkgYW5kIChtYXgtd2lkdGg6IEBtYXhfd2lkdGgpe1xuICAgICAgICBAY29udGVudCgpO1xuICAgIH1cbn1cblxuLnUtcm93LWZsZXgoQG9mZnNldCl7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgbWFyZ2luLWxlZnQ6IChAb2Zmc2V0IC8gLTIpO1xuICAgIG1hcmdpbi1yaWdodDogKEBvZmZzZXQgLyAtMik7XG59XG5cbi51LWNvbChAb2Zmc2V0KXtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBtYXJnaW4tbGVmdDogKEBvZmZzZXQgLyAyKTtcbiAgICBtYXJnaW4tcmlnaHQ6IChAb2Zmc2V0IC8gMik7XG59XG5cbi51LXNpemUoQG4sIEBjb2x1bW5zLCBAb2Zmc2V0KXtcbiAgICB3aWR0aDogflwiY2FsYygxMDAlIC8gQHtjb2x1bW5zfSAqIEB7bn0gLSBAe29mZnNldH0pXCI7XG59XG5cbi5yZXNldCgpe1xuICAgIGJvZHksZGl2LGRsLGR0LGRkLHVsLGxpLGgxLGgyLGgzLGg0LGg1LGg2LHByZSxjb2RlLGZvcm0sZmllbGRzZXQsaW5wdXQsdGV4dGFyZWEscCxibG9ja3F1b3RlLHRoLHRke1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgfVxuICAgIHRhYmxle1xuICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgICAgICBib3JkZXItc3BhY2luZzogMDtcbiAgICB9XG4gICAgZmllbGRzZXQsaW1nLGFiYnJ7XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICB9XG4gICAgYWRkcmVzcyxjYXB0aW9uLGNpdGUsY29kZSxkZm4sZW0sc3Ryb25nLHRoLHZhcntcbiAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIH1cbiAgICB1bCBsaXtcbiAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICB9XG4gICAgY2FwdGlvbix0aHtcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB9XG4gICAgaDEsaDIsaDMsaDQsaDUsaDZ7XG4gICAgICAgIGZvbnQtc2l6ZTogMTAwJTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICB9XG4gICAgc3Vwe1xuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC10b3A7XG4gICAgfVxuICAgIHN1YntcbiAgICAgICAgdmVydGljYWwtYWxpZ246IHRleHQtYm90dG9tO1xuICAgIH1cbiAgICBpbnB1dCx0ZXh0YXJlYSxzZWxlY3R7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAgICAgICBmb250LXNpemU6IGluaGVyaXQ7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xuICAgIH1cbiAgICBsZWdlbmR7XG4gICAgICAgIGNvbG9yOiAjMDAwO1xuICAgIH1cbiAgICBhcnRpY2xlLGFzaWRlLGRldGFpbHMsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGhlYWRlcixoZ3JvdXAsbWVudSxuYXYsc2VjdGlvbixtYWlue1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gICAgaW1ne1xuICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogYXV0bztcbiAgICB9XG59XG5cbi5kZWJ1ZyhAYmFja2dyb3VuZCwgQG91dGxpbmUpe1xuICAgIGhlaWdodDogMTAwdmg7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIFxuICAgID4gZGl2e1xuICAgICAgICBoZWlnaHQ6IGluaGVyaXQ7XG4gICAgICAgIC53cmFwcGVyKCk7XG4gICAgICAgIFxuICAgICAgICA+IGRpdntcbiAgICAgICAgICAgIGhlaWdodDogaW5oZXJpdDtcbiAgICAgICAgICAgIC5yb3ctZmxleCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICA+IGRpdntcbiAgICAgICAgICAgICAgICAuY29sKCk7XG4gICAgICAgICAgICAgICAgLnNpemUoMSk7XG4gICAgICAgICAgICAgICAgLnNpemUteHMoMSk7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBpbmhlcml0O1xuICAgICAgICAgICAgICAgIG91dGxpbmU6IEBvdXRsaW5lO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IEBiYWNrZ3JvdW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4uY2xlYXJmaXgoKXtcbiAgICAmOjphZnRlcntcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICAgIGNsZWFyOiBib3RoO1xuICAgIH1cbn0iLCJAaW1wb3J0IFwiLi4vZm9udHMvZm9udHMubGVzc1wiO1xuQGltcG9ydCBcIi4uL3Nwcml0ZS9zcHJpdGUubGVzc1wiO1xuXG4ucmVzZXQoKTtcblxuLndyYXBwZXJ7XG4gICAgLndyYXBwZXIoKTtcbn1cblxuQGZvbnQtZmFjZSB7XG4gICAgLmZvbnQoQGZvbnQ7IEBmb250UmVndWxhcik7XG59XG5cbkBmb250LWZhY2Uge1xuICAgIC5mb250KEBQVFNhbnM7IFwiQHtQVFNhbnN9LUJvbGRcIik7XG59XG5cbmJvZHkge1xuICAgIGZvbnQtZmFtaWx5OiBAZm9udFJlZ3VsYXI7XG4gICAgIHBhZGRpbmc6IDA7XG4gICAgIG1hcmdpbjogMDtcbn1cblxuYSwgYnV0dG9ue1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAmOmZvY3Vze1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgIH1cbiAgfVxuICBhe1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogaW5oZXJpdDtcbiAgfVxuICBpbnB1dHtcbiAgICBjdXJzb3I6IHRleHQ7XG4gICAgJjpmb2N1c3tcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICB9XG4gIH1cbiAgXG5cbiIsIi5mb250IChAZm9udDsgQGZvbnROYW1lOyBAdXJsTmFtZTogQGZvbnROYW1lOyBAd2VpZ2h0OiBub3JtYWw7IEBzdHlsZTogbm9ybWFsOykge1xuICAgIGZvbnQtZmFtaWx5OiAnQHtmb250TmFtZX0nO1xuICAgIHNyYzogdXJsKCcuLi8uLi9mb250cy9Ae2ZvbnR9L0B7dXJsTmFtZX0udHRmJykgZm9ybWF0KCd0cnVldHlwZScpOyBcbiAgICBmb250LXdlaWdodDogQHdlaWdodDtcbiAgICBmb250LXN0eWxlOiBAc3R5bGU7XG59XG5cbkBPcGVuU2FuczogJ09wZW5TYW5zJztcbkBSb2JvdG86ICdSb2JvdG8nO1xuQFBUU2FuczogJ1BUU2Fucyc7XG5cbkBkZWZhdWx0OiBAT3BlblNhbnM7XG5cbkBmb250OiBAZGVmYXVsdDtcbkBmb250Qm9sZDogJ0B7Zm9udH0tQm9sZCc7XG5AZm9udEl0YWxpYzogJ0B7Zm9udH0tSXRhbGljJztcbkBmb250UmVndWxhcjogJ0B7Zm9udH0tUmVndWxhcic7IiwiLnBhZ2Uge1xuICAgICZfX3RpdGxlIHtcbiAgICAgICAgJi1oMSwgJi1oMiB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJAe1BUU2Fuc30tQm9sZFwiO1xuICAgICAgICAgICAgY29sb3I6IEBjb2xvcl9ncmVlbjtcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogNDBweDtcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gICAgICAgIH1cbiAgICAgICAgJi1oMSB7XG4gICAgICAgICAgICBmb250LXNpemU6IDQ1cHg7XG4gICAgICAgIH1cbiAgICAgICAgJi1oMiB7XG4gICAgICAgICAgICBmb250LXNpemU6IDI1cHg7XG4gICAgICAgICAgICBjb2xvcjogQGNvbG9yX2dyZWVuO1xuICAgICAgICAgICAgJl93aGl0ZXtcbiAgICAgICAgICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAmX19idG4ge1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICBoZWlnaHQ6IDY4cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnQHtQVFNhbnN9LUJvbGQnO1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGNvbG9yOiBAY29sb3Jfd2hpdGU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IEBjb2xvcl92aW9sZXQ7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIEBjb2xvcl92aW9sZXQ7XG4gICAgICAgICAgICAmOmhvdmVye1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzI2MjYyNjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogQGNvbG9yX3doaXRlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCBlYXNlLW91dCAwLjVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICB9XG4gICAgJl9fYnRuXzIge1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIHdpZHRoOiAyNDBweDtcblxuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIGhlaWdodDogNjhweDtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdAe1BUU2Fuc30tQm9sZCc7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgY29sb3I6IEBjb2xvcl93aGl0ZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogQGNvbG9yX3Zpb2xldDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgQGNvbG9yX3Zpb2xldDtcbiAgICAgICAgICAgICY6aG92ZXJ7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMjYyNjI2O1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAY29sb3Jfd2hpdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIGVhc2Utb3V0IDAuNXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICZfX2J0bl8zIHtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICB3aWR0aDogMjQwcHg7XG5cbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICBoZWlnaHQ6IDY4cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnQHtQVFNhbnN9LUJvbGQnO1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGNvbG9yOiBAY29sb3Jfd2hpdGU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IEBjb2xvcl92aW9sZXQ7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIEBjb2xvcl92aW9sZXQ7XG4gICAgICAgICAgICAmOmhvdmVye1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzI2MjYyNjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogQGNvbG9yX3doaXRlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCBlYXNlLW91dCAwLjVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICB9XG4gICAgJl9fdGV4dCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gICAgfVxufVxuXG4iLCIuaGVhZGVyIHtcbiAgICAucm93LWZsZXgoKTtcbiAgICBjb2xvcjogQGNvbG9yX3doaXRlO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgJi1sb2dvIHtcbiAgICAgICAgLmNvbCgpO1xuICAgICAgICAuc2l6ZSg2KTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgJl9faWNvbntcbiAgICAgICAgIC5zcHJpdGUoQGljb24tY2VsZW5kZXIpO1xuICAgICAgICB9XG4gICAgICAgICZfX3RleHQge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiQHtQVFNhbnN9LUJvbGRcIjtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgICAgICAgICAgZm9udC1zaXplOiAyNXB4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJi1zb2NpYWwge1xuICAgICAgICAuY29sKCk7XG4gICAgICAgIC5zaXplKDYpO1xuICAgICAgICAuc29jaWFsIHtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgICAgICAmX19pY29uIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGludmVydCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAmLWJsb2NrIHtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgei1pbmRleDogMjtcbiAgICB9XG59XG5cbiIsIi8qXG5MRVNTIHZhcmlhYmxlcyBhcmUgaW5mb3JtYXRpb24gYWJvdXQgaWNvbidzIGNvbXBpbGVkIHN0YXRlLCBzdG9yZWQgdW5kZXIgaXRzIG9yaWdpbmFsIGZpbGUgbmFtZVxuXG4uaWNvbi1ob21lIHtcbiAgd2lkdGg6IEBpY29uLWhvbWUtd2lkdGg7XG59XG5cblRoZSBsYXJnZSBhcnJheS1saWtlIHZhcmlhYmxlcyBjb250YWluIGFsbCBpbmZvcm1hdGlvbiBhYm91dCBhIHNpbmdsZSBpY29uXG5AaWNvbi1ob21lOiB4IHkgb2Zmc2V0X3ggb2Zmc2V0X3kgd2lkdGggaGVpZ2h0IHRvdGFsX3dpZHRoIHRvdGFsX2hlaWdodCBpbWFnZV9wYXRoIG5hbWU7XG5cbkF0IHRoZSBib3R0b20gb2YgdGhpcyBzZWN0aW9uLCB3ZSBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzcHJpdGVzaGVldCBpdHNlbGZcbkBzcHJpdGVzaGVldDogd2lkdGggaGVpZ2h0IGltYWdlIEBzcHJpdGVzaGVldC1zcHJpdGVzO1xuKi9cbkBpY29uLWNlbGVuZGVyLW9yYW5nZS1uYW1lOiAnaWNvbi1jZWxlbmRlci1vcmFuZ2UnO1xuQGljb24tY2VsZW5kZXItb3JhbmdlLXg6IDBweDtcbkBpY29uLWNlbGVuZGVyLW9yYW5nZS15OiA1MXB4O1xuQGljb24tY2VsZW5kZXItb3JhbmdlLW9mZnNldC14OiAwcHg7XG5AaWNvbi1jZWxlbmRlci1vcmFuZ2Utb2Zmc2V0LXk6IC01MXB4O1xuQGljb24tY2VsZW5kZXItb3JhbmdlLXdpZHRoOiAxN3B4O1xuQGljb24tY2VsZW5kZXItb3JhbmdlLWhlaWdodDogMTlweDtcbkBpY29uLWNlbGVuZGVyLW9yYW5nZS10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi1jZWxlbmRlci1vcmFuZ2UtdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tY2VsZW5kZXItb3JhbmdlLWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQGljb24tY2VsZW5kZXItb3JhbmdlOiAwcHggNTFweCAwcHggLTUxcHggMTdweCAxOXB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1jZWxlbmRlci1vcmFuZ2UnO1xuQGljb24tY2VsZW5kZXItbmFtZTogJ2ljb24tY2VsZW5kZXInO1xuQGljb24tY2VsZW5kZXIteDogMHB4O1xuQGljb24tY2VsZW5kZXIteTogMHB4O1xuQGljb24tY2VsZW5kZXItb2Zmc2V0LXg6IDBweDtcbkBpY29uLWNlbGVuZGVyLW9mZnNldC15OiAwcHg7XG5AaWNvbi1jZWxlbmRlci13aWR0aDogNDNweDtcbkBpY29uLWNlbGVuZGVyLWhlaWdodDogNDFweDtcbkBpY29uLWNlbGVuZGVyLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLWNlbGVuZGVyLXRvdGFsLWhlaWdodDogOTZweDtcbkBpY29uLWNlbGVuZGVyLWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQGljb24tY2VsZW5kZXI6IDBweCAwcHggMHB4IDBweCA0M3B4IDQxcHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLWNlbGVuZGVyJztcbkBpY29uLWZhY2Vib29rLWJsYWNrLW5hbWU6ICdpY29uLWZhY2Vib29rLWJsYWNrJztcbkBpY29uLWZhY2Vib29rLWJsYWNrLXg6IDUxcHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay15OiA1MXB4O1xuQGljb24tZmFjZWJvb2stYmxhY2stb2Zmc2V0LXg6IC01MXB4O1xuQGljb24tZmFjZWJvb2stYmxhY2stb2Zmc2V0LXk6IC01MXB4O1xuQGljb24tZmFjZWJvb2stYmxhY2std2lkdGg6IDE2cHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay1oZWlnaHQ6IDE2cHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay10b3RhbC1oZWlnaHQ6IDk2cHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLWZhY2Vib29rLWJsYWNrOiA1MXB4IDUxcHggLTUxcHggLTUxcHggMTZweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1mYWNlYm9vay1ibGFjayc7XG5AaWNvbi1mYWNlYm9vay1uYW1lOiAnaWNvbi1mYWNlYm9vayc7XG5AaWNvbi1mYWNlYm9vay14OiA4N3B4O1xuQGljb24tZmFjZWJvb2steTogMHB4O1xuQGljb24tZmFjZWJvb2stb2Zmc2V0LXg6IC04N3B4O1xuQGljb24tZmFjZWJvb2stb2Zmc2V0LXk6IDBweDtcbkBpY29uLWZhY2Vib29rLXdpZHRoOiAxNnB4O1xuQGljb24tZmFjZWJvb2staGVpZ2h0OiAxNnB4O1xuQGljb24tZmFjZWJvb2stdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24tZmFjZWJvb2stdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tZmFjZWJvb2staW1hZ2U6ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyc7XG5AaWNvbi1mYWNlYm9vazogODdweCAwcHggLTg3cHggMHB4IDE2cHggMTZweCAxMjlweCA5NnB4ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZycgJ2ljb24tZmFjZWJvb2snO1xuQGljb24tZ29vZ2xlLXBsdXMtYmxhY2stbmFtZTogJ2ljb24tZ29vZ2xlLXBsdXMtYmxhY2snO1xuQGljb24tZ29vZ2xlLXBsdXMtYmxhY2steDogODdweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLXk6IDI2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1ibGFjay1vZmZzZXQteDogLTg3cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1ibGFjay1vZmZzZXQteTogLTI2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1ibGFjay13aWR0aDogMTZweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLWhlaWdodDogMTZweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLXRvdGFsLWhlaWdodDogOTZweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQGljb24tZ29vZ2xlLXBsdXMtYmxhY2s6IDg3cHggMjZweCAtODdweCAtMjZweCAxNnB4IDE2cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLWdvb2dsZS1wbHVzLWJsYWNrJztcbkBpY29uLWdvb2dsZS1wbHVzLW5hbWU6ICdpY29uLWdvb2dsZS1wbHVzJztcbkBpY29uLWdvb2dsZS1wbHVzLXg6IDg3cHg7XG5AaWNvbi1nb29nbGUtcGx1cy15OiA1MnB4O1xuQGljb24tZ29vZ2xlLXBsdXMtb2Zmc2V0LXg6IC04N3B4O1xuQGljb24tZ29vZ2xlLXBsdXMtb2Zmc2V0LXk6IC01MnB4O1xuQGljb24tZ29vZ2xlLXBsdXMtd2lkdGg6IDE2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1oZWlnaHQ6IDE2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi1nb29nbGUtcGx1cy10b3RhbC1oZWlnaHQ6IDk2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLWdvb2dsZS1wbHVzOiA4N3B4IDUycHggLTg3cHggLTUycHggMTZweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1nb29nbGUtcGx1cyc7XG5AaWNvbi1pbnN0YWdyYW0tYmxhY2stbmFtZTogJ2ljb24taW5zdGFncmFtLWJsYWNrJztcbkBpY29uLWluc3RhZ3JhbS1ibGFjay14OiAwcHg7XG5AaWNvbi1pbnN0YWdyYW0tYmxhY2steTogODBweDtcbkBpY29uLWluc3RhZ3JhbS1ibGFjay1vZmZzZXQteDogMHB4O1xuQGljb24taW5zdGFncmFtLWJsYWNrLW9mZnNldC15OiAtODBweDtcbkBpY29uLWluc3RhZ3JhbS1ibGFjay13aWR0aDogMTZweDtcbkBpY29uLWluc3RhZ3JhbS1ibGFjay1oZWlnaHQ6IDE2cHg7XG5AaWNvbi1pbnN0YWdyYW0tYmxhY2stdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24taW5zdGFncmFtLWJsYWNrLXRvdGFsLWhlaWdodDogOTZweDtcbkBpY29uLWluc3RhZ3JhbS1ibGFjay1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLWluc3RhZ3JhbS1ibGFjazogMHB4IDgwcHggMHB4IC04MHB4IDE2cHggMTZweCAxMjlweCA5NnB4ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZycgJ2ljb24taW5zdGFncmFtLWJsYWNrJztcbkBpY29uLWluc3RhZ3JhbS1uYW1lOiAnaWNvbi1pbnN0YWdyYW0nO1xuQGljb24taW5zdGFncmFtLXg6IDI2cHg7XG5AaWNvbi1pbnN0YWdyYW0teTogODBweDtcbkBpY29uLWluc3RhZ3JhbS1vZmZzZXQteDogLTI2cHg7XG5AaWNvbi1pbnN0YWdyYW0tb2Zmc2V0LXk6IC04MHB4O1xuQGljb24taW5zdGFncmFtLXdpZHRoOiAxNnB4O1xuQGljb24taW5zdGFncmFtLWhlaWdodDogMTZweDtcbkBpY29uLWluc3RhZ3JhbS10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi1pbnN0YWdyYW0tdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24taW5zdGFncmFtLWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQGljb24taW5zdGFncmFtOiAyNnB4IDgwcHggLTI2cHggLTgwcHggMTZweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1pbnN0YWdyYW0nO1xuQGljb24tbWFucGx1cy1uYW1lOiAnaWNvbi1tYW5wbHVzJztcbkBpY29uLW1hbnBsdXMteDogNTNweDtcbkBpY29uLW1hbnBsdXMteTogMHB4O1xuQGljb24tbWFucGx1cy1vZmZzZXQteDogLTUzcHg7XG5AaWNvbi1tYW5wbHVzLW9mZnNldC15OiAwcHg7XG5AaWNvbi1tYW5wbHVzLXdpZHRoOiAyNHB4O1xuQGljb24tbWFucGx1cy1oZWlnaHQ6IDE5cHg7XG5AaWNvbi1tYW5wbHVzLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLW1hbnBsdXMtdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tbWFucGx1cy1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLW1hbnBsdXM6IDUzcHggMHB4IC01M3B4IDBweCAyNHB4IDE5cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLW1hbnBsdXMnO1xuQGljb24tbWFyay1tYXAtbmFtZTogJ2ljb24tbWFyay1tYXAnO1xuQGljb24tbWFyay1tYXAteDogMTEzcHg7XG5AaWNvbi1tYXJrLW1hcC15OiA1MnB4O1xuQGljb24tbWFyay1tYXAtb2Zmc2V0LXg6IC0xMTNweDtcbkBpY29uLW1hcmstbWFwLW9mZnNldC15OiAtNTJweDtcbkBpY29uLW1hcmstbWFwLXdpZHRoOiAxMnB4O1xuQGljb24tbWFyay1tYXAtaGVpZ2h0OiAxNnB4O1xuQGljb24tbWFyay1tYXAtdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24tbWFyay1tYXAtdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tbWFyay1tYXAtaW1hZ2U6ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyc7XG5AaWNvbi1tYXJrLW1hcDogMTEzcHggNTJweCAtMTEzcHggLTUycHggMTJweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1tYXJrLW1hcCc7XG5AaWNvbi1taWNyb2Zvbi1uYW1lOiAnaWNvbi1taWNyb2Zvbic7XG5AaWNvbi1taWNyb2Zvbi14OiAyN3B4O1xuQGljb24tbWljcm9mb24teTogNTFweDtcbkBpY29uLW1pY3JvZm9uLW9mZnNldC14OiAtMjdweDtcbkBpY29uLW1pY3JvZm9uLW9mZnNldC15OiAtNTFweDtcbkBpY29uLW1pY3JvZm9uLXdpZHRoOiAxNHB4O1xuQGljb24tbWljcm9mb24taGVpZ2h0OiAxOXB4O1xuQGljb24tbWljcm9mb24tdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24tbWljcm9mb24tdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tbWljcm9mb24taW1hZ2U6ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyc7XG5AaWNvbi1taWNyb2ZvbjogMjdweCA1MXB4IC0yN3B4IC01MXB4IDE0cHggMTlweCAxMjlweCA5NnB4ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZycgJ2ljb24tbWljcm9mb24nO1xuQGljb24tdHdpdHRlci1ibGFjay1uYW1lOiAnaWNvbi10d2l0dGVyLWJsYWNrJztcbkBpY29uLXR3aXR0ZXItYmxhY2steDogNTJweDtcbkBpY29uLXR3aXR0ZXItYmxhY2steTogODBweDtcbkBpY29uLXR3aXR0ZXItYmxhY2stb2Zmc2V0LXg6IC01MnB4O1xuQGljb24tdHdpdHRlci1ibGFjay1vZmZzZXQteTogLTgwcHg7XG5AaWNvbi10d2l0dGVyLWJsYWNrLXdpZHRoOiAxNnB4O1xuQGljb24tdHdpdHRlci1ibGFjay1oZWlnaHQ6IDE2cHg7XG5AaWNvbi10d2l0dGVyLWJsYWNrLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLXR3aXR0ZXItYmxhY2stdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tdHdpdHRlci1ibGFjay1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLXR3aXR0ZXItYmxhY2s6IDUycHggODBweCAtNTJweCAtODBweCAxNnB4IDE2cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLXR3aXR0ZXItYmxhY2snO1xuQGljb24tdHdpdHRlci1uYW1lOiAnaWNvbi10d2l0dGVyJztcbkBpY29uLXR3aXR0ZXIteDogNzhweDtcbkBpY29uLXR3aXR0ZXIteTogODBweDtcbkBpY29uLXR3aXR0ZXItb2Zmc2V0LXg6IC03OHB4O1xuQGljb24tdHdpdHRlci1vZmZzZXQteTogLTgwcHg7XG5AaWNvbi10d2l0dGVyLXdpZHRoOiAxNnB4O1xuQGljb24tdHdpdHRlci1oZWlnaHQ6IDE2cHg7XG5AaWNvbi10d2l0dGVyLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLXR3aXR0ZXItdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tdHdpdHRlci1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLXR3aXR0ZXI6IDc4cHggODBweCAtNzhweCAtODBweCAxNnB4IDE2cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLXR3aXR0ZXInO1xuQGljb24tdmltZW8tYmxhY2stbmFtZTogJ2ljb24tdmltZW8tYmxhY2snO1xuQGljb24tdmltZW8tYmxhY2steDogMTEzcHg7XG5AaWNvbi12aW1lby1ibGFjay15OiAwcHg7XG5AaWNvbi12aW1lby1ibGFjay1vZmZzZXQteDogLTExM3B4O1xuQGljb24tdmltZW8tYmxhY2stb2Zmc2V0LXk6IDBweDtcbkBpY29uLXZpbWVvLWJsYWNrLXdpZHRoOiAxNnB4O1xuQGljb24tdmltZW8tYmxhY2staGVpZ2h0OiAxNnB4O1xuQGljb24tdmltZW8tYmxhY2stdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24tdmltZW8tYmxhY2stdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tdmltZW8tYmxhY2staW1hZ2U6ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyc7XG5AaWNvbi12aW1lby1ibGFjazogMTEzcHggMHB4IC0xMTNweCAwcHggMTZweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi12aW1lby1ibGFjayc7XG5AaWNvbi12aW1lby1uYW1lOiAnaWNvbi12aW1lbyc7XG5AaWNvbi12aW1lby14OiAxMTNweDtcbkBpY29uLXZpbWVvLXk6IDI2cHg7XG5AaWNvbi12aW1lby1vZmZzZXQteDogLTExM3B4O1xuQGljb24tdmltZW8tb2Zmc2V0LXk6IC0yNnB4O1xuQGljb24tdmltZW8td2lkdGg6IDE2cHg7XG5AaWNvbi12aW1lby1oZWlnaHQ6IDE2cHg7XG5AaWNvbi12aW1lby10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi12aW1lby10b3RhbC1oZWlnaHQ6IDk2cHg7XG5AaWNvbi12aW1lby1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLXZpbWVvOiAxMTNweCAyNnB4IC0xMTNweCAtMjZweCAxNnB4IDE2cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLXZpbWVvJztcbkBzcHJpdGVzaGVldC13aWR0aDogMTI5cHg7XG5Ac3ByaXRlc2hlZXQtaGVpZ2h0OiA5NnB4O1xuQHNwcml0ZXNoZWV0LWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQHNwcml0ZXNoZWV0LXNwcml0ZXM6IEBpY29uLWNlbGVuZGVyLW9yYW5nZSBAaWNvbi1jZWxlbmRlciBAaWNvbi1mYWNlYm9vay1ibGFjayBAaWNvbi1mYWNlYm9vayBAaWNvbi1nb29nbGUtcGx1cy1ibGFjayBAaWNvbi1nb29nbGUtcGx1cyBAaWNvbi1pbnN0YWdyYW0tYmxhY2sgQGljb24taW5zdGFncmFtIEBpY29uLW1hbnBsdXMgQGljb24tbWFyay1tYXAgQGljb24tbWljcm9mb24gQGljb24tdHdpdHRlci1ibGFjayBAaWNvbi10d2l0dGVyIEBpY29uLXZpbWVvLWJsYWNrIEBpY29uLXZpbWVvO1xuQHNwcml0ZXNoZWV0OiAxMjlweCA5NnB4ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZycgQHNwcml0ZXNoZWV0LXNwcml0ZXM7XG5cbi8qXG5UaGUgcHJvdmlkZWQgY2xhc3NlcyBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIHRoZSBhcnJheS1saWtlIHZhcmlhYmxlc1xuXG4uaWNvbi1ob21lIHtcbiAgLnNwcml0ZS13aWR0aChAaWNvbi1ob21lKTtcbn1cbi5pY29uLWVtYWlsIHtcbiAgLnNwcml0ZShAaWNvbi1lbWFpbCk7XG59XG5cbkV4YW1wbGUgdXNhZ2UgaW4gSFRNTDpcblxuYGRpc3BsYXk6IGJsb2NrYCBzcHJpdGU6XG48ZGl2IGNsYXNzPVwiaWNvbi1ob21lXCI+PC9kaXY+XG5cblRvIGNoYW5nZSBgZGlzcGxheWAgKGUuZy4gYGRpc3BsYXk6IGlubGluZS1ibG9jaztgKSwgd2Ugc3VnZ2VzdCB1c2luZyBhIGNvbW1vbiBDU1MgY2xhc3M6XG5cbi8vIENTU1xuLmljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8vIEhUTUxcbjxpIGNsYXNzPVwiaWNvbiBpY29uLWhvbWVcIj48L2k+XG4qL1xuLnNwcml0ZS13aWR0aChAc3ByaXRlKSB7XG4gIHdpZHRoOiBleHRyYWN0KEBzcHJpdGUsIDUpO1xufVxuXG4uc3ByaXRlLWhlaWdodChAc3ByaXRlKSB7XG4gIGhlaWdodDogZXh0cmFjdChAc3ByaXRlLCA2KTtcbn1cblxuLnNwcml0ZS1wb3NpdGlvbihAc3ByaXRlKSB7XG4gIEBzcHJpdGUtb2Zmc2V0LXg6IGV4dHJhY3QoQHNwcml0ZSwgMyk7XG4gIEBzcHJpdGUtb2Zmc2V0LXk6IGV4dHJhY3QoQHNwcml0ZSwgNCk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IEBzcHJpdGUtb2Zmc2V0LXggQHNwcml0ZS1vZmZzZXQteTtcbn1cblxuLnNwcml0ZS1pbWFnZShAc3ByaXRlKSB7XG4gIEBzcHJpdGUtaW1hZ2U6IGV4dHJhY3QoQHNwcml0ZSwgOSk7XG4gIGJhY2tncm91bmQtaW1hZ2U6IGUoJSgndXJsKCVhKScsIGUoQHNwcml0ZS1pbWFnZSkpKTtcbn1cblxuLnNwcml0ZShAc3ByaXRlKSB7XG4gIC5zcHJpdGUtaW1hZ2UoQHNwcml0ZSk7XG4gIC5zcHJpdGUtcG9zaXRpb24oQHNwcml0ZSk7XG4gIC5zcHJpdGUtd2lkdGgoQHNwcml0ZSk7XG4gIC5zcHJpdGUtaGVpZ2h0KEBzcHJpdGUpO1xufVxuXG4vKlxuVGhlIGAuc3ByaXRlc2AgbWl4aW4gZ2VuZXJhdGVzIGlkZW50aWNhbCBvdXRwdXQgdG8gdGhlIENTUyB0ZW1wbGF0ZVxuICBidXQgY2FuIGJlIG92ZXJyaWRkZW4gaW5zaWRlIG9mIExFU1NcblxuVGhpcyBtdXN0IGJlIHJ1biB3aGVuIHlvdSBoYXZlIGF0IGxlYXN0IDIgc3ByaXRlcy5cbiAgSWYgcnVuIHdpdGggYSBzaW5nbGUgc3ByaXRlLCB0aGVuIHRoZXJlIHdpbGwgYmUgcmVmZXJlbmNlIGVycm9ycy5cblxuLnNwcml0ZXMoQHNwcml0ZXNoZWV0LXNwcml0ZXMpO1xuKi9cbi5zcHJpdGVzKEBzcHJpdGVzLCBAaTogMSkgd2hlbiAoQGkgPD0gbGVuZ3RoKEBzcHJpdGVzKSkge1xuICBAc3ByaXRlOiBleHRyYWN0KEBzcHJpdGVzLCBAaSk7XG4gIEBzcHJpdGUtbmFtZTogZShleHRyYWN0KEBzcHJpdGUsIDEwKSk7XG4gIC5Ae3Nwcml0ZS1uYW1lfSB7XG4gICAgLnNwcml0ZShAc3ByaXRlKTtcbiAgfVxuICAuc3ByaXRlcyhAc3ByaXRlcywgQGkgKyAxKTtcbn1cbiIsIi5iYW5uZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vYXNzZXRzL2ltZy9iZy5qcGdcIik7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAmLWJsb2NrIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgcGFkZGluZy10b3A6IDE1cHg7XG4gICAgXG4gICAgICAgIC5wYWdlX190aXRsZS1oMSB7XG4gICAgICAgIH1cbiAgICAgICAgJi1pbmZvIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDI1cHg7XG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJAe1BUU2Fuc30tQm9sZFwiO1xuICAgICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwIDEwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmX19pY29uLWNlbGVuZGVyLCAmX19pY29uLW1hcmstbWFwIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTVweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmX19pY29uLWNlbGVuZGVyIHtcbiAgICAgICAgICAgICAgICAuc3ByaXRlKEBpY29uLWNlbGVuZGVyLW9yYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmX19pY29uLW1hcmstbWFwIHtcbiAgICAgICAgICAgICAgICAuc3ByaXRlKEBpY29uLW1hcmstbWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAmLXRleHQge1xuICAgICAgICAgICAgbWFyZ2luOiAyNXB4IGF1dG8gMzVweDtcbiAgICAgICAgICAgIC5zaXplKDEwKTtcbiAgICAgICAgICAgIC5zaXplLXhzKDEyKTtcbiAgICAgICAgICAgIC5hbmltYXRlZCh7XG4gICAgICAgICAgICAgICAgLmRlbGF5KDFzKTtcbiAgICAgICAgICAgICAgICAuZmFkZUluKCk7XG4gICAgICAgICAgICAgICAgLy8uc2xvdygpO1xuICAgICAgICAgICAgICAgIC8vLmRlbGF5KDEycyk7XG4gICAgICAgICAgICAgICAgLy8uaW5maW5pdGUoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgJi1idG4ge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNTBweDtcbiAgICAgICAgICAgIC5zc20oZmxleC13cmFwLCB3cmFwKTtcbiAgICAgICAgICAgIC5wYWdlX19idG4ge1xuICAgICAgICAgICAgICAgIC5jb2woKTtcbiAgICAgICAgICAgICAgICAuc2l6ZSgzKTtcbiAgICAgICAgICAgICAgICAuc2l6ZS1zc20oNyk7XG4gICAgICAgICAgICAgICAgLnNpemUteHMoMTIpO1xuICAgICAgICAgICAgICAgIC5zc20obWFyZ2luLWJvdHRvbSwgMTVweCk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9XG4gICAgICAgICYtY291bnRlciB7XG4gICAgICAgICAgICAuc2l6ZSg3KTtcbiAgICAgICAgICAgIC5zaXplLXNtKDEyKTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgICAgICBtYXJnaW46IDAgYXV0byAtNzBweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IEBjb2xvcl9vcmFuZ2U7XG4gICAgICAgICAgICBwYWRkaW5nOiAyNXB4IDUwcHg7XG4gICAgICAgICAgICAuc20ocGFkZGluZywgMjVweCk7XG4gICAgICAgICAgICAueHMoZGlzcGxheSwgbm9uZSk7XG4gICAgICAgICAgICAmX19pdGVtIHtcbiAgICAgICAgICAgICAgICAuY29sKCk7XG4gICAgICAgICAgICAgICAgLnNpemUoMyk7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCBAY29sb3Jfd2hpdGU7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTAlO1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDI1cHggMDtcbiAgICAgICAgICAgICAgICAmX251bWJlciB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiQHtQVFNhbnN9LUJvbGRcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJl90ZXh0IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgICZfb3BhY2l0eSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgIH1cbn0iLCIuYWJvdXQtZXZlbnQge1xuXG4gICAgJi1ibG9rIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDgwcHg7XG4gICAgICAgIFxuICAgIH1cblxuICAgICZfX3dyYXBwZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgIH1cblxuICAgICZfX2xlZnQge1xuICAgICAgICBwYWRkaW5nLXRvcDogMTYwcHg7XG4gICAgICAgIC8vcGFkZGluZy1sZWZ0OiAyNTBweDtcbiAgICAgICAgLmNvbCgpO1xuICAgICAgICAuc2l6ZSg2KTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICAgICAgICBcbiAgICB9XG5cbiAgICAmX190aXRsZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMjVweDtcbiAgICAgICAgY29sb3I6IEBjb2xvcl9ncmVlbjtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgZm9udC1mYW1pbHk6IFwiQHtQVFNhbnN9LUJvbGRcIjtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDMwcHg7XG4gICAgICAgIC5zaXplKDYpO1xuICAgIH1cblxuICAgICZfX3RleHRfMiB7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA0MHB4O1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgIGNvbG9yOiBAY29sb3JfZ3JheXR3bztcbiAgICAgICAgd2lkdGg6IDQ2MHB4O1xuICAgICAgICBcbiAgICB9XG5cbiAgICAmX190ZXh0XzMge1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgIGNvbG9yOiBAY29sb3JfZ3JheXR3bztcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDQwcHg7XG4gICAgICAgIHdpZHRoOiA0MDFweDtcbiAgICB9XG5cbiAgICAmX19yaWdodCB7XG4gICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgIGhlaWdodDogMzc1cHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IEBjb2xvcl9ncmF5O1xuICAgICAgICBtYXJnaW4tdG9wOiAxNTBweDtcbiAgICAgICAgd2lkdGg6IDQwMHB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAuY29sKCk7XG4gICAgICAgIC5zaXplKDYpO1xuICAgIH1cblxuICAgICZfX2ljb24tbWFwIHtcbiAgICAgICAgLnNwcml0ZShAaWNvbi1tYXJrLW1hcCk7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdG9wOiAyMHB4O1xuICAgICAgICBsZWZ0OiAyMHB4O1xuICAgIH1cblxuICAgICZfX2ljb24tY2VsZW5kZXIge1xuICAgICAgICAuc3ByaXRlKEBpY29uLWNlbGVuZGVyLW9yYW5nZSk7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdG9wOiAyMHB4O1xuICAgICAgICBsZWZ0OiAyMHB4O1xuICAgIH1cblxuICAgICZfX2ljb24tbWljcm9waG9uZXtcbiAgICAgICAgLnNwcml0ZShAaWNvbi1taWNyb2Zvbik7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdG9wOiAyMHB4O1xuICAgICAgICBsZWZ0OiAyMHB4O1xuICAgIH1cblxuICAgICZfX2ljb24tbWFucGx1cyB7XG4gICAgICAgIC5zcHJpdGUoQGljb24tbWFucGx1cyk7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdG9wOiAyMHB4O1xuICAgICAgICBsZWZ0OiAyMHB4O1xuICAgIH1cblxuICAgICZfX2Jsb2tfMSwgJl9fYmxva18yLCAmX19ibG9rXzMsICZfX2Jsb2tfNCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgfVxuXG4gICAgJl9fdGV4dF80IHtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xuICAgICAgICAvL3BhZGRpbmctYm90dG9tOiAyMnB4O1xuICAgICAgICBmb250LWZhbWlseTogXCJAe1BUU2Fuc30tQm9sZFwiO1xuICAgIH1cblxuICAgICZfX3RleHRfNSB7XG4gICAgICAgIC8vZm9udC1mYW1pbHk6IFwiQHtQVFNhbnN9LVJlZ3VsYXJcIjtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xuICAgICAgICBjb2xvcjogIzg4ODg4ODtcbiAgICB9XG5cbn0iLCIucHJlc2VudGF0aW9uIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAY29sb3JfZ3JheTtcbiAgICBtYXgtaGVpZ2h0OiA1NDNweDtcbiAgICBtYXJnaW4tdG9wOiA4MHB4O1xuICAgIHBhZGRpbmctdG9wOiA4MHB4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIC8vLnBhZ2VfX3RpdGxlLWgyLCAucGFnZV9fdGV4dCB7XG4gICAgICAgIC8vdGV4dC1hbGlnbjogY2VudGVyO1xuICAgLy99XG5cbiAgICAvLy5wYWdlX190aXRsZS1oMiB7XG4gICAgLy8gICAgcGFkZGluZy1ib3R0b206IDMwcHg7XG4gICAvLyB9XG4gICAgLnBhZ2VfX3RleHQge1xuICAgICAgICAuc2l6ZSg4KTtcbiAgICAgICAgLnNpemUteHMoMTIpO1xuICAgICAgICAueHMocGFkZGluZywgMjBweCAwKTtcbiAgICAgICAgLy9tYXJnaW46IDQwcHggYXV0byAzMHB4O1xuICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgICAgcGFkZGluZzogNDBweCAzMHB4O1xuICAgICAgICBjb2xvcjogIzc3NztcbiAgICB9XG4gICAgLnBhZ2VfX2J0biB7XG4gICAgICAgIC5zaXplKDMpO1xuICAgICAgICBtYXJnaW46IDAgYXV0byA1MHB4O1xuICAgICAgICAuc2l6ZS14cygxMik7XG4gICAgfVxuICAgIFxuICAgIC5wYWdlX19pbWcge1xuICAgICAgICBtYXJnaW4tbGVmdDogMzBweDtcbiAgICAgICAgLnhzKGRpc3BsYXksIG5vbmUpO1xuICAgIH1cbn0iLCIuZXZlbnQge1xuICAgIHBhZGRpbmc6IDc1cHggMDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgLnBhZ2VfX3RpdGxlLWgyIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjVweDtcbiAgICB9XG4gICAgLnNvY2lhbF9faWNvbiB7XG4gICAgICAgIGZpbHRlcjogaW52ZXJ0KDAuNyk7XG4gICAgfVxufSIsIi5pdGVtcy1ibG9jayB7XG4gICAgLnJvdy1mbGV4KCk7XG4gICAgLml0ZW0ge1xuICAgICAgICAuY29sKCk7XG4gICAgICAgIC5zaXplKDMpO1xuICAgICAgICAuc2l6ZS1zbSg2KTtcbiAgICAgICAgLnNpemUtc3NtKDEyKTtcbiAgICAgICAgLnNtLWJsb2NrKHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDtcbiAgICAgICAgfSk7XG4gICAgICAgICZfX2ltZyB7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgIG1heC1oZWlnaHQ6IDIyMHB4O1xuICAgICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC41cztcbiAgICAgICAgICAgICAgICAmOmhvdmVye1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9ib3JkZXI6IDFweCBzb2xpZDtcbiAgICAgICAgfVxuICAgICAgICAmX19uYW1lIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBcIkB7UFRTYW5zfS1Cb2xkXCI7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiA1cHg7XG4gICAgICAgICAgICBjb2xvcjogIzQ0NDtcbiAgICAgICAgfVxuICAgICAgICAmX19zcGVjbmFtZSB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICBjb2xvcjogIzg4ODtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4cHg7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLnNvY2lhbCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAmX19pY29uIHtcbiAgICAgICAgbWFyZ2luOiAwIDhweDsgXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICAgICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgICAgfSBcbiAgICAgICAgJl9mYiwgXG4gICAgICAgICZfdHcsXG4gICAgICAgICZfaW5zdCxcbiAgICAgICAgJl92aW1lbyxcbiAgICAgICAgJl9nb29nbGUge1xuICAgICAgICAgICAgZmlsdGVyOiBpbnZlcnQoMSk7XG4gICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGludmVydCgwKTtcbiAgICAgICAgICAgICAgICAvL2ZpbHRlcjogaW52ZXJ0KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICZfZmIge1xuICAgICAgICAgICAgLnNwcml0ZShAaWNvbi1mYWNlYm9vay1ibGFjayk7XG4gICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAuc3ByaXRlKEBpY29uLWZhY2Vib29rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICAgICAgJl90dyB7XG4gICAgICAgICAgICAuc3ByaXRlKEBpY29uLXR3aXR0ZXItYmxhY2spO1xuICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgLnNwcml0ZShAaWNvbi10d2l0dGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgICBcbiAgICAgICAgJl9pbnN0IHtcbiAgICAgICAgICAgIC5zcHJpdGUoQGljb24taW5zdGFncmFtLWJsYWNrKTtcbiAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgIC5zcHJpdGUoQGljb24taW5zdGFncmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgICBcbiAgICAgICAgJl92aW1lbyB7XG4gICAgICAgICAgICAuc3ByaXRlKEBpY29uLXZpbWVvLWJsYWNrKTtcbiAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgIC5zcHJpdGUoQGljb24tdmltZW8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICAgIFxuICAgICAgICAmX2dvb2dsZSB7XG4gICAgICAgICAgICAuc3ByaXRlKEBpY29uLWdvb2dsZS1wbHVzLWJsYWNrKTtcbiAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgIC5zcHJpdGUoQGljb24tZ29vZ2xlLXBsdXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICAgICAgIFxuICAgIH1cbn0iLCIuZGVidWdHcmlke1xuICAgIC5kZWJ1ZyhyZ2JhKDAsIDAsIDAsIDAuNCksIDFweCBzb2xpZCAjZmYwKTtcbiAgICAuZGVidWdCdG4oKTtcbn0iLCIuZGVidWdCdG4oKSB7XG4gICAgJi1idG4ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICB3aWR0aDogNTBweDtcbiAgICAgICAgaGVpZ2h0OiA1MHB4O1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmYwO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcblxuICAgICAgICAmaGlkZGVuIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAmOmJlZm9yZSxcbiAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMwMDA7XG4gICAgICAgIH1cblxuICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICB3aWR0aDogMjVweDtcbiAgICAgICAgICAgIGhlaWdodDogMnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgJmNyZWF0ZSB7XG4gICAgICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMnB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAmX196LWluZGV4LW5lZ2F0aXZlIHtcbiAgICAgICAgei1pbmRleDogLTE7XG4gICAgfVxufSJdfQ== */
