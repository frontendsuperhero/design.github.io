@charset "UTF-8";

/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/

body,
div,
dl,
dt,
dd,
ul,
li,
h1,
h2,
h3,
h4,
h5,
h6,
pre,
code,
form,
fieldset,
input,
textarea,
p,
blockquote,
th,
td {
  margin: 0;
  padding: 0;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

fieldset,
img,
abbr {
  border: 0;
}

address,
caption,
cite,
code,
dfn,
em,
strong,
th,
var {
  font-style: normal;
  font-weight: normal;
}

ul li {
  list-style: none;
}

caption,
th {
  text-align: left;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: 100%;
  font-weight: normal;
}

sup {
  vertical-align: text-top;
}

sub {
  vertical-align: text-bottom;
}

input,
textarea,
select {
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
}

legend {
  color: #000;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section,
main {
  display: block;
}

img {
  max-width: 100%;
  height: auto;
}

.wrapper {
  max-width: 940px;
  margin: 0 auto;
  padding-left: 60px;
  padding-right: 60px;
}

@font-face {
  font-family: 'OpenSans-Regular';
  src: url('../../fonts/OpenSans/OpenSans-Regular.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'PTSans-Bold';
  src: url('../../fonts/PTSans/PTSans-Bold.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

body {
  font-family: 'OpenSans-Regular';
  padding: 0;
  margin: 0;
}

a,
button {
  cursor: pointer;
}

a:focus,
button:focus {
  outline: none;
}

a {
  text-decoration: none;
  color: inherit;
}

input {
  cursor: text;
}

input:focus {
  outline: none;
}

.page__title-h1,
.page__title-h2 {
  font-family: "PTSans-Bold";
  color: #0abb0e;
  text-transform: uppercase;
  line-height: 40px;
  letter-spacing: 1px;
}

.page__title-h1 {
  font-size: 45px;
}

.page__title-h2 {
  font-size: 25px;
  color: #0abb0e;
}

.page__title-h2_white {
  color: white;
}

.page__btn {
  cursor: pointer;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  -webkit-box-align: center;
          align-items: center;
  text-decoration: none;
  border-radius: 5px;
  height: 68px;
  font-size: 20px;
  letter-spacing: 1px;
  line-height: 30px;
  font-family: 'PTSans-Bold';
  text-transform: uppercase;
  border: none;
  color: #ffffff;
  background-color: #7e3cf9;
  border: 1px solid #7e3cf9;
}

.page__btn:hover {
  color: #262626;
  background-color: #ffffff;
  -webkit-transition: all ease-out 0.5s;
  transition: all ease-out 0.5s;
}

.page__btn_2 {
  cursor: pointer;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  -webkit-box-align: center;
          align-items: center;
  text-decoration: none;
  width: 240px;
  border-radius: 5px;
  height: 68px;
  font-size: 20px;
  letter-spacing: 1px;
  line-height: 30px;
  font-family: 'PTSans-Bold';
  text-transform: uppercase;
  border: none;
  color: #ffffff;
  background-color: #7e3cf9;
  border: 1px solid #7e3cf9;
}

.page__btn_2:hover {
  color: #262626;
  background-color: #ffffff;
  -webkit-transition: all ease-out 0.5s;
  transition: all ease-out 0.5s;
}

.page__btn_3 {
  cursor: pointer;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  -webkit-box-align: center;
          align-items: center;
  text-decoration: none;
  width: 240px;
  border-radius: 5px;
  height: 68px;
  font-size: 20px;
  letter-spacing: 1px;
  line-height: 30px;
  font-family: 'PTSans-Bold';
  text-transform: uppercase;
  border: none;
  color: #ffffff;
  background-color: #7e3cf9;
  border: 1px solid #7e3cf9;
}

.page__btn_3:hover {
  color: #262626;
  background-color: #ffffff;
  -webkit-transition: all ease-out 0.5s;
  transition: all ease-out 0.5s;
}

.page__text {
  font-size: 16px;
  line-height: 30px;
  letter-spacing: 1px;
}

.header {
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  margin-left: -10px;
  margin-right: -10px;
  color: #ffffff;
  -webkit-box-align: center;
          align-items: center;
}

.header-logo {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(50% - 20px);
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center;
}

.header-logo__icon {
  background-image: url(../assets/icons/sprite.png);
  background-position: 0px 0px;
  width: 43px;
  height: 41px;
}

.header-logo__text {
  font-family: "PTSans-Bold";
  margin-left: 10px;
  font-size: 25px;
}

.header-social {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(50% - 20px);
}

.header-social .social {
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: end;
          justify-content: flex-end;
}

.header-social .social__icon {
  margin: 0 8px;
  border-radius: 2px;
}

.header-social .social__icon:last-child {
  margin-right: 0;
}

.header-social .social__icon_fb,
.header-social .social__icon_tw,
.header-social .social__icon_inst,
.header-social .social__icon_vimeo,
.header-social .social__icon_google {
  -webkit-filter: invert(1);
          filter: invert(1);
}

.header-social .social__icon_fb:hover,
.header-social .social__icon_tw:hover,
.header-social .social__icon_inst:hover,
.header-social .social__icon_vimeo:hover,
.header-social .social__icon_google:hover {
  -webkit-filter: invert(0);
          filter: invert(0);
}

.header-social .social__icon_fb {
  background-image: url(../assets/icons/sprite.png);
  background-position: -51px -51px;
  width: 16px;
  height: 16px;
}

.header-social .social__icon_fb:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -87px 0px;
  width: 16px;
  height: 16px;
}

.header-social .social__icon_tw {
  background-image: url(../assets/icons/sprite.png);
  background-position: -52px -80px;
  width: 16px;
  height: 16px;
}

.header-social .social__icon_tw:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -78px -80px;
  width: 16px;
  height: 16px;
}

.header-social .social__icon_inst {
  background-image: url(../assets/icons/sprite.png);
  background-position: 0px -80px;
  width: 16px;
  height: 16px;
}

.header-social .social__icon_inst:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -26px -80px;
  width: 16px;
  height: 16px;
}

.header-social .social__icon_vimeo {
  background-image: url(../assets/icons/sprite.png);
  background-position: -113px 0px;
  width: 16px;
  height: 16px;
}

.header-social .social__icon_vimeo:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -113px -26px;
  width: 16px;
  height: 16px;
}

.header-social .social__icon_google {
  background-image: url(../assets/icons/sprite.png);
  background-position: -87px -26px;
  width: 16px;
  height: 16px;
}

.header-social .social__icon_google:hover {
  background-image: url(../assets/icons/sprite.png);
  background-position: -87px -52px;
  width: 16px;
  height: 16px;
}

.header-social .icon {
  width: 15px;
  height: 15px;
  margin-right: 10px;
  background-color: #fff;
}

.header-social .icon:last-child {
  margin-right: 0px;
}

.header-block {
  position: fixed;
  width: 100%;
  z-index: 2;
}

.banner {
  position: relative;
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
  -webkit-box-pack: center;
          justify-content: center;
  background-image: url("../assets/img/bg.jpg");
  background-repeat: no-repeat;
  background-size: cover;
  text-align: center;
}

.banner-block {
  position: relative;
  color: #fff;
  padding-top: 15px;
}

.banner-block-info {
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  font-size: 20px;
  margin-top: 25px;
  font-family: "PTSans-Bold";
}

.banner-block-info div {
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center;
  margin: 0 10px;
}

.banner-block-info__icon-celender,
.banner-block-info__icon-mark-map {
  width: 15px;
  height: 15px;
}

.banner-block-info__icon-celender {
  background-image: url(../assets/icons/sprite.png);
  background-position: 0px -51px;
  width: 17px;
  height: 19px;
}

.banner-block-info__icon-mark-map {
  background-image: url(../assets/icons/sprite.png);
  background-position: -113px -52px;
  width: 12px;
  height: 16px;
}

.banner-block-text {
  margin: 25px auto 35px;
  width: calc(83.33333333333334% - 20px);
  -webkit-animation-duration: 1s;
  animation-duration: 1s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
  -webkit-animation-name: fadeIn;
  animation-name: fadeIn;
}

@-webkit-keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

.banner-block-btn {
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  margin-bottom: 50px;
}

.banner-block-btn .page__btn {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(25% - 20px);
}

.banner-block-counter {
  width: calc(58.333333333333336% - 20px);
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  margin: 0 auto -70px;
  background-color: #ff8a01;
  padding: 25px 50px;
}

.banner-block-counter__item {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(25% - 20px);
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
  border: 2px solid #ffffff;
  border-radius: 10%;
  padding: 25px 0;
}

.banner-block-counter__item_number {
  font-size: 22px;
  font-family: "PTSans-Bold";
}

.banner-block-counter__item_text {
  font-size: 16px;
}

.banner_opacity {
  width: 100%;
  height: 100%;
  position: absolute;
  background-color: rgba(0, 0, 0, 0.5);
}

.about-event-blok {
  display: -webkit-box;
  display: flex;
  padding-bottom: 80px;
}

.about-event__wrapper {
  display: -webkit-box;
  display: flex;
}

.about-event__left {
  padding-top: 160px;
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(50% - 20px);
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
}

.about-event__title {
  font-size: 25px;
  color: #0abb0e;
  text-transform: uppercase;
  font-family: "PTSans-Bold";
  padding-bottom: 30px;
  width: calc(50% - 20px);
}

.about-event__text_2 {
  padding-bottom: 40px;
  font-size: 16px;
  color: #666666;
  width: 460px;
}

.about-event__text_3 {
  font-size: 16px;
  color: #666666;
  padding-bottom: 40px;
  width: 401px;
}

.about-event__right {
  width: 50%;
  height: 375px;
  background-color: #f5f5f5;
  margin-top: 150px;
  width: 400px;
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(50% - 20px);
}

.about-event__icon-map {
  background-image: url(../assets/icons/sprite.png);
  background-position: -113px -52px;
  width: 12px;
  height: 16px;
  position: relative;
  top: 20px;
  left: 20px;
}

.about-event__icon-celender {
  background-image: url(../assets/icons/sprite.png);
  background-position: 0px -51px;
  width: 17px;
  height: 19px;
  position: relative;
  top: 20px;
  left: 20px;
}

.about-event__icon-microphone {
  background-image: url(../assets/icons/sprite.png);
  background-position: -27px -51px;
  width: 14px;
  height: 19px;
  position: relative;
  top: 20px;
  left: 20px;
}

.about-event__icon-manplus {
  background-image: url(../assets/icons/sprite.png);
  background-position: -53px 0px;
  width: 24px;
  height: 19px;
  position: relative;
  top: 20px;
  left: 20px;
}

.about-event__blok_1,
.about-event__blok_2,
.about-event__blok_3,
.about-event__blok_4 {
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
}

.about-event__text_4 {
  font-weight: bold;
  font-size: 20px;
  padding-left: 50px;
  font-family: "PTSans-Bold";
}

.about-event__text_5 {
  padding-left: 50px;
  color: #888888;
}

.presentation {
  background-color: #f5f5f5;
  max-height: 543px;
  margin-top: 80px;
  padding-top: 80px;
  overflow: hidden;
  text-align: center;
}

.presentation .page__text {
  width: calc(66.66666666666667% - 20px);
  margin: 0 auto;
  padding: 40px 30px;
  color: #777;
}

.presentation .page__btn {
  width: calc(25% - 20px);
  margin: 0 auto 50px;
}

.presentation .page__img {
  margin-left: 30px;
}

.debugGrid {
  height: 100vh;
  position: fixed;
  width: 100%;
}

.debugGrid > div {
  height: inherit;
  max-width: 940px;
  margin: 0 auto;
  padding-left: 60px;
  padding-right: 60px;
}

.debugGrid > div > div {
  height: inherit;
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  margin-left: -10px;
  margin-right: -10px;
}

.debugGrid > div > div > div {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 10px;
  margin-right: 10px;
  width: calc(8.333333333333334% - 20px);
  height: inherit;
  outline: 1px solid #ff0;
  background: rgba(0, 0, 0, 0.4);
}

.debugGrid-btn {
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  position: fixed;
  right: 0;
  bottom: 0;
  width: 50px;
  height: 50px;
  border: 1px solid #ff0;
  border-radius: 50%;
  z-index: 1;
  background: rgba(0, 0, 0, 0.4);
}

.debugGrid-btnhidden {
  display: none;
}

.debugGrid-btn:before,
.debugGrid-btn:after {
  content: '';
  align-self: center;
  background: #000;
}

.debugGrid-btn:before {
  width: 25px;
  height: 2px;
}

.debugGrid-btncreate:after {
  width: 2px;
  height: 25px;
  position: absolute;
}

.debugGrid__z-index-negative {
  z-index: -1;
}

@media screen and (max-width: 992px) {
  .banner-block-counter {
    width: calc(100% - 20px);
  }

  .banner-block-counter {
    padding: 25px;
  }
}

@media screen and (max-width: 768px) {
  .banner-block-btn {
    flex-wrap: wrap;
  }

  .banner-block-btn .page__btn {
    width: calc(58.333333333333336% - 20px);
  }

  .banner-block-btn .page__btn {
    margin-bottom: 15px;
  }
}

@media screen and (max-width: 576px) {
  .wrapper {
    padding-left: 5px;
    padding-right: 5px;
  }

  .header {
    margin-left: -5px;
    margin-right: -5px;
  }

  .header-logo {
    margin-left: 5px;
    margin-right: 5px;
  }

  .header-social {
    margin-left: 5px;
    margin-right: 5px;
  }

  .banner-block-text {
    width: calc(100% - 10px);
  }

  .banner-block-btn .page__btn {
    margin-left: 5px;
    margin-right: 5px;
  }

  .banner-block-btn .page__btn {
    width: calc(100% - 10px);
  }

  .banner-block-counter {
    display: none;
  }

  .banner-block-counter__item {
    margin-left: 5px;
    margin-right: 5px;
  }

  .about-event__left {
    margin-left: 5px;
    margin-right: 5px;
  }

  .about-event__right {
    margin-left: 5px;
    margin-right: 5px;
  }

  .presentation .page__text {
    width: calc(100% - 10px);
  }

  .presentation .page__text {
    padding: 20px 0;
  }

  .presentation .page__btn {
    width: calc(100% - 10px);
  }

  .presentation .page__img {
    display: none;
  }

  .debugGrid > div {
    padding-left: 5px;
    padding-right: 5px;
  }

  .debugGrid > div {
    padding-left: 5px;
    padding-right: 5px;
  }

  .debugGrid > div > div {
    margin-left: -5px;
    margin-right: -5px;
  }

  .debugGrid > div > div > div {
    margin-left: 5px;
    margin-right: 5px;
  }

  .debugGrid > div > div > div {
    width: calc(8.333333333333334% - 10px);
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdGlvbi9hbmltYXRpb24ubGVzcyIsInN0eWxlcy5jc3MiLCJzbWFydGdyaWQvc21hcnQtZ3JpZC5sZXNzIiwiYmxvY2tzL2Jhc2UubGVzcyIsImZvbnRzL2ZvbnRzLmxlc3MiLCJibG9ja3MvcGFnZS5sZXNzIiwiYmxvY2tzL2hlYWRlci5sZXNzIiwic3ByaXRlL3Nwcml0ZS5sZXNzIiwiYmxvY2tzL2Jhbm5lci5sZXNzIiwiYmxvY2tzL2Fib3V0LWV2ZW50Lmxlc3MiLCJibG9ja3MvcHJlc2VudGF0aW9uLmxlc3MiLCJibG9ja3MvZGVidWcubGVzcyIsIm1peGlucy9kZWJ1Z0J0bi1taXhpbi5sZXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFTOztBQ0VUOzs7Ozs7Ozs7Ozs7Q0FZQzs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBd0JDOztBQUVEOzs7Ozs7OztDQ3NYYTs7QUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFLWCxTQUFBO0VBQ0EsVUFBQTtBRHpWUjs7QUMyVmE7RUFBSSx5QkFBQTtFQUNULGlCQUFBO0FEdlZSOztBQ3lWWTs7O0VBQWtCLFNBQUE7QUFBSTs7QUFBVTs7Ozs7Ozs7O0VBT2hDLGtCQUFBO0VBQ0osbUJBQUE7QUQ5VVI7O0FDZ1ZPO0VBQUcsZ0JBQUE7QUFBRzs7QUFBTTs7RUFFWCxnQkFBQTtBRHpVUjs7QUFFQTs7Ozs7O0VDK1VVLGVBQUE7RUFBUyxtQkFBQTtBRHZVbkI7O0FBRUE7RUFDRSx3QkFBd0I7QUN5VXRCOztBRHRVSjtFQ3lVSSwyQkFBQTtBQUFROztBQUFjOzs7RUFBeUIsb0JBQUE7RUFBTyxrQkFBQTtFQUFPLG9CQUFBO0FBQUs7O0FBQVk7RUFDMUUsV0FBQTtBRDVUUjs7QUFFQTs7Ozs7Ozs7Ozs7O0VBWUUsY0MxSE07QUQySFI7O0FFbEpBO0VDUkksZUFBYTtFQUNiLFlBQVM7QUg4SmI7O0FBRUE7RUVySkEsZ0JBQUE7RUNaSSxjQUFhO0VBQ2Isa0JBQVM7RUFDVCxt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RSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0Usd0JBQXdCO0VBQzFCOztFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLHdCQUF3QjtFQUMxQjs7RUFFQTtJQUNFLGFBQWE7RUFDZjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixpQkFBaUI7RUFDbkI7O0VBRUE7SUFDRSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLHdCQUF3QjtFQUMxQjs7RUFFQTtJQUNFLGVBQWU7RUFDakI7O0VBRUE7SUFDRSx3QkFBd0I7RUFDMUI7O0VBRUE7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxpQkFBaUI7SUFDakIsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsaUJBQWlCO0lBQ2pCLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGlCQUFpQjtJQUNqQixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0Usc0NBQXNDO0VBQ3hDO0FBQ0YiLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcclxuXHJcbi8vIGh0dHBzOi8vZGFuZWRlbi5naXRodWIuaW8vYW5pbWF0ZS5jc3MvXHJcbi5hbmltYXRlZChAY29udGVudCkge1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDFzO1xyXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAxcztcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcclxuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XHJcbiAgICBAY29udGVudCgpO1xyXG59XHJcblxyXG4uZGVsYXkoQHMpIHtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiBAcztcclxuICAgIGFuaW1hdGlvbi1kZWxheTogQHM7XHJcbn1cclxuXHJcbi5mYXN0KCkge1xyXG4gICAgLmRlbGF5KDgwMG1zKTtcclxufVxyXG5cclxuLmZhc3RlcigpIHtcclxuICAgIC5kZWxheSg1MDBtcyk7XHJcbn1cclxuXHJcbi5pbmZpbml0ZSgpIHtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XHJcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcclxufVxyXG5cclxuLnNsb3coKSB7XHJcbiAgICAuZGVsYXkoMnMpO1xyXG59XHJcblxyXG4uc2xvd2VyKCkge1xyXG4gICAgLmRlbGF5KDNzKTtcclxufVxyXG5cclxuLmJvdW5jZSgpIHtcclxuICAgIEBrZXlmcmFtZXMgYm91bmNlIHtcclxuXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICAyMCUsXHJcbiAgICAgICAgNTMlLFxyXG4gICAgICAgIDgwJSxcclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0MCUsXHJcbiAgICAgICAgNDMlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NTUsIDAuMDUsIDAuODU1LCAwLjA2KTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNzU1LCAwLjA1LCAwLjg1NSwgMC4wNik7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNzAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NTUsIDAuMDUsIDAuODU1LCAwLjA2KTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNzU1LCAwLjA1LCAwLjg1NSwgMC4wNik7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTVweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTE1cHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgOTAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC00cHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC00cHgsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBib3VuY2U7XHJcbiAgICBhbmltYXRpb24tbmFtZTogYm91bmNlO1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgYm90dG9tO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGJvdHRvbTtcclxufVxyXG5cclxuLmJvdW5jZUluKCkge1xyXG4gICAgQGtleWZyYW1lcyBib3VuY2VJbiB7XHJcblxyXG4gICAgICAgIGZyb20sXHJcbiAgICAgICAgMjAlLFxyXG4gICAgICAgIDQwJSxcclxuICAgICAgICA2MCUsXHJcbiAgICAgICAgODAlLFxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuMywgMC4zLCAwLjMpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC4zLCAwLjMsIDAuMyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAyMCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLjEsIDEuMSwgMS4xKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEuMSwgMS4xLCAxLjEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC45LCAwLjksIDAuOSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjksIDAuOSwgMC45KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEuMDMsIDEuMDMsIDEuMDMpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMS4wMywgMS4wMywgMS4wMyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA4MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjk3LCAwLjk3LCAwLjk3KTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuOTcsIDAuOTcsIDAuOTcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMC43NXM7XHJcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDAuNzVzO1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogYm91bmNlSW47XHJcbiAgICBhbmltYXRpb24tbmFtZTogYm91bmNlSW47XHJcbn1cclxuXHJcbi5ib3VuY2VJbkRvd24oKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGJvdW5jZUluRG93biB7XHJcblxyXG4gICAgICAgIGZyb20sXHJcbiAgICAgICAgNjAlLFxyXG4gICAgICAgIDc1JSxcclxuICAgICAgICA5MCUsXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMDAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMDAwcHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDI1cHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDI1cHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNzUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTBweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA5MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgNXB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCA1cHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGJvdW5jZUluRG93bjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VJbkRvd247XHJcbn1cclxuXHJcbi5ib3VuY2VJbkxlZnQoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGJvdW5jZUluTGVmdCB7XHJcblxyXG4gICAgICAgIGZyb20sXHJcbiAgICAgICAgNjAlLFxyXG4gICAgICAgIDc1JSxcclxuICAgICAgICA5MCUsXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0zMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0zMDAwcHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDI1cHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDI1cHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNzUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTBweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA5MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoNXB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCg1cHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGJvdW5jZUluTGVmdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VJbkxlZnQ7XHJcbn1cclxuXHJcbi5ib3VuY2VJblJpZ2h0KCkge1xyXG4gICAgQGtleWZyYW1lcyBib3VuY2VJblJpZ2h0IHtcclxuXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICA2MCUsXHJcbiAgICAgICAgNzUlLFxyXG4gICAgICAgIDkwJSxcclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgzMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDMwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTI1cHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0yNXB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDc1JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDkwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtNXB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtNXB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBib3VuY2VJblJpZ2h0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGJvdW5jZUluUmlnaHQ7XHJcbn1cclxuXHJcbi5ib3VuY2VJblVwKCkge1xyXG4gICAgQGtleWZyYW1lcyBib3VuY2VJblVwIHtcclxuXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICA2MCUsXHJcbiAgICAgICAgNzUlLFxyXG4gICAgICAgIDkwJSxcclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAzMDAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDMwMDBweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMHB4LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDc1JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAxMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAxMHB4LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDkwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtNXB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtNXB4LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogYm91bmNlSW5VcDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VJblVwO1xyXG59XHJcblxyXG4uYm91bmNlT3V0KCkge1xyXG4gICAgQGtleWZyYW1lcyBib3VuY2VPdXQge1xyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuOSwgMC45LCAwLjkpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC45LCAwLjksIDAuOSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUsXHJcbiAgICAgICAgNTUlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMS4xLCAxLjEsIDEuMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLjEsIDEuMSwgMS4xKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC4zLCAwLjMsIDAuMyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjMsIDAuMywgMC4zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDAuNzVzO1xyXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjc1cztcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGJvdW5jZU91dDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VPdXQ7XHJcbn1cclxuXHJcbi5ib3VuY2VPdXREb3duKCkge1xyXG4gICAgQGtleWZyYW1lcyBib3VuY2VPdXREb3duIHtcclxuICAgICAgICAyMCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTBweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0MCUsXHJcbiAgICAgICAgNDUlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMjBweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAyMDAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDIwMDBweCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGJvdW5jZU91dERvd247XHJcbiAgICBhbmltYXRpb24tbmFtZTogYm91bmNlT3V0RG93bjtcclxufVxyXG5cclxuLmJvdW5jZU91dExlZnQoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGJvdW5jZU91dExlZnQge1xyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgyMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgyMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0yMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0yMDAwcHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogYm91bmNlT3V0TGVmdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VPdXRMZWZ0O1xyXG59XHJcblxyXG4uYm91bmNlT3V0UmlnaHQoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGJvdW5jZU91dFJpZ2h0IHtcclxuICAgICAgICAyMCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTIwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0yMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogYm91bmNlT3V0UmlnaHQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogYm91bmNlT3V0UmlnaHQ7XHJcbn1cclxuXHJcbi5ib3VuY2VPdXRVcCgpIHtcclxuICAgIEBrZXlmcmFtZXMgYm91bmNlT3V0VXAge1xyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwcHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDAlLFxyXG4gICAgICAgIDQ1JSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAyMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAyMHB4LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMDAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMDAwcHgsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBib3VuY2VPdXRVcDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VPdXRVcDtcclxufVxyXG5cclxuLmZhZGVJbigpIHtcclxuICAgIEBrZXlmcmFtZXMgZmFkZUluIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVJbjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlSW47XHJcbn1cclxuXHJcbi5mYWRlSW5Eb3duKCkge1xyXG4gICAgQGtleWZyYW1lcyBmYWRlSW5Eb3duIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMDAlLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTAwJSwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVJbkRvd247XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZUluRG93bjtcclxufVxyXG5cclxuLmZhZGVJbkRvd25CaWcoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVJbkRvd25CaWcge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwMDBweCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZUluRG93bkJpZztcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlSW5Eb3duQmlnO1xyXG59XHJcblxyXG4uZmFkZUluTGVmdCgpIHtcclxuICAgIEBrZXlmcmFtZXMgZmFkZUluTGVmdCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVJbkxlZnQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZUluTGVmdDtcclxufVxyXG5cclxuLmZhZGVJbkxlZnRCaWcoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVJbkxlZnRCaWcge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZUluTGVmdEJpZztcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlSW5MZWZ0QmlnO1xyXG59XHJcblxyXG4uZmFkZUluUmlnaHQoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVJblJpZ2h0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlSW5SaWdodDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlSW5SaWdodDtcclxufVxyXG5cclxuLmZhZGVJblJpZ2h0QmlnKCkge1xyXG4gICAgQGtleWZyYW1lcyBmYWRlSW5SaWdodEJpZyB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgyMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZUluUmlnaHRCaWc7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZUluUmlnaHRCaWc7XHJcbn1cclxuXHJcbi5mYWRlSW5VcCgpIHtcclxuICAgIEBrZXlmcmFtZXMgZmFkZUluVXAge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTAwJSwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMTAwJSwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZUluVXA7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZUluVXA7XHJcbn1cclxuXHJcbi5mYWRlSW5VcEJpZygpIHtcclxuICAgIEBrZXlmcmFtZXMgZmFkZUluVXBCaWcge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMjAwMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAyMDAwcHgsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVJblVwQmlnO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZhZGVJblVwQmlnO1xyXG59XHJcblxyXG4uZmFkZU91dCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVPdXQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXQ7XHJcbn1cclxuXHJcbi5mYWRlT3V0RG93bigpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVPdXREb3duIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwMCUsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwMCUsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZU91dERvd247XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZU91dERvd247XHJcbn1cclxuXHJcbi5mYWRlT3V0RG93bkJpZygpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVPdXREb3duQmlnIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDIwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMjAwMHB4LCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZU91dERvd25CaWc7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZU91dERvd25CaWc7XHJcbn1cclxuXHJcbi5mYWRlT3V0TGVmdCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVPdXRMZWZ0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXRMZWZ0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXRMZWZ0O1xyXG59XHJcblxyXG4uZmFkZU91dExlZnRCaWcoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBmYWRlT3V0TGVmdEJpZyB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXRMZWZ0QmlnO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXRMZWZ0QmlnO1xyXG59XHJcblxyXG4uZmFkZU91dFJpZ2h0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmFkZU91dFJpZ2h0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZU91dFJpZ2h0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZhZGVPdXRSaWdodDtcclxufVxyXG5cclxuLmZhZGVPdXRSaWdodEJpZygpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGZhZGVPdXRSaWdodEJpZyB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgyMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0UmlnaHRCaWc7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZU91dFJpZ2h0QmlnO1xyXG59XHJcblxyXG4uZmFkZU91dFVwKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmFkZU91dFVwIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMDAlLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTAwJSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0VXA7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZU91dFVwO1xyXG59XHJcblxyXG4uZmFkZU91dFVwQmlnKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmFkZU91dFVwQmlnIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMDAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMDAwcHgsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYWRlT3V0VXBCaWc7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmFkZU91dFVwQmlnO1xyXG59XHJcblxyXG4uZmxhc2goKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGZsYXNoIHtcclxuXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICA1MCUsXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMjUlLFxyXG4gICAgICAgIDc1JSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZsYXNoO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZsYXNoO1xyXG59XHJcblxyXG4uZmxpcCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGZsaXAge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgdHJhbnNsYXRlM2QoMCwgMCwgMCkgcm90YXRlM2QoMCwgMSwgMCwgLTM2MGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgdHJhbnNsYXRlM2QoMCwgMCwgMCkgcm90YXRlM2QoMCwgMSwgMCwgLTM2MGRlZyk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSBzY2FsZTNkKDEsIDEsIDEpIHRyYW5zbGF0ZTNkKDAsIDAsIDE1MHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtMTkwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgc2NhbGUzZCgxLCAxLCAxKSB0cmFuc2xhdGUzZCgwLCAwLCAxNTBweCkgcm90YXRlM2QoMCwgMSwgMCwgLTE5MGRlZyk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNTAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSBzY2FsZTNkKDEsIDEsIDEpIHRyYW5zbGF0ZTNkKDAsIDAsIDE1MHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtMTcwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgc2NhbGUzZCgxLCAxLCAxKSB0cmFuc2xhdGUzZCgwLCAwLCAxNTBweCkgcm90YXRlM2QoMCwgMSwgMCwgLTE3MGRlZyk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgc2NhbGUzZCgwLjk1LCAwLjk1LCAwLjk1KSB0cmFuc2xhdGUzZCgwLCAwLCAwKSByb3RhdGUzZCgwLCAxLCAwLCAwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgc2NhbGUzZCgwLjk1LCAwLjk1LCAwLjk1KSB0cmFuc2xhdGUzZCgwLCAwLCAwKSByb3RhdGUzZCgwLCAxLCAwLCAwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgdHJhbnNsYXRlM2QoMCwgMCwgMCkgcm90YXRlM2QoMCwgMSwgMCwgMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgdHJhbnNsYXRlM2QoMCwgMCwgMCkgcm90YXRlM2QoMCwgMSwgMCwgMGRlZyk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogdmlzaWJsZTtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZsaXA7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmxpcDtcclxufVxyXG5cclxuLmZsaXBJblgoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIGZsaXBJblgge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIDkwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgOTBkZWcpO1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC0yMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC0yMGRlZyk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgMTBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAxMGRlZyk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA4MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC01ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgLTVkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiB2aXNpYmxlICFpbXBvcnRhbnQ7XHJcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiB2aXNpYmxlICFpbXBvcnRhbnQ7XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmbGlwSW5YO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGZsaXBJblg7XHJcbn1cclxuXHJcbi5mbGlwSW5ZKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmxpcEluWSB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMCwgMSwgMCwgOTBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCA5MGRlZyk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMCwgMSwgMCwgLTIwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMCwgMSwgMCwgLTIwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCAxMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIDEwZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMCwgMSwgMCwgLTVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCAtNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDtcclxuICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZsaXBJblk7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmxpcEluWTtcclxufVxyXG5cclxuLmZsaXBPdXRYKCkge1xyXG4gICAgQGtleWZyYW1lcyBmbGlwT3V0WCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMzAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAtMjBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAtMjBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIDkwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgOTBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMC43NXM7XHJcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDAuNzVzO1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmxpcE91dFg7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmxpcE91dFg7XHJcbiAgICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDtcclxuICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmZsaXBPdXRZKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgZmxpcE91dFkge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDMwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMCwgMSwgMCwgLTE1ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMCwgMSwgMCwgLTE1ZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCA5MGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIDkwZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDAuNzVzO1xyXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjc1cztcclxuICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogdmlzaWJsZSAhaW1wb3J0YW50O1xyXG4gICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogdmlzaWJsZSAhaW1wb3J0YW50O1xyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmxpcE91dFk7XHJcbiAgICBhbmltYXRpb24tbmFtZTogZmxpcE91dFk7XHJcbn1cclxuXHJcbi5oZWFydEJlYXQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBoZWFydEJlYXQge1xyXG4gICAgICAgIDAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMTQlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDI4JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQyJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjMpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA3MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGhlYXJ0QmVhdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBoZWFydEJlYXQ7XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMS4zcztcclxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMS4zcztcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XHJcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcclxufVxyXG5cclxuLmhlYWRTaGFrZSgpIHtcclxuICAgIEBrZXlmcmFtZXMgaGVhZFNoYWtlIHtcclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2LjUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTZweCkgcm90YXRlWSgtOWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNnB4KSByb3RhdGVZKC05ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDE4LjUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNXB4KSByb3RhdGVZKDdkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNXB4KSByb3RhdGVZKDdkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMzEuNSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtM3B4KSByb3RhdGVZKC01ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0zcHgpIHJvdGF0ZVkoLTVkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDMuNSUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgycHgpIHJvdGF0ZVkoM2RlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgycHgpIHJvdGF0ZVkoM2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xyXG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBoZWFkU2hha2U7XHJcbiAgICBhbmltYXRpb24tbmFtZTogaGVhZFNoYWtlO1xyXG59XHJcblxyXG4uaGluZ2UoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBoaW5nZSB7XHJcbiAgICAgICAgMCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAyMCUsXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDgwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCA4MGRlZyk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSxcclxuICAgICAgICA4MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgNjBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDYwZGVnKTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgNzAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDcwMHB4LCAwKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDJzO1xyXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAycztcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGhpbmdlO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGhpbmdlO1xyXG59XHJcblxyXG4uamFja0luVGhlQm94KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgamFja0luVGhlQm94IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuMSkgcm90YXRlKDMwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjEpIHJvdGF0ZSgzMGRlZyk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGJvdHRvbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDUwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTEwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTEwZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDcwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoM2RlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDNkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGphY2tJblRoZUJveDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBqYWNrSW5UaGVCb3g7XHJcbn1cclxuXHJcbi5qZWxsbygpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGplbGxvIHtcclxuXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICAxMS4xJSxcclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDIyLjIlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNrZXdYKC0xMi41ZGVnKSBza2V3WSgtMTIuNWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goLTEyLjVkZWcpIHNrZXdZKC0xMi41ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDMzLjMlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNrZXdYKDYuMjVkZWcpIHNrZXdZKDYuMjVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKDYuMjVkZWcpIHNrZXdZKDYuMjVkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDQuNCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2tld1goLTMuMTI1ZGVnKSBza2V3WSgtMy4xMjVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKC0zLjEyNWRlZykgc2tld1koLTMuMTI1ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDU1LjUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNrZXdYKDEuNTYyNWRlZykgc2tld1koMS41NjI1ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCgxLjU2MjVkZWcpIHNrZXdZKDEuNTYyNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2Ni42JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBza2V3WCgtMC43ODEyNWRlZykgc2tld1koLTAuNzgxMjVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKC0wLjc4MTI1ZGVnKSBza2V3WSgtMC43ODEyNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA3Ny43JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBza2V3WCgwLjM5MDYyNWRlZykgc2tld1koMC4zOTA2MjVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKDAuMzkwNjI1ZGVnKSBza2V3WSgwLjM5MDYyNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA4OC44JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBza2V3WCgtMC4xOTUzMTI1ZGVnKSBza2V3WSgtMC4xOTUzMTI1ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBza2V3WCgtMC4xOTUzMTI1ZGVnKSBza2V3WSgtMC4xOTUzMTI1ZGVnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogamVsbG87XHJcbiAgICBhbmltYXRpb24tbmFtZTogamVsbG87XHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcclxufVxyXG5cclxuLmxpZ2h0U3BlZWRJbigpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIGxpZ2h0U3BlZWRJbiB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKSBza2V3WCgtMzBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApIHNrZXdYKC0zMGRlZyk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2tld1goMjBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKDIwZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBza2V3WCgtNWRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goLTVkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGxpZ2h0U3BlZWRJbjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBsaWdodFNwZWVkSW47XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xyXG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbn1cclxuXHJcbi5saWdodFNwZWVkT3V0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgbGlnaHRTcGVlZE91dCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKSBza2V3WCgzMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCkgc2tld1goMzBkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBsaWdodFNwZWVkT3V0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IGxpZ2h0U3BlZWRPdXQ7XHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG59XHJcblxyXG4ucHVsc2UoKSB7XHJcbiAgICBAa2V5ZnJhbWVzIHB1bHNlIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDUwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEuMDUsIDEuMDUsIDEuMDUpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMS4wNSwgMS4wNSwgMS4wNSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHB1bHNlO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHB1bHNlO1xyXG59XHJcblxyXG4ucm9sbEluKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgcm9sbEluIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKSByb3RhdGUzZCgwLCAwLCAxLCAtMTIwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCkgcm90YXRlM2QoMCwgMCwgMSwgLTEyMGRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogcm9sbEluO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHJvbGxJbjtcclxufVxyXG5cclxuLnJvbGxPdXQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb2xsT3V0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIDEyMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCkgcm90YXRlM2QoMCwgMCwgMSwgMTIwZGVnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogcm9sbE91dDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb2xsT3V0O1xyXG59XHJcblxyXG4ucm90YXRlSW4oKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb3RhdGVJbiB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtMjAwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtMjAwZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiByb3RhdGVJbjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb3RhdGVJbjtcclxufVxyXG5cclxuLnJvdGF0ZUluRG93bkxlZnQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb3RhdGVJbkRvd25MZWZ0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtNDVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC00NWRlZyk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZUluRG93bkxlZnQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogcm90YXRlSW5Eb3duTGVmdDtcclxufVxyXG5cclxuLnJvdGF0ZUluRG93blJpZ2h0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgcm90YXRlSW5Eb3duUmlnaHQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgNDVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDQ1ZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiByb3RhdGVJbkRvd25SaWdodDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb3RhdGVJbkRvd25SaWdodDtcclxufVxyXG5cclxuLnJvdGF0ZUluVXBMZWZ0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgcm90YXRlSW5VcExlZnQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDQ1ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCA0NWRlZyk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZUluVXBMZWZ0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZUluVXBMZWZ0O1xyXG59XHJcblxyXG4ucm90YXRlSW5VcFJpZ2h0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgcm90YXRlSW5VcFJpZ2h0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC05MGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgLTkwZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiByb3RhdGVJblVwUmlnaHQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogcm90YXRlSW5VcFJpZ2h0O1xyXG59XHJcblxyXG4ucm90YXRlT3V0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgcm90YXRlT3V0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDIwMGRlZyk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgMjAwZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZU91dDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb3RhdGVPdXQ7XHJcbn1cclxuXHJcbi5yb3RhdGVPdXREb3duTGVmdCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHJvdGF0ZU91dERvd25MZWZ0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgNDVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDQ1ZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogcm90YXRlT3V0RG93bkxlZnQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogcm90YXRlT3V0RG93bkxlZnQ7XHJcbn1cclxuXHJcbi5yb3RhdGVPdXREb3duUmlnaHQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyByb3RhdGVPdXREb3duUmlnaHQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgLTQ1ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtNDVkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiByb3RhdGVPdXREb3duUmlnaHQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogcm90YXRlT3V0RG93blJpZ2h0O1xyXG59XHJcblxyXG4ucm90YXRlT3V0VXBMZWZ0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgcm90YXRlT3V0VXBMZWZ0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgLTQ1ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtNDVkZWcpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiByb3RhdGVPdXRVcExlZnQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogcm90YXRlT3V0VXBMZWZ0O1xyXG59XHJcblxyXG4ucm90YXRlT3V0VXBSaWdodCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHJvdGF0ZU91dFVwUmlnaHQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGJvdHRvbTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgOTBkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDkwZGVnKTtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogcm90YXRlT3V0VXBSaWdodDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiByb3RhdGVPdXRVcFJpZ2h0O1xyXG59XHJcblxyXG4ucnViYmVyQmFuZCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHJ1YmJlckJhbmQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMzAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMS4yNSwgMC43NSwgMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLjI1LCAwLjc1LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuNzUsIDEuMjUsIDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC43NSwgMS4yNSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLjE1LCAwLjg1LCAxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEuMTUsIDAuODUsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC45NSwgMS4wNSwgMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjk1LCAxLjA1LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDc1JSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEuMDUsIDAuOTUsIDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMS4wNSwgMC45NSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHJ1YmJlckJhbmQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogcnViYmVyQmFuZDtcclxufVxyXG5cclxuLnNsaWRlSW5Eb3duKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgc2xpZGVJbkRvd24ge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwMCUsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMDAlLCAwKTtcclxuICAgICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBzbGlkZUluRG93bjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZUluRG93bjtcclxufVxyXG5cclxuLnNsaWRlSW5MZWZ0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgc2xpZGVJbkxlZnQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKTtcclxuICAgICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBzbGlkZUluTGVmdDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZUluTGVmdDtcclxufVxyXG5cclxuLnNsaWRlSW5SaWdodCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHNsaWRlSW5SaWdodCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKTtcclxuICAgICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBzbGlkZUluUmlnaHQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogc2xpZGVJblJpZ2h0O1xyXG59XHJcblxyXG4uc2xpZGVJblVwKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgc2xpZGVJblVwIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwMCUsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwMCUsIDApO1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNsaWRlSW5VcDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZUluVXA7XHJcbn1cclxuXHJcbi5zbGlkZU91dERvd24oKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBzbGlkZU91dERvd24ge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwMCUsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwMCUsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBzbGlkZU91dERvd247XHJcbiAgICBhbmltYXRpb24tbmFtZTogc2xpZGVPdXREb3duO1xyXG59XHJcblxyXG4uc2xpZGVPdXRMZWZ0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgc2xpZGVPdXRMZWZ0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBzbGlkZU91dExlZnQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogc2xpZGVPdXRMZWZ0O1xyXG59XHJcblxyXG4uc2xpZGVPdXRSaWdodCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHNsaWRlT3V0UmlnaHQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBzbGlkZU91dFJpZ2h0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHNsaWRlT3V0UmlnaHQ7XHJcbn1cclxuXHJcbi5zbGlkZU91dFVwKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgc2xpZGVPdXRVcCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwMCUsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMDAlLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogc2xpZGVPdXRVcDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZU91dFVwO1xyXG59XHJcblxyXG4uc2hha2UoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBzaGFrZSB7XHJcblxyXG4gICAgICAgIGZyb20sXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAxMCUsXHJcbiAgICAgICAgMzAlLFxyXG4gICAgICAgIDUwJSxcclxuICAgICAgICA3MCUsXHJcbiAgICAgICAgOTAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTBweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAyMCUsXHJcbiAgICAgICAgNDAlLFxyXG4gICAgICAgIDYwJSxcclxuICAgICAgICA4MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTBweCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNoYWtlO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHNoYWtlO1xyXG59XHJcblxyXG4uc3dpbmcoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyBzd2luZyB7XHJcbiAgICAgICAgMjAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDE1ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAxNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QoMCwgMCwgMSwgLTEwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtMTBkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDVkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIDVkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgODAlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKDAsIDAsIDEsIC01ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAtNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAwZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAwLCAxLCAwZGVnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgY2VudGVyO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGNlbnRlcjtcclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHN3aW5nO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHN3aW5nO1xyXG59XHJcblxyXG4udGFkYSgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHRhZGEge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMTAlLFxyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuOSwgMC45LCAwLjkpIHJvdGF0ZTNkKDAsIDAsIDEsIC0zZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuOSwgMC45LCAwLjkpIHJvdGF0ZTNkKDAsIDAsIDEsIC0zZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDMwJSxcclxuICAgICAgICA1MCUsXHJcbiAgICAgICAgNzAlLFxyXG4gICAgICAgIDkwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEuMSwgMS4xLCAxLjEpIHJvdGF0ZTNkKDAsIDAsIDEsIDNkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMS4xLCAxLjEsIDEuMSkgcm90YXRlM2QoMCwgMCwgMSwgM2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0MCUsXHJcbiAgICAgICAgNjAlLFxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEuMSwgMS4xLCAxLjEpIHJvdGF0ZTNkKDAsIDAsIDEsIC0zZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEuMSwgMS4xLCAxLjEpIHJvdGF0ZTNkKDAsIDAsIDEsIC0zZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogdGFkYTtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB0YWRhO1xyXG59XHJcblxyXG4ud2lnZ2xlKCkge1xyXG5cclxuICAgIEAtbW96LWtleWZyYW1lcyB3aWdnbGUge1xyXG4gICAgICAgIDAlIHtcclxuICAgICAgICAgICAgLW1vei10cmFuc2Zvcm06IHNrZXdYKDlkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMTAlIHtcclxuICAgICAgICAgICAgLW1vei10cmFuc2Zvcm06IHNrZXdYKC04ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIC1tb3otdHJhbnNmb3JtOiBza2V3WCg3ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDMwJSB7XHJcbiAgICAgICAgICAgIC1tb3otdHJhbnNmb3JtOiBza2V3WCgtNmRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA0MCUge1xyXG4gICAgICAgICAgICAtbW96LXRyYW5zZm9ybTogc2tld1goNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICAtbW96LXRyYW5zZm9ybTogc2tld1goLTRkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgLW1vei10cmFuc2Zvcm06IHNrZXdYKDNkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNzAlIHtcclxuICAgICAgICAgICAgLW1vei10cmFuc2Zvcm06IHNrZXdYKC0yZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC1tb3otdHJhbnNmb3JtOiBza2V3WCgxZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDkwJSB7XHJcbiAgICAgICAgICAgIC1tb3otdHJhbnNmb3JtOiBza2V3WCgwZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDEwMCUge1xyXG4gICAgICAgICAgICAtbW96LXRyYW5zZm9ybTogc2tld1goMGRlZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEAtby1rZXlmcmFtZXMgd2lnZ2xlIHtcclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goOWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAxMCUge1xyXG4gICAgICAgICAgICAtby10cmFuc2Zvcm06IHNrZXdYKC04ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goN2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAzMCUge1xyXG4gICAgICAgICAgICAtby10cmFuc2Zvcm06IHNrZXdYKC02ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICAtby10cmFuc2Zvcm06IHNrZXdYKC00ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goM2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA3MCUge1xyXG4gICAgICAgICAgICAtby10cmFuc2Zvcm06IHNrZXdYKC0yZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goMWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA5MCUge1xyXG4gICAgICAgICAgICAtby10cmFuc2Zvcm06IHNrZXdYKDBkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMTAwJSB7XHJcbiAgICAgICAgICAgIC1vLXRyYW5zZm9ybTogc2tld1goMGRlZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBrZXlmcmFtZXMgd2lnZ2xlIHtcclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goOWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAxMCUge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKC04ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDIwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goN2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAzMCUge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKC02ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKC00ZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goM2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA3MCUge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKC0yZGVnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDgwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goMWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA5MCUge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNrZXdYKDBkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMTAwJSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2tld1goMGRlZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHdpZ2dsZTtcclxuICAgIC1tb3otYW5pbWF0aW9uLW5hbWU6IHdpZ2dsZTtcclxuICAgIC1vLWFuaW1hdGlvbi1uYW1lOiB3aWdnbGU7XHJcbiAgICBhbmltYXRpb24tbmFtZTogd2lnZ2xlO1xyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgIC1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgIC1vLWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG59XHJcblxyXG4ud29iYmxlKCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgd29iYmxlIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMTUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0yNSUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIC01ZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMjUlLCAwLCAwKSByb3RhdGUzZCgwLCAwLCAxLCAtNWRlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAzMCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMjAlLCAwLCAwKSByb3RhdGUzZCgwLCAwLCAxLCAzZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgyMCUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIDNkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNDUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xNSUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIC0zZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTUlLCAwLCAwKSByb3RhdGUzZCgwLCAwLCAxLCAtM2RlZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAlLCAwLCAwKSByb3RhdGUzZCgwLCAwLCAxLCAyZGVnKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMCUsIDAsIDApIHJvdGF0ZTNkKDAsIDAsIDEsIDJkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNzUlIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC01JSwgMCwgMCkgcm90YXRlM2QoMCwgMCwgMSwgLTFkZWcpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC01JSwgMCwgMCkgcm90YXRlM2QoMCwgMCwgMSwgLTFkZWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHdvYmJsZTtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB3b2JibGU7XHJcbn1cclxuXHJcbi56b29tSW4oKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyB6b29tSW4ge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjMsIDAuMywgMC4zKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMywgMC4zLCAwLjMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNTAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogem9vbUluO1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHpvb21JbjtcclxufVxyXG5cclxuLnpvb21JbkRvd24oKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyB6b29tSW5Eb3duIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC4xLCAwLjEsIDAuMSkgdHJhbnNsYXRlM2QoMCwgLTEwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjEsIDAuMSwgMC4xKSB0cmFuc2xhdGUzZCgwLCAtMTAwMHB4LCAwKTtcclxuICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC41NSwgMC4wNTUsIDAuNjc1LCAwLjE5KTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA2MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCgwLCA2MHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKDAsIDYwcHgsIDApO1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogem9vbUluRG93bjtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB6b29tSW5Eb3duO1xyXG59XHJcblxyXG4uem9vbUluTGVmdCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHpvb21JbkxlZnQge1xyXG4gICAgICAgIGZyb20ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjEsIDAuMSwgMC4xKSB0cmFuc2xhdGUzZCgtMTAwMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMSwgMC4xLCAwLjEpIHRyYW5zbGF0ZTNkKC0xMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjU1LCAwLjA1NSwgMC42NzUsIDAuMTkpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC41NSwgMC4wNTUsIDAuNjc1LCAwLjE5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDYwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKDEwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoMTBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB6b29tSW5MZWZ0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHpvb21JbkxlZnQ7XHJcbn1cclxuXHJcbi56b29tSW5SaWdodCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHpvb21JblJpZ2h0IHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC4xLCAwLjEsIDAuMSkgdHJhbnNsYXRlM2QoMTAwMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMSwgMC4xLCAwLjEpIHRyYW5zbGF0ZTNkKDEwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjU1LCAwLjA1NSwgMC42NzUsIDAuMTkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoLTEwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoLTEwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogem9vbUluUmlnaHQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogem9vbUluUmlnaHQ7XHJcbn1cclxuXHJcbi56b29tSW5VcCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHpvb21JblVwIHtcclxuICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC4xLCAwLjEsIDAuMSkgdHJhbnNsYXRlM2QoMCwgMTAwMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMSwgMC4xLCAwLjEpIHRyYW5zbGF0ZTNkKDAsIDEwMDBweCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjU1LCAwLjA1NSwgMC42NzUsIDAuMTkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgNjAlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoMCwgLTYwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoMCwgLTYwcHgsIDApO1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogem9vbUluVXA7XHJcbiAgICBhbmltYXRpb24tbmFtZTogem9vbUluVXA7XHJcbn1cclxuXHJcbi56b29tT3V0KCkge1xyXG5cclxuICAgIEBrZXlmcmFtZXMgem9vbU91dCB7XHJcbiAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjMsIDAuMywgMC4zKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMywgMC4zLCAwLjMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB6b29tT3V0O1xyXG4gICAgYW5pbWF0aW9uLW5hbWU6IHpvb21PdXQ7XHJcbn1cclxuXHJcbi56b29tT3V0RG93bigpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHpvb21PdXREb3duIHtcclxuICAgICAgICA0MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCgwLCAtNjBweCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCgwLCAtNjBweCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjU1LCAwLjA1NSwgMC42NzUsIDAuMTkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjEsIDAuMSwgMC4xKSB0cmFuc2xhdGUzZCgwLCAyMDAwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC4xLCAwLjEsIDAuMSkgdHJhbnNsYXRlM2QoMCwgMjAwMHB4LCAwKTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgYm90dG9tO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgYm90dG9tO1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogem9vbU91dERvd247XHJcbiAgICBhbmltYXRpb24tbmFtZTogem9vbU91dERvd247XHJcbn1cclxuXHJcbi56b29tT3V0TGVmdCgpIHtcclxuXHJcbiAgICBAa2V5ZnJhbWVzIHpvb21PdXRMZWZ0IHtcclxuICAgICAgICA0MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjQ3NSwgMC40NzUsIDAuNDc1KSB0cmFuc2xhdGUzZCg0MnB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKDQycHgsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4xKSB0cmFuc2xhdGUzZCgtMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjEpIHRyYW5zbGF0ZTNkKC0yMDAwcHgsIDAsIDApO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogem9vbU91dExlZnQ7XHJcbiAgICBhbmltYXRpb24tbmFtZTogem9vbU91dExlZnQ7XHJcbn1cclxuXHJcbi56b29tT3V0UmlnaHQoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyB6b29tT3V0UmlnaHQge1xyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKC00MnB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKC00MnB4LCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuMSkgdHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjEpIHRyYW5zbGF0ZTNkKDIwMDBweCwgMCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgY2VudGVyO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHpvb21PdXRSaWdodDtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiB6b29tT3V0UmlnaHQ7XHJcbn1cclxuXHJcbi56b29tT3V0VXAoKSB7XHJcblxyXG4gICAgQGtleWZyYW1lcyB6b29tT3V0VXAge1xyXG4gICAgICAgIDQwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuNDc1LCAwLjQ3NSwgMC40NzUpIHRyYW5zbGF0ZTNkKDAsIDYwcHgsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC40NzUsIDAuNDc1LCAwLjQ3NSkgdHJhbnNsYXRlM2QoMCwgNjBweCwgMCk7XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAuMDU1LCAwLjY3NSwgMC4xOSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjU1LCAwLjA1NSwgMC42NzUsIDAuMTkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG8ge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjEsIDAuMSwgMC4xKSB0cmFuc2xhdGUzZCgwLCAtMjAwMHB4LCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMSwgMC4xLCAwLjEpIHRyYW5zbGF0ZTNkKDAsIC0yMDAwcHgsIDApO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBib3R0b207XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBib3R0b207XHJcbiAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiB6b29tT3V0VXA7XHJcbiAgICBhbmltYXRpb24tbmFtZTogem9vbU91dFVwO1xyXG59IiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vKlxuTEVTUyB2YXJpYWJsZXMgYXJlIGluZm9ybWF0aW9uIGFib3V0IGljb24ncyBjb21waWxlZCBzdGF0ZSwgc3RvcmVkIHVuZGVyIGl0cyBvcmlnaW5hbCBmaWxlIG5hbWVcblxuLmljb24taG9tZSB7XG4gIHdpZHRoOiBAaWNvbi1ob21lLXdpZHRoO1xufVxuXG5UaGUgbGFyZ2UgYXJyYXktbGlrZSB2YXJpYWJsZXMgY29udGFpbiBhbGwgaW5mb3JtYXRpb24gYWJvdXQgYSBzaW5nbGUgaWNvblxuQGljb24taG9tZTogeCB5IG9mZnNldF94IG9mZnNldF95IHdpZHRoIGhlaWdodCB0b3RhbF93aWR0aCB0b3RhbF9oZWlnaHQgaW1hZ2VfcGF0aCBuYW1lO1xuXG5BdCB0aGUgYm90dG9tIG9mIHRoaXMgc2VjdGlvbiwgd2UgcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3ByaXRlc2hlZXQgaXRzZWxmXG5Ac3ByaXRlc2hlZXQ6IHdpZHRoIGhlaWdodCBpbWFnZSBAc3ByaXRlc2hlZXQtc3ByaXRlcztcbiovXG5cbi8qXG5UaGUgcHJvdmlkZWQgY2xhc3NlcyBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIHRoZSBhcnJheS1saWtlIHZhcmlhYmxlc1xuXG4uaWNvbi1ob21lIHtcbiAgLnNwcml0ZS13aWR0aChAaWNvbi1ob21lKTtcbn1cbi5pY29uLWVtYWlsIHtcbiAgLnNwcml0ZShAaWNvbi1lbWFpbCk7XG59XG5cbkV4YW1wbGUgdXNhZ2UgaW4gSFRNTDpcblxuYGRpc3BsYXk6IGJsb2NrYCBzcHJpdGU6XG48ZGl2IGNsYXNzPVwiaWNvbi1ob21lXCI+PC9kaXY+XG5cblRvIGNoYW5nZSBgZGlzcGxheWAgKGUuZy4gYGRpc3BsYXk6IGlubGluZS1ibG9jaztgKSwgd2Ugc3VnZ2VzdCB1c2luZyBhIGNvbW1vbiBDU1MgY2xhc3M6XG5cbi8vIENTU1xuLmljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8vIEhUTUxcbjxpIGNsYXNzPVwiaWNvbiBpY29uLWhvbWVcIj48L2k+XG4qL1xuXG4vKlxuVGhlIGAuc3ByaXRlc2AgbWl4aW4gZ2VuZXJhdGVzIGlkZW50aWNhbCBvdXRwdXQgdG8gdGhlIENTUyB0ZW1wbGF0ZVxuICBidXQgY2FuIGJlIG92ZXJyaWRkZW4gaW5zaWRlIG9mIExFU1NcblxuVGhpcyBtdXN0IGJlIHJ1biB3aGVuIHlvdSBoYXZlIGF0IGxlYXN0IDIgc3ByaXRlcy5cbiAgSWYgcnVuIHdpdGggYSBzaW5nbGUgc3ByaXRlLCB0aGVuIHRoZXJlIHdpbGwgYmUgcmVmZXJlbmNlIGVycm9ycy5cblxuLnNwcml0ZXMoQHNwcml0ZXNoZWV0LXNwcml0ZXMpO1xuKi9cblxuYm9keSxcbmRpdixcbmRsLFxuZHQsXG5kZCxcbnVsLFxubGksXG5oMSxcbmgyLFxuaDMsXG5oNCxcbmg1LFxuaDYsXG5wcmUsXG5jb2RlLFxuZm9ybSxcbmZpZWxkc2V0LFxuaW5wdXQsXG50ZXh0YXJlYSxcbnAsXG5ibG9ja3F1b3RlLFxudGgsXG50ZCB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cblxuZmllbGRzZXQsXG5pbWcsXG5hYmJyIHtcbiAgYm9yZGVyOiAwO1xufVxuXG5hZGRyZXNzLFxuY2FwdGlvbixcbmNpdGUsXG5jb2RlLFxuZGZuLFxuZW0sXG5zdHJvbmcsXG50aCxcbnZhciB7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cblxudWwgbGkge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG5jYXB0aW9uLFxudGgge1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xufVxuXG5oMSxcbmgyLFxuaDMsXG5oNCxcbmg1LFxuaDYge1xuICBmb250LXNpemU6IDEwMCU7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG59XG5cbnN1cCB7XG4gIHZlcnRpY2FsLWFsaWduOiB0ZXh0LXRvcDtcbn1cblxuc3ViIHtcbiAgdmVydGljYWwtYWxpZ246IHRleHQtYm90dG9tO1xufVxuXG5pbnB1dCxcbnRleHRhcmVhLFxuc2VsZWN0IHtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XG59XG5cbmxlZ2VuZCB7XG4gIGNvbG9yOiAjMDAwO1xufVxuXG5hcnRpY2xlLFxuYXNpZGUsXG5kZXRhaWxzLFxuZmlnY2FwdGlvbixcbmZpZ3VyZSxcbmZvb3RlcixcbmhlYWRlcixcbmhncm91cCxcbm1lbnUsXG5uYXYsXG5zZWN0aW9uLFxubWFpbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG5pbWcge1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLndyYXBwZXIge1xuICBtYXgtd2lkdGg6IDk0MHB4O1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZy1sZWZ0OiA2MHB4O1xuICBwYWRkaW5nLXJpZ2h0OiA2MHB4O1xufVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuU2Fucy1SZWd1bGFyJztcbiAgc3JjOiB1cmwoJy4uLy4uL2ZvbnRzL09wZW5TYW5zL09wZW5TYW5zLVJlZ3VsYXIudHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ1BUU2Fucy1Cb2xkJztcbiAgc3JjOiB1cmwoJy4uLy4uL2ZvbnRzL1BUU2Fucy9QVFNhbnMtQm9sZC50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbn1cblxuYm9keSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlblNhbnMtUmVndWxhcic7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbn1cblxuYSxcbmJ1dHRvbiB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuYTpmb2N1cyxcbmJ1dHRvbjpmb2N1cyB7XG4gIG91dGxpbmU6IG5vbmU7XG59XG5cbmEge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGNvbG9yOiBpbmhlcml0O1xufVxuXG5pbnB1dCB7XG4gIGN1cnNvcjogdGV4dDtcbn1cblxuaW5wdXQ6Zm9jdXMge1xuICBvdXRsaW5lOiBub25lO1xufVxuXG4ucGFnZV9fdGl0bGUtaDEsXG4ucGFnZV9fdGl0bGUtaDIge1xuICBmb250LWZhbWlseTogXCJQVFNhbnMtQm9sZFwiO1xuICBjb2xvcjogIzBhYmIwZTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDQwcHg7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG59XG5cbi5wYWdlX190aXRsZS1oMSB7XG4gIGZvbnQtc2l6ZTogNDVweDtcbn1cblxuLnBhZ2VfX3RpdGxlLWgyIHtcbiAgZm9udC1zaXplOiAyNXB4O1xuICBjb2xvcjogIzBhYmIwZTtcbn1cblxuLnBhZ2VfX3RpdGxlLWgyX3doaXRlIHtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG4ucGFnZV9fYnRuIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIGhlaWdodDogNjhweDtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICBsaW5lLWhlaWdodDogMzBweDtcbiAgZm9udC1mYW1pbHk6ICdQVFNhbnMtQm9sZCc7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGJvcmRlcjogbm9uZTtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIGJhY2tncm91bmQtY29sb3I6ICM3ZTNjZjk7XG4gIGJvcmRlcjogMXB4IHNvbGlkICM3ZTNjZjk7XG59XG5cbi5wYWdlX19idG46aG92ZXIge1xuICBjb2xvcjogIzI2MjYyNjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgdHJhbnNpdGlvbjogYWxsIGVhc2Utb3V0IDAuNXM7XG59XG5cbi5wYWdlX19idG5fMiB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgd2lkdGg6IDI0MHB4O1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIGhlaWdodDogNjhweDtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICBsaW5lLWhlaWdodDogMzBweDtcbiAgZm9udC1mYW1pbHk6ICdQVFNhbnMtQm9sZCc7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGJvcmRlcjogbm9uZTtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIGJhY2tncm91bmQtY29sb3I6ICM3ZTNjZjk7XG4gIGJvcmRlcjogMXB4IHNvbGlkICM3ZTNjZjk7XG59XG5cbi5wYWdlX19idG5fMjpob3ZlciB7XG4gIGNvbG9yOiAjMjYyNjI2O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICB0cmFuc2l0aW9uOiBhbGwgZWFzZS1vdXQgMC41cztcbn1cblxuLnBhZ2VfX2J0bl8zIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB3aWR0aDogMjQwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgaGVpZ2h0OiA2OHB4O1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICBmb250LWZhbWlseTogJ1BUU2Fucy1Cb2xkJztcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgYm9yZGVyOiBub25lO1xuICBjb2xvcjogI2ZmZmZmZjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzdlM2NmOTtcbiAgYm9yZGVyOiAxcHggc29saWQgIzdlM2NmOTtcbn1cblxuLnBhZ2VfX2J0bl8zOmhvdmVyIHtcbiAgY29sb3I6ICMyNjI2MjY7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gIHRyYW5zaXRpb246IGFsbCBlYXNlLW91dCAwLjVzO1xufVxuXG4ucGFnZV9fdGV4dCB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG59XG5cbi5oZWFkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIG1hcmdpbi1sZWZ0OiAtMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAtMTBweDtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5oZWFkZXItbG9nbyB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgd2lkdGg6IGNhbGMoNTAlIC0gMjBweCk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5oZWFkZXItbG9nb19faWNvbiB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IDBweCAwcHg7XG4gIHdpZHRoOiA0M3B4O1xuICBoZWlnaHQ6IDQxcHg7XG59XG5cbi5oZWFkZXItbG9nb19fdGV4dCB7XG4gIGZvbnQtZmFtaWx5OiBcIlBUU2Fucy1Cb2xkXCI7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBmb250LXNpemU6IDI1cHg7XG59XG5cbi5oZWFkZXItc29jaWFsIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICB3aWR0aDogY2FsYyg1MCUgLSAyMHB4KTtcbn1cblxuLmhlYWRlci1zb2NpYWwgLnNvY2lhbCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG59XG5cbi5oZWFkZXItc29jaWFsIC5zb2NpYWxfX2ljb24ge1xuICBtYXJnaW46IDAgOHB4O1xuICBib3JkZXItcmFkaXVzOiAycHg7XG59XG5cbi5oZWFkZXItc29jaWFsIC5zb2NpYWxfX2ljb246bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1yaWdodDogMDtcbn1cblxuLmhlYWRlci1zb2NpYWwgLnNvY2lhbF9faWNvbl9mYixcbi5oZWFkZXItc29jaWFsIC5zb2NpYWxfX2ljb25fdHcsXG4uaGVhZGVyLXNvY2lhbCAuc29jaWFsX19pY29uX2luc3QsXG4uaGVhZGVyLXNvY2lhbCAuc29jaWFsX19pY29uX3ZpbWVvLFxuLmhlYWRlci1zb2NpYWwgLnNvY2lhbF9faWNvbl9nb29nbGUge1xuICBmaWx0ZXI6IGludmVydCgxKTtcbn1cblxuLmhlYWRlci1zb2NpYWwgLnNvY2lhbF9faWNvbl9mYjpob3Zlcixcbi5oZWFkZXItc29jaWFsIC5zb2NpYWxfX2ljb25fdHc6aG92ZXIsXG4uaGVhZGVyLXNvY2lhbCAuc29jaWFsX19pY29uX2luc3Q6aG92ZXIsXG4uaGVhZGVyLXNvY2lhbCAuc29jaWFsX19pY29uX3ZpbWVvOmhvdmVyLFxuLmhlYWRlci1zb2NpYWwgLnNvY2lhbF9faWNvbl9nb29nbGU6aG92ZXIge1xuICBmaWx0ZXI6IGludmVydCgwKTtcbn1cblxuLmhlYWRlci1zb2NpYWwgLnNvY2lhbF9faWNvbl9mYiB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IC01MXB4IC01MXB4O1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xufVxuXG4uaGVhZGVyLXNvY2lhbCAuc29jaWFsX19pY29uX2ZiOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTg3cHggMHB4O1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xufVxuXG4uaGVhZGVyLXNvY2lhbCAuc29jaWFsX19pY29uX3R3IHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTUycHggLTgwcHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5oZWFkZXItc29jaWFsIC5zb2NpYWxfX2ljb25fdHc6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtNzhweCAtODBweDtcbiAgd2lkdGg6IDE2cHg7XG4gIGhlaWdodDogMTZweDtcbn1cblxuLmhlYWRlci1zb2NpYWwgLnNvY2lhbF9faWNvbl9pbnN0IHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMHB4IC04MHB4O1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xufVxuXG4uaGVhZGVyLXNvY2lhbCAuc29jaWFsX19pY29uX2luc3Q6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMjZweCAtODBweDtcbiAgd2lkdGg6IDE2cHg7XG4gIGhlaWdodDogMTZweDtcbn1cblxuLmhlYWRlci1zb2NpYWwgLnNvY2lhbF9faWNvbl92aW1lbyB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0xMTNweCAwcHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5oZWFkZXItc29jaWFsIC5zb2NpYWxfX2ljb25fdmltZW86aG92ZXIge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTEzcHggLTI2cHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5oZWFkZXItc29jaWFsIC5zb2NpYWxfX2ljb25fZ29vZ2xlIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTg3cHggLTI2cHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5oZWFkZXItc29jaWFsIC5zb2NpYWxfX2ljb25fZ29vZ2xlOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTg3cHggLTUycHg7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG59XG5cbi5oZWFkZXItc29jaWFsIC5pY29uIHtcbiAgd2lkdGg6IDE1cHg7XG4gIGhlaWdodDogMTVweDtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xufVxuXG4uaGVhZGVyLXNvY2lhbCAuaWNvbjpsYXN0LWNoaWxkIHtcbiAgbWFyZ2luLXJpZ2h0OiAwcHg7XG59XG5cbi5oZWFkZXItYmxvY2sge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHdpZHRoOiAxMDAlO1xuICB6LWluZGV4OiAyO1xufVxuXG4uYmFubmVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vYXNzZXRzL2ltZy9iZy5qcGdcIik7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmJhbm5lci1ibG9jayB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgY29sb3I6ICNmZmY7XG4gIHBhZGRpbmctdG9wOiAxNXB4O1xufVxuXG4uYmFubmVyLWJsb2NrLWluZm8ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBtYXJnaW4tdG9wOiAyNXB4O1xuICBmb250LWZhbWlseTogXCJQVFNhbnMtQm9sZFwiO1xufVxuXG4uYmFubmVyLWJsb2NrLWluZm8gZGl2IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luOiAwIDEwcHg7XG59XG5cbi5iYW5uZXItYmxvY2staW5mb19faWNvbi1jZWxlbmRlcixcbi5iYW5uZXItYmxvY2staW5mb19faWNvbi1tYXJrLW1hcCB7XG4gIHdpZHRoOiAxNXB4O1xuICBoZWlnaHQ6IDE1cHg7XG59XG5cbi5iYW5uZXItYmxvY2staW5mb19faWNvbi1jZWxlbmRlciB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IDBweCAtNTFweDtcbiAgd2lkdGg6IDE3cHg7XG4gIGhlaWdodDogMTlweDtcbn1cblxuLmJhbm5lci1ibG9jay1pbmZvX19pY29uLW1hcmstbWFwIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTExM3B4IC01MnB4O1xuICB3aWR0aDogMTJweDtcbiAgaGVpZ2h0OiAxNnB4O1xufVxuXG4uYmFubmVyLWJsb2NrLXRleHQge1xuICBtYXJnaW46IDI1cHggYXV0byAzNXB4O1xuICB3aWR0aDogY2FsYyg4My4zMzMzMzMzMzMzMzMzNCUgLSAyMHB4KTtcbiAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDFzO1xuICBhbmltYXRpb24tZHVyYXRpb246IDFzO1xuICAtd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiAxcztcbiAgYW5pbWF0aW9uLWRlbGF5OiAxcztcbiAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmFkZUluO1xuICBhbmltYXRpb24tbmFtZTogZmFkZUluO1xufVxuXG5Aa2V5ZnJhbWVzIGZhZGVJbiB7XG4gIGZyb20ge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cblxuICB0byB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxufVxuXG4uYmFubmVyLWJsb2NrLWJ0biB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBtYXJnaW4tYm90dG9tOiA1MHB4O1xufVxuXG4uYmFubmVyLWJsb2NrLWJ0biAucGFnZV9fYnRuIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICB3aWR0aDogY2FsYygyNSUgLSAyMHB4KTtcbn1cblxuLmJhbm5lci1ibG9jay1jb3VudGVyIHtcbiAgd2lkdGg6IGNhbGMoNTguMzMzMzMzMzMzMzMzMzM2JSAtIDIwcHgpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIG1hcmdpbjogMCBhdXRvIC03MHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY4YTAxO1xuICBwYWRkaW5nOiAyNXB4IDUwcHg7XG59XG5cbi5iYW5uZXItYmxvY2stY291bnRlcl9faXRlbSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgd2lkdGg6IGNhbGMoMjUlIC0gMjBweCk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYm9yZGVyOiAycHggc29saWQgI2ZmZmZmZjtcbiAgYm9yZGVyLXJhZGl1czogMTAlO1xuICBwYWRkaW5nOiAyNXB4IDA7XG59XG5cbi5iYW5uZXItYmxvY2stY291bnRlcl9faXRlbV9udW1iZXIge1xuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtZmFtaWx5OiBcIlBUU2Fucy1Cb2xkXCI7XG59XG5cbi5iYW5uZXItYmxvY2stY291bnRlcl9faXRlbV90ZXh0IHtcbiAgZm9udC1zaXplOiAxNnB4O1xufVxuXG4uYmFubmVyX29wYWNpdHkge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcbn1cblxuLmFib3V0LWV2ZW50LWJsb2sge1xuICBkaXNwbGF5OiBmbGV4O1xuICBwYWRkaW5nLWJvdHRvbTogODBweDtcbn1cblxuLmFib3V0LWV2ZW50X193cmFwcGVyIHtcbiAgZGlzcGxheTogZmxleDtcbn1cblxuLmFib3V0LWV2ZW50X19sZWZ0IHtcbiAgcGFkZGluZy10b3A6IDE2MHB4O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIHdpZHRoOiBjYWxjKDUwJSAtIDIwcHgpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4uYWJvdXQtZXZlbnRfX3RpdGxlIHtcbiAgZm9udC1zaXplOiAyNXB4O1xuICBjb2xvcjogIzBhYmIwZTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgZm9udC1mYW1pbHk6IFwiUFRTYW5zLUJvbGRcIjtcbiAgcGFkZGluZy1ib3R0b206IDMwcHg7XG4gIHdpZHRoOiBjYWxjKDUwJSAtIDIwcHgpO1xufVxuXG4uYWJvdXQtZXZlbnRfX3RleHRfMiB7XG4gIHBhZGRpbmctYm90dG9tOiA0MHB4O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGNvbG9yOiAjNjY2NjY2O1xuICB3aWR0aDogNDYwcHg7XG59XG5cbi5hYm91dC1ldmVudF9fdGV4dF8zIHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBjb2xvcjogIzY2NjY2NjtcbiAgcGFkZGluZy1ib3R0b206IDQwcHg7XG4gIHdpZHRoOiA0MDFweDtcbn1cblxuLmFib3V0LWV2ZW50X19yaWdodCB7XG4gIHdpZHRoOiA1MCU7XG4gIGhlaWdodDogMzc1cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XG4gIG1hcmdpbi10b3A6IDE1MHB4O1xuICB3aWR0aDogNDAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgd2lkdGg6IGNhbGMoNTAlIC0gMjBweCk7XG59XG5cbi5hYm91dC1ldmVudF9faWNvbi1tYXAge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTEzcHggLTUycHg7XG4gIHdpZHRoOiAxMnB4O1xuICBoZWlnaHQ6IDE2cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAyMHB4O1xuICBsZWZ0OiAyMHB4O1xufVxuXG4uYWJvdXQtZXZlbnRfX2ljb24tY2VsZW5kZXIge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwcHggLTUxcHg7XG4gIHdpZHRoOiAxN3B4O1xuICBoZWlnaHQ6IDE5cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAyMHB4O1xuICBsZWZ0OiAyMHB4O1xufVxuXG4uYWJvdXQtZXZlbnRfX2ljb24tbWljcm9waG9uZSB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0yN3B4IC01MXB4O1xuICB3aWR0aDogMTRweDtcbiAgaGVpZ2h0OiAxOXB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMjBweDtcbiAgbGVmdDogMjBweDtcbn1cblxuLmFib3V0LWV2ZW50X19pY29uLW1hbnBsdXMge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtNTNweCAwcHg7XG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDE5cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAyMHB4O1xuICBsZWZ0OiAyMHB4O1xufVxuXG4uYWJvdXQtZXZlbnRfX2Jsb2tfMSxcbi5hYm91dC1ldmVudF9fYmxva18yLFxuLmFib3V0LWV2ZW50X19ibG9rXzMsXG4uYWJvdXQtZXZlbnRfX2Jsb2tfNCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5hYm91dC1ldmVudF9fdGV4dF80IHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgcGFkZGluZy1sZWZ0OiA1MHB4O1xuICBmb250LWZhbWlseTogXCJQVFNhbnMtQm9sZFwiO1xufVxuXG4uYWJvdXQtZXZlbnRfX3RleHRfNSB7XG4gIHBhZGRpbmctbGVmdDogNTBweDtcbiAgY29sb3I6ICM4ODg4ODg7XG59XG5cbi5wcmVzZW50YXRpb24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xuICBtYXgtaGVpZ2h0OiA1NDNweDtcbiAgbWFyZ2luLXRvcDogODBweDtcbiAgcGFkZGluZy10b3A6IDgwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnByZXNlbnRhdGlvbiAucGFnZV9fdGV4dCB7XG4gIHdpZHRoOiBjYWxjKDY2LjY2NjY2NjY2NjY2NjY3JSAtIDIwcHgpO1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZzogNDBweCAzMHB4O1xuICBjb2xvcjogIzc3Nztcbn1cblxuLnByZXNlbnRhdGlvbiAucGFnZV9fYnRuIHtcbiAgd2lkdGg6IGNhbGMoMjUlIC0gMjBweCk7XG4gIG1hcmdpbjogMCBhdXRvIDUwcHg7XG59XG5cbi5wcmVzZW50YXRpb24gLnBhZ2VfX2ltZyB7XG4gIG1hcmdpbi1sZWZ0OiAzMHB4O1xufVxuXG4uZGVidWdHcmlkIHtcbiAgaGVpZ2h0OiAxMDB2aDtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLmRlYnVnR3JpZCA+IGRpdiB7XG4gIGhlaWdodDogaW5oZXJpdDtcbiAgbWF4LXdpZHRoOiA5NDBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBhZGRpbmctbGVmdDogNjBweDtcbiAgcGFkZGluZy1yaWdodDogNjBweDtcbn1cblxuLmRlYnVnR3JpZCA+IGRpdiA+IGRpdiB7XG4gIGhlaWdodDogaW5oZXJpdDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XG59XG5cbi5kZWJ1Z0dyaWQgPiBkaXYgPiBkaXYgPiBkaXYge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIHdpZHRoOiBjYWxjKDguMzMzMzMzMzMzMzMzMzM0JSAtIDIwcHgpO1xuICBoZWlnaHQ6IGluaGVyaXQ7XG4gIG91dGxpbmU6IDFweCBzb2xpZCAjZmYwO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNCk7XG59XG5cbi5kZWJ1Z0dyaWQtYnRuIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgd2lkdGg6IDUwcHg7XG4gIGhlaWdodDogNTBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2ZmMDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB6LWluZGV4OiAxO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNCk7XG59XG5cbi5kZWJ1Z0dyaWQtYnRuaGlkZGVuIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmRlYnVnR3JpZC1idG46YmVmb3JlLFxuLmRlYnVnR3JpZC1idG46YWZ0ZXIge1xuICBjb250ZW50OiAnJztcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICBiYWNrZ3JvdW5kOiAjMDAwO1xufVxuXG4uZGVidWdHcmlkLWJ0bjpiZWZvcmUge1xuICB3aWR0aDogMjVweDtcbiAgaGVpZ2h0OiAycHg7XG59XG5cbi5kZWJ1Z0dyaWQtYnRuY3JlYXRlOmFmdGVyIHtcbiAgd2lkdGg6IDJweDtcbiAgaGVpZ2h0OiAyNXB4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG5cbi5kZWJ1Z0dyaWRfX3otaW5kZXgtbmVnYXRpdmUge1xuICB6LWluZGV4OiAtMTtcbn1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTkycHgpIHtcbiAgLmJhbm5lci1ibG9jay1jb3VudGVyIHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMjBweCk7XG4gIH1cblxuICAuYmFubmVyLWJsb2NrLWNvdW50ZXIge1xuICAgIHBhZGRpbmc6IDI1cHg7XG4gIH1cbn1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLmJhbm5lci1ibG9jay1idG4ge1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgfVxuXG4gIC5iYW5uZXItYmxvY2stYnRuIC5wYWdlX19idG4ge1xuICAgIHdpZHRoOiBjYWxjKDU4LjMzMzMzMzMzMzMzMzMzNiUgLSAyMHB4KTtcbiAgfVxuXG4gIC5iYW5uZXItYmxvY2stYnRuIC5wYWdlX19idG4ge1xuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gIH1cbn1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTc2cHgpIHtcbiAgLndyYXBwZXIge1xuICAgIHBhZGRpbmctbGVmdDogNXB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcbiAgfVxuXG4gIC5oZWFkZXIge1xuICAgIG1hcmdpbi1sZWZ0OiAtNXB4O1xuICAgIG1hcmdpbi1yaWdodDogLTVweDtcbiAgfVxuXG4gIC5oZWFkZXItbG9nbyB7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgfVxuXG4gIC5oZWFkZXItc29jaWFsIHtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICB9XG5cbiAgLmJhbm5lci1ibG9jay10ZXh0IHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTBweCk7XG4gIH1cblxuICAuYmFubmVyLWJsb2NrLWJ0biAucGFnZV9fYnRuIHtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICB9XG5cbiAgLmJhbm5lci1ibG9jay1idG4gLnBhZ2VfX2J0biB7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDEwcHgpO1xuICB9XG5cbiAgLmJhbm5lci1ibG9jay1jb3VudGVyIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5cbiAgLmJhbm5lci1ibG9jay1jb3VudGVyX19pdGVtIHtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICB9XG5cbiAgLmFib3V0LWV2ZW50X19sZWZ0IHtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICB9XG5cbiAgLmFib3V0LWV2ZW50X19yaWdodCB7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgfVxuXG4gIC5wcmVzZW50YXRpb24gLnBhZ2VfX3RleHQge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxMHB4KTtcbiAgfVxuXG4gIC5wcmVzZW50YXRpb24gLnBhZ2VfX3RleHQge1xuICAgIHBhZGRpbmc6IDIwcHggMDtcbiAgfVxuXG4gIC5wcmVzZW50YXRpb24gLnBhZ2VfX2J0biB7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDEwcHgpO1xuICB9XG5cbiAgLnByZXNlbnRhdGlvbiAucGFnZV9faW1nIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5cbiAgLmRlYnVnR3JpZCA+IGRpdiB7XG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xuICB9XG5cbiAgLmRlYnVnR3JpZCA+IGRpdiB7XG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xuICB9XG5cbiAgLmRlYnVnR3JpZCA+IGRpdiA+IGRpdiB7XG4gICAgbWFyZ2luLWxlZnQ6IC01cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiAtNXB4O1xuICB9XG5cbiAgLmRlYnVnR3JpZCA+IGRpdiA+IGRpdiA+IGRpdiB7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgfVxuXG4gIC5kZWJ1Z0dyaWQgPiBkaXYgPiBkaXYgPiBkaXYge1xuICAgIHdpZHRoOiBjYWxjKDguMzMzMzMzMzMzMzMzMzM0JSAtIDEwcHgpO1xuICB9XG59IiwiQGNvbHVtbnM6IDEyO1xuQGF0b206ICgxMDAlIC8gQGNvbHVtbnMpO1xuXG5AYnJlYWtfbWQ6IDEwMjRweDtcbkBicmVha19zbTogOTkycHg7XG5AYnJlYWtfc3NtOiA3NjhweDtcbkBicmVha194czogNTc2cHg7XG5AYnJlYWtfeHhzOiAzNjBweDtcblxuQG9mZnNldDogMjBweDtcbkBvZmZzZXRfbWQ6IEBvZmZzZXQ7XG5Ab2Zmc2V0X3NtOiBAb2Zmc2V0O1xuQG9mZnNldF9zc206IEBvZmZzZXQ7XG5Ab2Zmc2V0X3hzOiAxMHB4O1xuQG9mZnNldF94eHM6IEBvZmZzZXRfeHM7XG5cbkBvZmZzZXRfb25lX3NpZGU6IChAb2Zmc2V0IC8gMik7XG5Ab2Zmc2V0X21kX29uZV9zaWRlOiAoQG9mZnNldF9tZCAvIDIpO1xuQG9mZnNldF9zbV9vbmVfc2lkZTogKEBvZmZzZXRfc20gLyAyKTtcbkBvZmZzZXRfc3NtX29uZV9zaWRlOiAoQG9mZnNldF9zc20gLyAyKTtcbkBvZmZzZXRfeHNfb25lX3NpZGU6IChAb2Zmc2V0X3hzIC8gMik7XG5Ab2Zmc2V0X3h4c19vbmVfc2lkZTogKEBvZmZzZXRfeHhzIC8gMik7XG5cbkBmaWVsZHM6IDYwcHg7XG5AZmllbGRzX3hzOiA1cHg7XG5cbi53cmFwcGVyLWZ1bGwoKXtcbiAgICBwYWRkaW5nLWxlZnQ6IEBmaWVsZHM7XG4gICAgcGFkZGluZy1yaWdodDogQGZpZWxkcztcblxuICAgIC54cy1ibG9jayh7XG4gICAgICAgIHBhZGRpbmctbGVmdDogQGZpZWxkc194cztcbiAgICAgICAgcGFkZGluZy1yaWdodDogQGZpZWxkc194cztcbiAgICB9KTtcbn1cblxuLnJvdy1vZmZzZXRzKCl7XG4gICAgbWFyZ2luLWxlZnQ6IChAb2Zmc2V0X29uZV9zaWRlICogLTEpO1xuICAgIG1hcmdpbi1yaWdodDogKEBvZmZzZXRfb25lX3NpZGUgKiAtMSk7XG5cbiAgICAueHMtYmxvY2soe1xuICAgICAgICBtYXJnaW4tbGVmdDogKEBvZmZzZXRfeHNfb25lX3NpZGUgKiAtMSk7XG4gICAgICAgIG1hcmdpbi1yaWdodDogKEBvZmZzZXRfeHNfb25lX3NpZGUgKiAtMSk7XG4gICAgfSk7XG59XG5cbi5jb2wtb2Zmc2V0cyhAdHlwZSl7XG4gICAgQHt0eXBlfS1sZWZ0OiBAb2Zmc2V0X29uZV9zaWRlO1xuICAgIEB7dHlwZX0tcmlnaHQ6IEBvZmZzZXRfb25lX3NpZGU7XG5cbiAgICAueHMtYmxvY2soe1xuICAgICAgICBAe3R5cGV9LWxlZnQ6IEBvZmZzZXRfeHNfb25lX3NpZGU7XG4gICAgICAgIEB7dHlwZX0tcmlnaHQ6IEBvZmZzZXRfeHNfb25lX3NpZGU7XG4gICAgfSk7XG59XG5cbi53cmFwcGVyKCl7XG4gICAgbWF4LXdpZHRoOiA5NDBweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICAud3JhcHBlci1mdWxsKCk7XG59XG5cbi5yb3ctZmxleCgpe1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIC5yb3ctb2Zmc2V0cygpO1xufVxuXG4ucm93LWZsb2F0KCl7XG4gICAgLnJvdy1vZmZzZXRzKCk7XG4gICAgLmNsZWFyZml4KCk7XG59XG5cbi5yb3ctaWIoKXtcbiAgICAucm93LW9mZnNldHMoKTtcbn1cblxuLmNvbCgpe1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIC5jb2wtb2Zmc2V0cyhtYXJnaW4pO1xufVxuXG4uY29sLWZsb2F0KCl7XG4gICAgZmxvYXQ6IGxlZnQ7XG59XG5cbi5jb2wtaWIoKXtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcbn1cblxuLmNvbC1wYWRkaW5nKCl7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIC5jb2wtb2Zmc2V0cyhwYWRkaW5nKTtcbn1cblxuLnNpemUoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIHdpZHRoOiB+XCJjYWxjKEB7dmFsfSAtIEB7b2Zmc2V0fSlcIjtcbn1cblxuLnNpemUtbWQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC5tZCh3aWR0aCwgflwiY2FsYyhAe3ZhbH0gLSBAe29mZnNldF9tZH0pXCIpO1xufVxuXG4uc2l6ZS1zbShAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNtKHdpZHRoLCB+XCJjYWxjKEB7dmFsfSAtIEB7b2Zmc2V0X3NtfSlcIik7XG59XG5cbi5zaXplLXNzbShAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNzbSh3aWR0aCwgflwiY2FsYyhAe3ZhbH0gLSBAe29mZnNldF9zc219KVwiKTtcbn1cblxuLnNpemUteHMoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54cyh3aWR0aCwgflwiY2FsYyhAe3ZhbH0gLSBAe29mZnNldF94c30pXCIpO1xufVxuXG4uc2l6ZS14eHMoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54eHMod2lkdGgsIH5cImNhbGMoQHt2YWx9IC0gQHtvZmZzZXRfeHhzfSlcIik7XG59XG5cbi5zaGlmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgbWFyZ2luLWxlZnQ6IH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfb25lX3NpZGV9KVwiO1xuICAgIG1hcmdpbi1yaWdodDogflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9vbmVfc2lkZX0pXCI7XG59XG5cbi5zaGlmdC1sZWZ0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICBtYXJnaW4tbGVmdDogflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9vbmVfc2lkZX0pXCI7XG59XG5cbi5zaGlmdC1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgbWFyZ2luLXJpZ2h0OiB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X29uZV9zaWRlfSlcIjtcbn1cblxuLnNoaWZ0LXBhZGRpbmcoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIHBhZGRpbmctbGVmdDogflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9vbmVfc2lkZX0pXCI7XG4gICAgcGFkZGluZy1yaWdodDogflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9vbmVfc2lkZX0pXCI7XG59XG5cbi5zaGlmdC1wYWRkaW5nLWxlZnQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIHBhZGRpbmctbGVmdDogflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9vbmVfc2lkZX0pXCI7XG59XG5cbi5zaGlmdC1wYWRkaW5nLXJpZ2h0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICBwYWRkaW5nLXJpZ2h0OiB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X29uZV9zaWRlfSlcIjtcbn1cblxuLnNoaWZ0LW1kKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAubWQobWFyZ2luLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfbWRfb25lX3NpZGV9KVwiKTtcbiAgICAubWQobWFyZ2luLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X21kX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1tZC1sZWZ0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAubWQobWFyZ2luLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfbWRfb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LW1kLXJpZ2h0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAubWQobWFyZ2luLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X21kX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1tZC1wYWRkaW5nKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAubWQocGFkZGluZy1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X21kX29uZV9zaWRlfSlcIik7XG4gICAgLm1kKHBhZGRpbmctcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfbWRfb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LW1kLXBhZGRpbmctbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLm1kKHBhZGRpbmctbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9tZF9vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQtbWQtcGFkZGluZy1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLm1kKHBhZGRpbmctcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfbWRfb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXNtKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAuc20obWFyZ2luLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc21fb25lX3NpZGV9KVwiKTtcbiAgICAuc20obWFyZ2luLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zbS1sZWZ0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAuc20obWFyZ2luLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc21fb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXNtLXJpZ2h0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAuc20obWFyZ2luLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zbS1wYWRkaW5nKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAuc20ocGFkZGluZy1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NtX29uZV9zaWRlfSlcIik7XG4gICAgLnNtKHBhZGRpbmctcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc21fb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXNtLXBhZGRpbmctbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNtKHBhZGRpbmctbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zbV9vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQtc20tcGFkZGluZy1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNtKHBhZGRpbmctcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc21fb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXNzbShAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnNzbShtYXJnaW4tbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zc21fb25lX3NpZGV9KVwiKTtcbiAgICAuc3NtKG1hcmdpbi1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zc21fb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXNzbS1sZWZ0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAuc3NtKG1hcmdpbi1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3NzbV9vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQtc3NtLXJpZ2h0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAuc3NtKG1hcmdpbi1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zc21fb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXNzbS1wYWRkaW5nKEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAuc3NtKHBhZGRpbmctbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zc21fb25lX3NpZGV9KVwiKTtcbiAgICAuc3NtKHBhZGRpbmctcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC1zc20tcGFkZGluZy1sZWZ0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAuc3NtKHBhZGRpbmctbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF9zc21fb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXNzbS1wYWRkaW5nLXJpZ2h0KEBuKXtcbiAgICBAdmFsOiAxMDAlIC8gQGNvbHVtbnMgKiBAbjtcbiAgICAuc3NtKHBhZGRpbmctcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfc3NtX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC14cyhAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnhzKG1hcmdpbi1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3hzX29uZV9zaWRlfSlcIik7XG4gICAgLnhzKG1hcmdpbi1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94c19vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHMtbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnhzKG1hcmdpbi1sZWZ0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3hzX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC14cy1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnhzKG1hcmdpbi1yaWdodCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94c19vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHMtcGFkZGluZyhAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnhzKHBhZGRpbmctbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94c19vbmVfc2lkZX0pXCIpO1xuICAgIC54cyhwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3hzX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC14cy1wYWRkaW5nLWxlZnQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54cyhwYWRkaW5nLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHNfb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXhzLXBhZGRpbmctcmlnaHQoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54cyhwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3hzX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC14eHMoQG4pe1xuICAgIEB2YWw6IDEwMCUgLyBAY29sdW1ucyAqIEBuO1xuICAgIC54eHMobWFyZ2luLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHhzX29uZV9zaWRlfSlcIik7XG4gICAgLnh4cyhtYXJnaW4tcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHhzX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC14eHMtbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnh4cyhtYXJnaW4tbGVmdCwgflwiY2FsYyhAe3ZhbH0gKyBAe29mZnNldF94eHNfb25lX3NpZGV9KVwiKTtcbn1cblxuLnNoaWZ0LXh4cy1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnh4cyhtYXJnaW4tcmlnaHQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHhzX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC14eHMtcGFkZGluZyhAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnh4cyhwYWRkaW5nLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHhzX29uZV9zaWRlfSlcIik7XG4gICAgLnh4cyhwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3h4c19vbmVfc2lkZX0pXCIpO1xufVxuXG4uc2hpZnQteHhzLXBhZGRpbmctbGVmdChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnh4cyhwYWRkaW5nLWxlZnQsIH5cImNhbGMoQHt2YWx9ICsgQHtvZmZzZXRfeHhzX29uZV9zaWRlfSlcIik7XG59XG5cbi5zaGlmdC14eHMtcGFkZGluZy1yaWdodChAbil7XG4gICAgQHZhbDogMTAwJSAvIEBjb2x1bW5zICogQG47XG4gICAgLnh4cyhwYWRkaW5nLXJpZ2h0LCB+XCJjYWxjKEB7dmFsfSArIEB7b2Zmc2V0X3h4c19vbmVfc2lkZX0pXCIpO1xufVxuXG4ubWQoQG5hbWUsIEB2YWx1ZSl7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogQGJyZWFrX21kKXtcbiAgICAgICAgQHtuYW1lfTogQHZhbHVlO1xuICAgIH1cbn1cblxuLm1kLWJsb2NrKEBjb250ZW50KXtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBAYnJlYWtfbWQpe1xuICAgICAgICBAY29udGVudCgpO1xuICAgIH1cbn1cblxuLnNtKEBuYW1lLCBAdmFsdWUpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IEBicmVha19zbSl7XG4gICAgICAgIEB7bmFtZX06IEB2YWx1ZTtcbiAgICB9XG59XG5cbi5zbS1ibG9jayhAY29udGVudCl7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogQGJyZWFrX3NtKXtcbiAgICAgICAgQGNvbnRlbnQoKTtcbiAgICB9XG59XG5cbi5zc20oQG5hbWUsIEB2YWx1ZSl7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogQGJyZWFrX3NzbSl7XG4gICAgICAgIEB7bmFtZX06IEB2YWx1ZTtcbiAgICB9XG59XG5cbi5zc20tYmxvY2soQGNvbnRlbnQpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IEBicmVha19zc20pe1xuICAgICAgICBAY29udGVudCgpO1xuICAgIH1cbn1cblxuLnhzKEBuYW1lLCBAdmFsdWUpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IEBicmVha194cyl7XG4gICAgICAgIEB7bmFtZX06IEB2YWx1ZTtcbiAgICB9XG59XG5cbi54cy1ibG9jayhAY29udGVudCl7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogQGJyZWFrX3hzKXtcbiAgICAgICAgQGNvbnRlbnQoKTtcbiAgICB9XG59XG5cbi54eHMoQG5hbWUsIEB2YWx1ZSl7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogQGJyZWFrX3h4cyl7XG4gICAgICAgIEB7bmFtZX06IEB2YWx1ZTtcbiAgICB9XG59XG5cbi54eHMtYmxvY2soQGNvbnRlbnQpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IEBicmVha194eHMpe1xuICAgICAgICBAY29udGVudCgpO1xuICAgIH1cbn1cblxuLmZyb20oQG1pbl93aWR0aCwgQGNvbnRlbnQpe1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IEBtaW5fd2lkdGgpe1xuICAgICAgICBAY29udGVudCgpO1xuICAgIH1cbn1cblxuLnRvKEBtYXhfd2lkdGgsIEBjb250ZW50KXtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBAbWF4X3dpZHRoKXtcbiAgICAgICAgQGNvbnRlbnQoKTtcbiAgICB9XG59XG5cbi5mcm9tLXRvKEBtaW5fd2lkdGgsIEBtYXhfd2lkdGgsIEBjb250ZW50KXtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiBAbWluX3dpZHRoKSBhbmQgKG1heC13aWR0aDogQG1heF93aWR0aCl7XG4gICAgICAgIEBjb250ZW50KCk7XG4gICAgfVxufVxuXG4udS1yb3ctZmxleChAb2Zmc2V0KXtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBtYXJnaW4tbGVmdDogKEBvZmZzZXQgLyAtMik7XG4gICAgbWFyZ2luLXJpZ2h0OiAoQG9mZnNldCAvIC0yKTtcbn1cblxuLnUtY29sKEBvZmZzZXQpe1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIG1hcmdpbi1sZWZ0OiAoQG9mZnNldCAvIDIpO1xuICAgIG1hcmdpbi1yaWdodDogKEBvZmZzZXQgLyAyKTtcbn1cblxuLnUtc2l6ZShAbiwgQGNvbHVtbnMsIEBvZmZzZXQpe1xuICAgIHdpZHRoOiB+XCJjYWxjKDEwMCUgLyBAe2NvbHVtbnN9ICogQHtufSAtIEB7b2Zmc2V0fSlcIjtcbn1cblxuLnJlc2V0KCl7XG4gICAgYm9keSxkaXYsZGwsZHQsZGQsdWwsbGksaDEsaDIsaDMsaDQsaDUsaDYscHJlLGNvZGUsZm9ybSxmaWVsZHNldCxpbnB1dCx0ZXh0YXJlYSxwLGJsb2NrcXVvdGUsdGgsdGR7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICB9XG4gICAgdGFibGV7XG4gICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgICAgIGJvcmRlci1zcGFjaW5nOiAwO1xuICAgIH1cbiAgICBmaWVsZHNldCxpbWcsYWJicntcbiAgICAgICAgYm9yZGVyOiAwO1xuICAgIH1cbiAgICBhZGRyZXNzLGNhcHRpb24sY2l0ZSxjb2RlLGRmbixlbSxzdHJvbmcsdGgsdmFye1xuICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgfVxuICAgIHVsIGxpe1xuICAgICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIH1cbiAgICBjYXB0aW9uLHRoe1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIH1cbiAgICBoMSxoMixoMyxoNCxoNSxoNntcbiAgICAgICAgZm9udC1zaXplOiAxMDAlO1xuICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIH1cbiAgICBzdXB7XG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiB0ZXh0LXRvcDtcbiAgICB9XG4gICAgc3Vie1xuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207XG4gICAgfVxuICAgIGlucHV0LHRleHRhcmVhLHNlbGVjdHtcbiAgICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgICAgIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XG4gICAgfVxuICAgIGxlZ2VuZHtcbiAgICAgICAgY29sb3I6ICMwMDA7XG4gICAgfVxuICAgIGFydGljbGUsYXNpZGUsZGV0YWlscyxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsaGVhZGVyLGhncm91cCxtZW51LG5hdixzZWN0aW9uLG1haW57XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgICBpbWd7XG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgIH1cbn1cblxuLmRlYnVnKEBiYWNrZ3JvdW5kLCBAb3V0bGluZSl7XG4gICAgaGVpZ2h0OiAxMDB2aDtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgXG4gICAgPiBkaXZ7XG4gICAgICAgIGhlaWdodDogaW5oZXJpdDtcbiAgICAgICAgLndyYXBwZXIoKTtcbiAgICAgICAgXG4gICAgICAgID4gZGl2e1xuICAgICAgICAgICAgaGVpZ2h0OiBpbmhlcml0O1xuICAgICAgICAgICAgLnJvdy1mbGV4KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgID4gZGl2e1xuICAgICAgICAgICAgICAgIC5jb2woKTtcbiAgICAgICAgICAgICAgICAuc2l6ZSgxKTtcbiAgICAgICAgICAgICAgICAuc2l6ZS14cygxKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGluaGVyaXQ7XG4gICAgICAgICAgICAgICAgb3V0bGluZTogQG91dGxpbmU7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogQGJhY2tncm91bmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi5jbGVhcmZpeCgpe1xuICAgICY6OmFmdGVye1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgY2xlYXI6IGJvdGg7XG4gICAgfVxufSIsIkBpbXBvcnQgXCIuLi9mb250cy9mb250cy5sZXNzXCI7XG5AaW1wb3J0IFwiLi4vc3ByaXRlL3Nwcml0ZS5sZXNzXCI7XG5cbi5yZXNldCgpO1xuXG4ud3JhcHBlcntcbiAgICAud3JhcHBlcigpO1xufVxuXG5AZm9udC1mYWNlIHtcbiAgICAuZm9udChAZm9udDsgQGZvbnRSZWd1bGFyKTtcbn1cblxuQGZvbnQtZmFjZSB7XG4gICAgLmZvbnQoQFBUU2FuczsgXCJAe1BUU2Fuc30tQm9sZFwiKTtcbn1cblxuYm9keSB7XG4gICAgZm9udC1mYW1pbHk6IEBmb250UmVndWxhcjtcbiAgICAgcGFkZGluZzogMDtcbiAgICAgbWFyZ2luOiAwO1xufVxuXG5hLCBidXR0b257XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICY6Zm9jdXN7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgfVxuICB9XG4gIGF7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiBpbmhlcml0O1xuICB9XG4gIGlucHV0e1xuICAgIGN1cnNvcjogdGV4dDtcbiAgICAmOmZvY3Vze1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgIH1cbiAgfVxuICBcblxuIiwiLmZvbnQgKEBmb250OyBAZm9udE5hbWU7IEB1cmxOYW1lOiBAZm9udE5hbWU7IEB3ZWlnaHQ6IG5vcm1hbDsgQHN0eWxlOiBub3JtYWw7KSB7XG4gICAgZm9udC1mYW1pbHk6ICdAe2ZvbnROYW1lfSc7XG4gICAgc3JjOiB1cmwoJy4uLy4uL2ZvbnRzL0B7Zm9udH0vQHt1cmxOYW1lfS50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7IFxuICAgIGZvbnQtd2VpZ2h0OiBAd2VpZ2h0O1xuICAgIGZvbnQtc3R5bGU6IEBzdHlsZTtcbn1cblxuQE9wZW5TYW5zOiAnT3BlblNhbnMnO1xuQFJvYm90bzogJ1JvYm90byc7XG5AUFRTYW5zOiAnUFRTYW5zJztcblxuQGRlZmF1bHQ6IEBPcGVuU2FucztcblxuQGZvbnQ6IEBkZWZhdWx0O1xuQGZvbnRCb2xkOiAnQHtmb250fS1Cb2xkJztcbkBmb250SXRhbGljOiAnQHtmb250fS1JdGFsaWMnO1xuQGZvbnRSZWd1bGFyOiAnQHtmb250fS1SZWd1bGFyJzsiLCIucGFnZSB7XG4gICAgJl9fdGl0bGUge1xuICAgICAgICAmLWgxLCAmLWgyIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBcIkB7UFRTYW5zfS1Cb2xkXCI7XG4gICAgICAgICAgICBjb2xvcjogQGNvbG9yX2dyZWVuO1xuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xuICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgICAgICAgfVxuICAgICAgICAmLWgxIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogNDVweDtcbiAgICAgICAgfVxuICAgICAgICAmLWgyIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjVweDtcbiAgICAgICAgICAgIGNvbG9yOiBAY29sb3JfZ3JlZW47XG4gICAgICAgICAgICAmX3doaXRle1xuICAgICAgICAgICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgICZfX2J0biB7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIGhlaWdodDogNjhweDtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdAe1BUU2Fuc30tQm9sZCc7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgY29sb3I6IEBjb2xvcl93aGl0ZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogQGNvbG9yX3Zpb2xldDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgQGNvbG9yX3Zpb2xldDtcbiAgICAgICAgICAgICY6aG92ZXJ7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMjYyNjI2O1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAY29sb3Jfd2hpdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIGVhc2Utb3V0IDAuNXM7XG4gICAgICAgICAgICAgICAgfVxuICAgIH1cbiAgICAmX19idG5fMiB7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgd2lkdGg6IDI0MHB4O1xuXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgaGVpZ2h0OiA2OHB4O1xuICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgICAgICBmb250LWZhbWlseTogJ0B7UFRTYW5zfS1Cb2xkJztcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBjb2xvcjogQGNvbG9yX3doaXRlO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAY29sb3JfdmlvbGV0O1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBAY29sb3JfdmlvbGV0O1xuICAgICAgICAgICAgJjpob3ZlcntcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICMyNjI2MjY7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IEBjb2xvcl93aGl0ZTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgZWFzZS1vdXQgMC41cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgJl9fYnRuXzMge1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIHdpZHRoOiAyNDBweDtcblxuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIGhlaWdodDogNjhweDtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdAe1BUU2Fuc30tQm9sZCc7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgY29sb3I6IEBjb2xvcl93aGl0ZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogQGNvbG9yX3Zpb2xldDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgQGNvbG9yX3Zpb2xldDtcbiAgICAgICAgICAgICY6aG92ZXJ7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMjYyNjI2O1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAY29sb3Jfd2hpdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIGVhc2Utb3V0IDAuNXM7XG4gICAgICAgICAgICAgICAgfVxuICAgIH1cbiAgICAmX190ZXh0IHtcbiAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgICB9XG59XG5cbiIsIi5oZWFkZXIge1xuICAgIC5yb3ctZmxleCgpO1xuICAgIGNvbG9yOiBAY29sb3Jfd2hpdGU7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAmLWxvZ28ge1xuICAgICAgICAuY29sKCk7XG4gICAgICAgIC5zaXplKDYpO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAmX19pY29ue1xuICAgICAgICAgLnNwcml0ZShAaWNvbi1jZWxlbmRlcik7XG4gICAgICAgIH1cbiAgICAgICAgJl9fdGV4dCB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJAe1BUU2Fuc30tQm9sZFwiO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgICAgICAgICBmb250LXNpemU6IDI1cHg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAmLXNvY2lhbCB7XG4gICAgICAgIC5jb2woKTtcbiAgICAgICAgLnNpemUoNik7XG4gICAgICAgIC5zb2NpYWwge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIC8vanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgICAgJl9faWNvbiB7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwIDhweDsgXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICZfZmIsIFxuICAgICAgICAgICAgICAgICZfdHcsXG4gICAgICAgICAgICAgICAgJl9pbnN0LFxuICAgICAgICAgICAgICAgICZfdmltZW8sXG4gICAgICAgICAgICAgICAgJl9nb29nbGUge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IGludmVydCgxKTtcbiAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IGludmVydCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZmlsdGVyOiBpbnZlcnQoMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJl9mYiB7XG4gICAgICAgICAgICAgICAgICAgIC5zcHJpdGUoQGljb24tZmFjZWJvb2stYmxhY2spO1xuICAgICAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zcHJpdGUoQGljb24tZmFjZWJvb2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAmX3R3IHtcbiAgICAgICAgICAgICAgICAgICAgLnNwcml0ZShAaWNvbi10d2l0dGVyLWJsYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuc3ByaXRlKEBpY29uLXR3aXR0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAgICBcbiAgICAgICAgICAgICAgICAmX2luc3Qge1xuICAgICAgICAgICAgICAgICAgICAuc3ByaXRlKEBpY29uLWluc3RhZ3JhbS1ibGFjayk7XG4gICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNwcml0ZShAaWNvbi1pbnN0YWdyYW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAgICBcbiAgICAgICAgICAgICAgICAmX3ZpbWVvIHtcbiAgICAgICAgICAgICAgICAgICAgLnNwcml0ZShAaWNvbi12aW1lby1ibGFjayk7XG4gICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNwcml0ZShAaWNvbi12aW1lbyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgICAgICZfZ29vZ2xlIHtcbiAgICAgICAgICAgICAgICAgICAgLnNwcml0ZShAaWNvbi1nb29nbGUtcGx1cy1ibGFjayk7XG4gICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNwcml0ZShAaWNvbi1nb29nbGUtcGx1cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgXG4gICAgICAgIC5pY29ue1xuICAgICAgICAgICAgd2lkdGg6IDE1cHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAmLWJsb2NrIHtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgei1pbmRleDogMjtcbiAgICB9XG59XG5cbiIsIi8qXG5MRVNTIHZhcmlhYmxlcyBhcmUgaW5mb3JtYXRpb24gYWJvdXQgaWNvbidzIGNvbXBpbGVkIHN0YXRlLCBzdG9yZWQgdW5kZXIgaXRzIG9yaWdpbmFsIGZpbGUgbmFtZVxuXG4uaWNvbi1ob21lIHtcbiAgd2lkdGg6IEBpY29uLWhvbWUtd2lkdGg7XG59XG5cblRoZSBsYXJnZSBhcnJheS1saWtlIHZhcmlhYmxlcyBjb250YWluIGFsbCBpbmZvcm1hdGlvbiBhYm91dCBhIHNpbmdsZSBpY29uXG5AaWNvbi1ob21lOiB4IHkgb2Zmc2V0X3ggb2Zmc2V0X3kgd2lkdGggaGVpZ2h0IHRvdGFsX3dpZHRoIHRvdGFsX2hlaWdodCBpbWFnZV9wYXRoIG5hbWU7XG5cbkF0IHRoZSBib3R0b20gb2YgdGhpcyBzZWN0aW9uLCB3ZSBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzcHJpdGVzaGVldCBpdHNlbGZcbkBzcHJpdGVzaGVldDogd2lkdGggaGVpZ2h0IGltYWdlIEBzcHJpdGVzaGVldC1zcHJpdGVzO1xuKi9cbkBpY29uLWNlbGVuZGVyLW9yYW5nZS1uYW1lOiAnaWNvbi1jZWxlbmRlci1vcmFuZ2UnO1xuQGljb24tY2VsZW5kZXItb3JhbmdlLXg6IDBweDtcbkBpY29uLWNlbGVuZGVyLW9yYW5nZS15OiA1MXB4O1xuQGljb24tY2VsZW5kZXItb3JhbmdlLW9mZnNldC14OiAwcHg7XG5AaWNvbi1jZWxlbmRlci1vcmFuZ2Utb2Zmc2V0LXk6IC01MXB4O1xuQGljb24tY2VsZW5kZXItb3JhbmdlLXdpZHRoOiAxN3B4O1xuQGljb24tY2VsZW5kZXItb3JhbmdlLWhlaWdodDogMTlweDtcbkBpY29uLWNlbGVuZGVyLW9yYW5nZS10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi1jZWxlbmRlci1vcmFuZ2UtdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tY2VsZW5kZXItb3JhbmdlLWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQGljb24tY2VsZW5kZXItb3JhbmdlOiAwcHggNTFweCAwcHggLTUxcHggMTdweCAxOXB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1jZWxlbmRlci1vcmFuZ2UnO1xuQGljb24tY2VsZW5kZXItbmFtZTogJ2ljb24tY2VsZW5kZXInO1xuQGljb24tY2VsZW5kZXIteDogMHB4O1xuQGljb24tY2VsZW5kZXIteTogMHB4O1xuQGljb24tY2VsZW5kZXItb2Zmc2V0LXg6IDBweDtcbkBpY29uLWNlbGVuZGVyLW9mZnNldC15OiAwcHg7XG5AaWNvbi1jZWxlbmRlci13aWR0aDogNDNweDtcbkBpY29uLWNlbGVuZGVyLWhlaWdodDogNDFweDtcbkBpY29uLWNlbGVuZGVyLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLWNlbGVuZGVyLXRvdGFsLWhlaWdodDogOTZweDtcbkBpY29uLWNlbGVuZGVyLWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQGljb24tY2VsZW5kZXI6IDBweCAwcHggMHB4IDBweCA0M3B4IDQxcHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLWNlbGVuZGVyJztcbkBpY29uLWZhY2Vib29rLWJsYWNrLW5hbWU6ICdpY29uLWZhY2Vib29rLWJsYWNrJztcbkBpY29uLWZhY2Vib29rLWJsYWNrLXg6IDUxcHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay15OiA1MXB4O1xuQGljb24tZmFjZWJvb2stYmxhY2stb2Zmc2V0LXg6IC01MXB4O1xuQGljb24tZmFjZWJvb2stYmxhY2stb2Zmc2V0LXk6IC01MXB4O1xuQGljb24tZmFjZWJvb2stYmxhY2std2lkdGg6IDE2cHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay1oZWlnaHQ6IDE2cHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay10b3RhbC1oZWlnaHQ6IDk2cHg7XG5AaWNvbi1mYWNlYm9vay1ibGFjay1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLWZhY2Vib29rLWJsYWNrOiA1MXB4IDUxcHggLTUxcHggLTUxcHggMTZweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1mYWNlYm9vay1ibGFjayc7XG5AaWNvbi1mYWNlYm9vay1uYW1lOiAnaWNvbi1mYWNlYm9vayc7XG5AaWNvbi1mYWNlYm9vay14OiA4N3B4O1xuQGljb24tZmFjZWJvb2steTogMHB4O1xuQGljb24tZmFjZWJvb2stb2Zmc2V0LXg6IC04N3B4O1xuQGljb24tZmFjZWJvb2stb2Zmc2V0LXk6IDBweDtcbkBpY29uLWZhY2Vib29rLXdpZHRoOiAxNnB4O1xuQGljb24tZmFjZWJvb2staGVpZ2h0OiAxNnB4O1xuQGljb24tZmFjZWJvb2stdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24tZmFjZWJvb2stdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tZmFjZWJvb2staW1hZ2U6ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyc7XG5AaWNvbi1mYWNlYm9vazogODdweCAwcHggLTg3cHggMHB4IDE2cHggMTZweCAxMjlweCA5NnB4ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZycgJ2ljb24tZmFjZWJvb2snO1xuQGljb24tZ29vZ2xlLXBsdXMtYmxhY2stbmFtZTogJ2ljb24tZ29vZ2xlLXBsdXMtYmxhY2snO1xuQGljb24tZ29vZ2xlLXBsdXMtYmxhY2steDogODdweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLXk6IDI2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1ibGFjay1vZmZzZXQteDogLTg3cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1ibGFjay1vZmZzZXQteTogLTI2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1ibGFjay13aWR0aDogMTZweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLWhlaWdodDogMTZweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLXRvdGFsLWhlaWdodDogOTZweDtcbkBpY29uLWdvb2dsZS1wbHVzLWJsYWNrLWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQGljb24tZ29vZ2xlLXBsdXMtYmxhY2s6IDg3cHggMjZweCAtODdweCAtMjZweCAxNnB4IDE2cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLWdvb2dsZS1wbHVzLWJsYWNrJztcbkBpY29uLWdvb2dsZS1wbHVzLW5hbWU6ICdpY29uLWdvb2dsZS1wbHVzJztcbkBpY29uLWdvb2dsZS1wbHVzLXg6IDg3cHg7XG5AaWNvbi1nb29nbGUtcGx1cy15OiA1MnB4O1xuQGljb24tZ29vZ2xlLXBsdXMtb2Zmc2V0LXg6IC04N3B4O1xuQGljb24tZ29vZ2xlLXBsdXMtb2Zmc2V0LXk6IC01MnB4O1xuQGljb24tZ29vZ2xlLXBsdXMtd2lkdGg6IDE2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1oZWlnaHQ6IDE2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi1nb29nbGUtcGx1cy10b3RhbC1oZWlnaHQ6IDk2cHg7XG5AaWNvbi1nb29nbGUtcGx1cy1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLWdvb2dsZS1wbHVzOiA4N3B4IDUycHggLTg3cHggLTUycHggMTZweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1nb29nbGUtcGx1cyc7XG5AaWNvbi1pbnN0YWdyYW0tYmxhY2stbmFtZTogJ2ljb24taW5zdGFncmFtLWJsYWNrJztcbkBpY29uLWluc3RhZ3JhbS1ibGFjay14OiAwcHg7XG5AaWNvbi1pbnN0YWdyYW0tYmxhY2steTogODBweDtcbkBpY29uLWluc3RhZ3JhbS1ibGFjay1vZmZzZXQteDogMHB4O1xuQGljb24taW5zdGFncmFtLWJsYWNrLW9mZnNldC15OiAtODBweDtcbkBpY29uLWluc3RhZ3JhbS1ibGFjay13aWR0aDogMTZweDtcbkBpY29uLWluc3RhZ3JhbS1ibGFjay1oZWlnaHQ6IDE2cHg7XG5AaWNvbi1pbnN0YWdyYW0tYmxhY2stdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24taW5zdGFncmFtLWJsYWNrLXRvdGFsLWhlaWdodDogOTZweDtcbkBpY29uLWluc3RhZ3JhbS1ibGFjay1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLWluc3RhZ3JhbS1ibGFjazogMHB4IDgwcHggMHB4IC04MHB4IDE2cHggMTZweCAxMjlweCA5NnB4ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZycgJ2ljb24taW5zdGFncmFtLWJsYWNrJztcbkBpY29uLWluc3RhZ3JhbS1uYW1lOiAnaWNvbi1pbnN0YWdyYW0nO1xuQGljb24taW5zdGFncmFtLXg6IDI2cHg7XG5AaWNvbi1pbnN0YWdyYW0teTogODBweDtcbkBpY29uLWluc3RhZ3JhbS1vZmZzZXQteDogLTI2cHg7XG5AaWNvbi1pbnN0YWdyYW0tb2Zmc2V0LXk6IC04MHB4O1xuQGljb24taW5zdGFncmFtLXdpZHRoOiAxNnB4O1xuQGljb24taW5zdGFncmFtLWhlaWdodDogMTZweDtcbkBpY29uLWluc3RhZ3JhbS10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi1pbnN0YWdyYW0tdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24taW5zdGFncmFtLWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQGljb24taW5zdGFncmFtOiAyNnB4IDgwcHggLTI2cHggLTgwcHggMTZweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1pbnN0YWdyYW0nO1xuQGljb24tbWFucGx1cy1uYW1lOiAnaWNvbi1tYW5wbHVzJztcbkBpY29uLW1hbnBsdXMteDogNTNweDtcbkBpY29uLW1hbnBsdXMteTogMHB4O1xuQGljb24tbWFucGx1cy1vZmZzZXQteDogLTUzcHg7XG5AaWNvbi1tYW5wbHVzLW9mZnNldC15OiAwcHg7XG5AaWNvbi1tYW5wbHVzLXdpZHRoOiAyNHB4O1xuQGljb24tbWFucGx1cy1oZWlnaHQ6IDE5cHg7XG5AaWNvbi1tYW5wbHVzLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLW1hbnBsdXMtdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tbWFucGx1cy1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLW1hbnBsdXM6IDUzcHggMHB4IC01M3B4IDBweCAyNHB4IDE5cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLW1hbnBsdXMnO1xuQGljb24tbWFyay1tYXAtbmFtZTogJ2ljb24tbWFyay1tYXAnO1xuQGljb24tbWFyay1tYXAteDogMTEzcHg7XG5AaWNvbi1tYXJrLW1hcC15OiA1MnB4O1xuQGljb24tbWFyay1tYXAtb2Zmc2V0LXg6IC0xMTNweDtcbkBpY29uLW1hcmstbWFwLW9mZnNldC15OiAtNTJweDtcbkBpY29uLW1hcmstbWFwLXdpZHRoOiAxMnB4O1xuQGljb24tbWFyay1tYXAtaGVpZ2h0OiAxNnB4O1xuQGljb24tbWFyay1tYXAtdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24tbWFyay1tYXAtdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tbWFyay1tYXAtaW1hZ2U6ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyc7XG5AaWNvbi1tYXJrLW1hcDogMTEzcHggNTJweCAtMTEzcHggLTUycHggMTJweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi1tYXJrLW1hcCc7XG5AaWNvbi1taWNyb2Zvbi1uYW1lOiAnaWNvbi1taWNyb2Zvbic7XG5AaWNvbi1taWNyb2Zvbi14OiAyN3B4O1xuQGljb24tbWljcm9mb24teTogNTFweDtcbkBpY29uLW1pY3JvZm9uLW9mZnNldC14OiAtMjdweDtcbkBpY29uLW1pY3JvZm9uLW9mZnNldC15OiAtNTFweDtcbkBpY29uLW1pY3JvZm9uLXdpZHRoOiAxNHB4O1xuQGljb24tbWljcm9mb24taGVpZ2h0OiAxOXB4O1xuQGljb24tbWljcm9mb24tdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24tbWljcm9mb24tdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tbWljcm9mb24taW1hZ2U6ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyc7XG5AaWNvbi1taWNyb2ZvbjogMjdweCA1MXB4IC0yN3B4IC01MXB4IDE0cHggMTlweCAxMjlweCA5NnB4ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZycgJ2ljb24tbWljcm9mb24nO1xuQGljb24tdHdpdHRlci1ibGFjay1uYW1lOiAnaWNvbi10d2l0dGVyLWJsYWNrJztcbkBpY29uLXR3aXR0ZXItYmxhY2steDogNTJweDtcbkBpY29uLXR3aXR0ZXItYmxhY2steTogODBweDtcbkBpY29uLXR3aXR0ZXItYmxhY2stb2Zmc2V0LXg6IC01MnB4O1xuQGljb24tdHdpdHRlci1ibGFjay1vZmZzZXQteTogLTgwcHg7XG5AaWNvbi10d2l0dGVyLWJsYWNrLXdpZHRoOiAxNnB4O1xuQGljb24tdHdpdHRlci1ibGFjay1oZWlnaHQ6IDE2cHg7XG5AaWNvbi10d2l0dGVyLWJsYWNrLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLXR3aXR0ZXItYmxhY2stdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tdHdpdHRlci1ibGFjay1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLXR3aXR0ZXItYmxhY2s6IDUycHggODBweCAtNTJweCAtODBweCAxNnB4IDE2cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLXR3aXR0ZXItYmxhY2snO1xuQGljb24tdHdpdHRlci1uYW1lOiAnaWNvbi10d2l0dGVyJztcbkBpY29uLXR3aXR0ZXIteDogNzhweDtcbkBpY29uLXR3aXR0ZXIteTogODBweDtcbkBpY29uLXR3aXR0ZXItb2Zmc2V0LXg6IC03OHB4O1xuQGljb24tdHdpdHRlci1vZmZzZXQteTogLTgwcHg7XG5AaWNvbi10d2l0dGVyLXdpZHRoOiAxNnB4O1xuQGljb24tdHdpdHRlci1oZWlnaHQ6IDE2cHg7XG5AaWNvbi10d2l0dGVyLXRvdGFsLXdpZHRoOiAxMjlweDtcbkBpY29uLXR3aXR0ZXItdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tdHdpdHRlci1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLXR3aXR0ZXI6IDc4cHggODBweCAtNzhweCAtODBweCAxNnB4IDE2cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLXR3aXR0ZXInO1xuQGljb24tdmltZW8tYmxhY2stbmFtZTogJ2ljb24tdmltZW8tYmxhY2snO1xuQGljb24tdmltZW8tYmxhY2steDogMTEzcHg7XG5AaWNvbi12aW1lby1ibGFjay15OiAwcHg7XG5AaWNvbi12aW1lby1ibGFjay1vZmZzZXQteDogLTExM3B4O1xuQGljb24tdmltZW8tYmxhY2stb2Zmc2V0LXk6IDBweDtcbkBpY29uLXZpbWVvLWJsYWNrLXdpZHRoOiAxNnB4O1xuQGljb24tdmltZW8tYmxhY2staGVpZ2h0OiAxNnB4O1xuQGljb24tdmltZW8tYmxhY2stdG90YWwtd2lkdGg6IDEyOXB4O1xuQGljb24tdmltZW8tYmxhY2stdG90YWwtaGVpZ2h0OiA5NnB4O1xuQGljb24tdmltZW8tYmxhY2staW1hZ2U6ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZyc7XG5AaWNvbi12aW1lby1ibGFjazogMTEzcHggMHB4IC0xMTNweCAwcHggMTZweCAxNnB4IDEyOXB4IDk2cHggJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJyAnaWNvbi12aW1lby1ibGFjayc7XG5AaWNvbi12aW1lby1uYW1lOiAnaWNvbi12aW1lbyc7XG5AaWNvbi12aW1lby14OiAxMTNweDtcbkBpY29uLXZpbWVvLXk6IDI2cHg7XG5AaWNvbi12aW1lby1vZmZzZXQteDogLTExM3B4O1xuQGljb24tdmltZW8tb2Zmc2V0LXk6IC0yNnB4O1xuQGljb24tdmltZW8td2lkdGg6IDE2cHg7XG5AaWNvbi12aW1lby1oZWlnaHQ6IDE2cHg7XG5AaWNvbi12aW1lby10b3RhbC13aWR0aDogMTI5cHg7XG5AaWNvbi12aW1lby10b3RhbC1oZWlnaHQ6IDk2cHg7XG5AaWNvbi12aW1lby1pbWFnZTogJy4uL2Fzc2V0cy9pY29ucy9zcHJpdGUucG5nJztcbkBpY29uLXZpbWVvOiAxMTNweCAyNnB4IC0xMTNweCAtMjZweCAxNnB4IDE2cHggMTI5cHggOTZweCAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnICdpY29uLXZpbWVvJztcbkBzcHJpdGVzaGVldC13aWR0aDogMTI5cHg7XG5Ac3ByaXRlc2hlZXQtaGVpZ2h0OiA5NnB4O1xuQHNwcml0ZXNoZWV0LWltYWdlOiAnLi4vYXNzZXRzL2ljb25zL3Nwcml0ZS5wbmcnO1xuQHNwcml0ZXNoZWV0LXNwcml0ZXM6IEBpY29uLWNlbGVuZGVyLW9yYW5nZSBAaWNvbi1jZWxlbmRlciBAaWNvbi1mYWNlYm9vay1ibGFjayBAaWNvbi1mYWNlYm9vayBAaWNvbi1nb29nbGUtcGx1cy1ibGFjayBAaWNvbi1nb29nbGUtcGx1cyBAaWNvbi1pbnN0YWdyYW0tYmxhY2sgQGljb24taW5zdGFncmFtIEBpY29uLW1hbnBsdXMgQGljb24tbWFyay1tYXAgQGljb24tbWljcm9mb24gQGljb24tdHdpdHRlci1ibGFjayBAaWNvbi10d2l0dGVyIEBpY29uLXZpbWVvLWJsYWNrIEBpY29uLXZpbWVvO1xuQHNwcml0ZXNoZWV0OiAxMjlweCA5NnB4ICcuLi9hc3NldHMvaWNvbnMvc3ByaXRlLnBuZycgQHNwcml0ZXNoZWV0LXNwcml0ZXM7XG5cbi8qXG5UaGUgcHJvdmlkZWQgY2xhc3NlcyBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIHRoZSBhcnJheS1saWtlIHZhcmlhYmxlc1xuXG4uaWNvbi1ob21lIHtcbiAgLnNwcml0ZS13aWR0aChAaWNvbi1ob21lKTtcbn1cbi5pY29uLWVtYWlsIHtcbiAgLnNwcml0ZShAaWNvbi1lbWFpbCk7XG59XG5cbkV4YW1wbGUgdXNhZ2UgaW4gSFRNTDpcblxuYGRpc3BsYXk6IGJsb2NrYCBzcHJpdGU6XG48ZGl2IGNsYXNzPVwiaWNvbi1ob21lXCI+PC9kaXY+XG5cblRvIGNoYW5nZSBgZGlzcGxheWAgKGUuZy4gYGRpc3BsYXk6IGlubGluZS1ibG9jaztgKSwgd2Ugc3VnZ2VzdCB1c2luZyBhIGNvbW1vbiBDU1MgY2xhc3M6XG5cbi8vIENTU1xuLmljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8vIEhUTUxcbjxpIGNsYXNzPVwiaWNvbiBpY29uLWhvbWVcIj48L2k+XG4qL1xuLnNwcml0ZS13aWR0aChAc3ByaXRlKSB7XG4gIHdpZHRoOiBleHRyYWN0KEBzcHJpdGUsIDUpO1xufVxuXG4uc3ByaXRlLWhlaWdodChAc3ByaXRlKSB7XG4gIGhlaWdodDogZXh0cmFjdChAc3ByaXRlLCA2KTtcbn1cblxuLnNwcml0ZS1wb3NpdGlvbihAc3ByaXRlKSB7XG4gIEBzcHJpdGUtb2Zmc2V0LXg6IGV4dHJhY3QoQHNwcml0ZSwgMyk7XG4gIEBzcHJpdGUtb2Zmc2V0LXk6IGV4dHJhY3QoQHNwcml0ZSwgNCk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IEBzcHJpdGUtb2Zmc2V0LXggQHNwcml0ZS1vZmZzZXQteTtcbn1cblxuLnNwcml0ZS1pbWFnZShAc3ByaXRlKSB7XG4gIEBzcHJpdGUtaW1hZ2U6IGV4dHJhY3QoQHNwcml0ZSwgOSk7XG4gIGJhY2tncm91bmQtaW1hZ2U6IGUoJSgndXJsKCVhKScsIGUoQHNwcml0ZS1pbWFnZSkpKTtcbn1cblxuLnNwcml0ZShAc3ByaXRlKSB7XG4gIC5zcHJpdGUtaW1hZ2UoQHNwcml0ZSk7XG4gIC5zcHJpdGUtcG9zaXRpb24oQHNwcml0ZSk7XG4gIC5zcHJpdGUtd2lkdGgoQHNwcml0ZSk7XG4gIC5zcHJpdGUtaGVpZ2h0KEBzcHJpdGUpO1xufVxuXG4vKlxuVGhlIGAuc3ByaXRlc2AgbWl4aW4gZ2VuZXJhdGVzIGlkZW50aWNhbCBvdXRwdXQgdG8gdGhlIENTUyB0ZW1wbGF0ZVxuICBidXQgY2FuIGJlIG92ZXJyaWRkZW4gaW5zaWRlIG9mIExFU1NcblxuVGhpcyBtdXN0IGJlIHJ1biB3aGVuIHlvdSBoYXZlIGF0IGxlYXN0IDIgc3ByaXRlcy5cbiAgSWYgcnVuIHdpdGggYSBzaW5nbGUgc3ByaXRlLCB0aGVuIHRoZXJlIHdpbGwgYmUgcmVmZXJlbmNlIGVycm9ycy5cblxuLnNwcml0ZXMoQHNwcml0ZXNoZWV0LXNwcml0ZXMpO1xuKi9cbi5zcHJpdGVzKEBzcHJpdGVzLCBAaTogMSkgd2hlbiAoQGkgPD0gbGVuZ3RoKEBzcHJpdGVzKSkge1xuICBAc3ByaXRlOiBleHRyYWN0KEBzcHJpdGVzLCBAaSk7XG4gIEBzcHJpdGUtbmFtZTogZShleHRyYWN0KEBzcHJpdGUsIDEwKSk7XG4gIC5Ae3Nwcml0ZS1uYW1lfSB7XG4gICAgLnNwcml0ZShAc3ByaXRlKTtcbiAgfVxuICAuc3ByaXRlcyhAc3ByaXRlcywgQGkgKyAxKTtcbn1cbiIsIi5iYW5uZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vYXNzZXRzL2ltZy9iZy5qcGdcIik7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAmLWJsb2NrIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgcGFkZGluZy10b3A6IDE1cHg7XG4gICAgXG4gICAgICAgIC5wYWdlX190aXRsZS1oMSB7XG4gICAgICAgIH1cbiAgICAgICAgJi1pbmZvIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDI1cHg7XG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJAe1BUU2Fuc30tQm9sZFwiO1xuICAgICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwIDEwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmX19pY29uLWNlbGVuZGVyLCAmX19pY29uLW1hcmstbWFwIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTVweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmX19pY29uLWNlbGVuZGVyIHtcbiAgICAgICAgICAgICAgICAuc3ByaXRlKEBpY29uLWNlbGVuZGVyLW9yYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmX19pY29uLW1hcmstbWFwIHtcbiAgICAgICAgICAgICAgICAuc3ByaXRlKEBpY29uLW1hcmstbWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAmLXRleHQge1xuICAgICAgICAgICAgbWFyZ2luOiAyNXB4IGF1dG8gMzVweDtcbiAgICAgICAgICAgIC5zaXplKDEwKTtcbiAgICAgICAgICAgIC5zaXplLXhzKDEyKTtcbiAgICAgICAgICAgIC5hbmltYXRlZCh7XG4gICAgICAgICAgICAgICAgLmRlbGF5KDFzKTtcbiAgICAgICAgICAgICAgICAuZmFkZUluKCk7XG4gICAgICAgICAgICAgICAgLy8uc2xvdygpO1xuICAgICAgICAgICAgICAgIC8vLmRlbGF5KDEycyk7XG4gICAgICAgICAgICAgICAgLy8uaW5maW5pdGUoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgJi1idG4ge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNTBweDtcbiAgICAgICAgICAgIC5zc20oZmxleC13cmFwLCB3cmFwKTtcbiAgICAgICAgICAgIC5wYWdlX19idG4ge1xuICAgICAgICAgICAgICAgIC5jb2woKTtcbiAgICAgICAgICAgICAgICAuc2l6ZSgzKTtcbiAgICAgICAgICAgICAgICAuc2l6ZS1zc20oNyk7XG4gICAgICAgICAgICAgICAgLnNpemUteHMoMTIpO1xuICAgICAgICAgICAgICAgIC5zc20obWFyZ2luLWJvdHRvbSwgMTVweCk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9XG4gICAgICAgICYtY291bnRlciB7XG4gICAgICAgICAgICAuc2l6ZSg3KTtcbiAgICAgICAgICAgIC5zaXplLXNtKDEyKTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgICAgICBtYXJnaW46IDAgYXV0byAtNzBweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IEBjb2xvcl9vcmFuZ2U7XG4gICAgICAgICAgICBwYWRkaW5nOiAyNXB4IDUwcHg7XG4gICAgICAgICAgICAuc20ocGFkZGluZywgMjVweCk7XG4gICAgICAgICAgICAueHMoZGlzcGxheSwgbm9uZSk7XG4gICAgICAgICAgICAmX19pdGVtIHtcbiAgICAgICAgICAgICAgICAuY29sKCk7XG4gICAgICAgICAgICAgICAgLnNpemUoMyk7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCBAY29sb3Jfd2hpdGU7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTAlO1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDI1cHggMDtcbiAgICAgICAgICAgICAgICAmX251bWJlciB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiQHtQVFNhbnN9LUJvbGRcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJl90ZXh0IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgICZfb3BhY2l0eSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgIH1cbn0iLCIuYWJvdXQtZXZlbnQge1xuXG4gICAgJi1ibG9rIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDgwcHg7XG4gICAgICAgIFxuICAgIH1cblxuICAgICZfX3dyYXBwZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgIH1cblxuICAgICZfX2xlZnQge1xuICAgICAgICBwYWRkaW5nLXRvcDogMTYwcHg7XG4gICAgICAgIC8vcGFkZGluZy1sZWZ0OiAyNTBweDtcbiAgICAgICAgLmNvbCgpO1xuICAgICAgICAuc2l6ZSg2KTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICAgICAgICBcbiAgICB9XG5cbiAgICAmX190aXRsZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMjVweDtcbiAgICAgICAgY29sb3I6IEBjb2xvcl9ncmVlbjtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgZm9udC1mYW1pbHk6IFwiQHtQVFNhbnN9LUJvbGRcIjtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDMwcHg7XG4gICAgICAgIC5zaXplKDYpO1xuICAgIH1cblxuICAgICZfX3RleHRfMiB7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA0MHB4O1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgIGNvbG9yOiBAY29sb3JfZ3JheXR3bztcbiAgICAgICAgd2lkdGg6IDQ2MHB4O1xuICAgICAgICBcbiAgICB9XG5cbiAgICAmX190ZXh0XzMge1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgIGNvbG9yOiBAY29sb3JfZ3JheXR3bztcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDQwcHg7XG4gICAgICAgIHdpZHRoOiA0MDFweDtcbiAgICB9XG5cbiAgICAmX19yaWdodCB7XG4gICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgIGhlaWdodDogMzc1cHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IEBjb2xvcl9ncmF5O1xuICAgICAgICBtYXJnaW4tdG9wOiAxNTBweDtcbiAgICAgICAgd2lkdGg6IDQwMHB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAuY29sKCk7XG4gICAgICAgIC5zaXplKDYpO1xuICAgIH1cblxuICAgICZfX2ljb24tbWFwIHtcbiAgICAgICAgLnNwcml0ZShAaWNvbi1tYXJrLW1hcCk7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdG9wOiAyMHB4O1xuICAgICAgICBsZWZ0OiAyMHB4O1xuICAgIH1cblxuICAgICZfX2ljb24tY2VsZW5kZXIge1xuICAgICAgICAuc3ByaXRlKEBpY29uLWNlbGVuZGVyLW9yYW5nZSk7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdG9wOiAyMHB4O1xuICAgICAgICBsZWZ0OiAyMHB4O1xuICAgIH1cblxuICAgICZfX2ljb24tbWljcm9waG9uZXtcbiAgICAgICAgLnNwcml0ZShAaWNvbi1taWNyb2Zvbik7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdG9wOiAyMHB4O1xuICAgICAgICBsZWZ0OiAyMHB4O1xuICAgIH1cblxuICAgICZfX2ljb24tbWFucGx1cyB7XG4gICAgICAgIC5zcHJpdGUoQGljb24tbWFucGx1cyk7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdG9wOiAyMHB4O1xuICAgICAgICBsZWZ0OiAyMHB4O1xuICAgIH1cblxuICAgICZfX2Jsb2tfMSwgJl9fYmxva18yLCAmX19ibG9rXzMsICZfX2Jsb2tfNCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgfVxuXG4gICAgJl9fdGV4dF80IHtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xuICAgICAgICAvL3BhZGRpbmctYm90dG9tOiAyMnB4O1xuICAgICAgICBmb250LWZhbWlseTogXCJAe1BUU2Fuc30tQm9sZFwiO1xuICAgIH1cblxuICAgICZfX3RleHRfNSB7XG4gICAgICAgIC8vZm9udC1mYW1pbHk6IFwiQHtQVFNhbnN9LVJlZ3VsYXJcIjtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xuICAgICAgICBjb2xvcjogIzg4ODg4ODtcbiAgICB9XG5cbn0iLCIucHJlc2VudGF0aW9uIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAY29sb3JfZ3JheTtcbiAgICBtYXgtaGVpZ2h0OiA1NDNweDtcbiAgICBtYXJnaW4tdG9wOiA4MHB4O1xuICAgIHBhZGRpbmctdG9wOiA4MHB4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIC8vLnBhZ2VfX3RpdGxlLWgyLCAucGFnZV9fdGV4dCB7XG4gICAgICAgIC8vdGV4dC1hbGlnbjogY2VudGVyO1xuICAgLy99XG5cbiAgICAvLy5wYWdlX190aXRsZS1oMiB7XG4gICAgLy8gICAgcGFkZGluZy1ib3R0b206IDMwcHg7XG4gICAvLyB9XG4gICAgLnBhZ2VfX3RleHQge1xuICAgICAgICAuc2l6ZSg4KTtcbiAgICAgICAgLnNpemUteHMoMTIpO1xuICAgICAgICAueHMocGFkZGluZywgMjBweCAwKTtcbiAgICAgICAgLy9tYXJnaW46IDQwcHggYXV0byAzMHB4O1xuICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgICAgcGFkZGluZzogNDBweCAzMHB4O1xuICAgICAgICBjb2xvcjogIzc3NztcbiAgICB9XG4gICAgLnBhZ2VfX2J0biB7XG4gICAgICAgIC5zaXplKDMpO1xuICAgICAgICBtYXJnaW46IDAgYXV0byA1MHB4O1xuICAgICAgICAuc2l6ZS14cygxMik7XG4gICAgfVxuICAgIFxuICAgIC5wYWdlX19pbWcge1xuICAgICAgICBtYXJnaW4tbGVmdDogMzBweDtcbiAgICAgICAgLnhzKGRpc3BsYXksIG5vbmUpO1xuICAgIH1cbn0iLCIuZGVidWdHcmlke1xuICAgIC5kZWJ1ZyhyZ2JhKDAsIDAsIDAsIDAuNCksIDFweCBzb2xpZCAjZmYwKTtcbiAgICAuZGVidWdCdG4oKTtcbn0iLCIuZGVidWdCdG4oKSB7XG4gICAgJi1idG4ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICB3aWR0aDogNTBweDtcbiAgICAgICAgaGVpZ2h0OiA1MHB4O1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmYwO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcblxuICAgICAgICAmaGlkZGVuIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAmOmJlZm9yZSxcbiAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMwMDA7XG4gICAgICAgIH1cblxuICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICB3aWR0aDogMjVweDtcbiAgICAgICAgICAgIGhlaWdodDogMnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgJmNyZWF0ZSB7XG4gICAgICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMnB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAmX196LWluZGV4LW5lZ2F0aXZlIHtcbiAgICAgICAgei1pbmRleDogLTE7XG4gICAgfVxufSJdfQ== */
